{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "promotionNFTAddress",
          "type": "address"
        }
      ],
      "name": "PromotionNFTDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "TokenURIChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes32",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "changeTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deploymentCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "promoter",
          "type": "address"
        }
      ],
      "name": "getLatestPromotionDeployment",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_body",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestPromotionDeployment",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e29320825f0257ca4628ce6f43d92acc2484b1d15826134782ca3a3d9a9f17b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2252513",
    "logsBloom": "0x
    "blockHash": "0x51be08738483a3f4a08a9b44477ebfb87d1d0bc08d94679501d6fb32105b924b",
    "transactionHash": "0x9e29320825f0257ca4628ce6f43d92acc2484b1d15826134782ca3a3d9a9f17b",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2252513",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0ca03ad8f5e33c55115d664f32736906",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotionNFTAddress\",\"type\":\"address\"}],\"name\":\"PromotionNFTDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"TokenURIChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"changeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deploymentCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"promoter\",\"type\":\"address\"}],\"name\":\"getLatestPromotionDeployment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_body\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestPromotionDeployment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_body\":\"Raw bytes content of message body\",\"_origin\":\"Domain ID of the chain from which the message came\",\"_sender\":\"Address of the message sender on the origin chain as bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handle an interchain message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Receiver.sol\":\"Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721Promotion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/IMessageRecipient.sol\\\";\\r\\n\\r\\ncontract ERC721Promotion is\\r\\n    ERC721,\\r\\n    ERC721URIStorage,\\r\\n    Ownable,\\r\\n    IMessageRecipient\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public badgeTokenURI;\\r\\n    uint256 public amountOfClaimsPerPerson;\\r\\n    mapping(address => uint) claimerToClaimsCount;\\r\\n    address public immutable mailbox;\\r\\n    address public promoter;\\r\\n\\r\\n    event ClaimedPromotion(address claimer, uint claimCount);\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory _tokenURI,\\r\\n        address _promoterAddress,\\r\\n        uint _amountOfClaimsPerPerson,\\r\\n        address _mailboxAddress\\r\\n    ) ERC721(name, symbol) {\\r\\n        badgeTokenURI = _tokenURI;\\r\\n        amountOfClaimsPerPerson = _amountOfClaimsPerPerson;\\r\\n        mailbox = _mailboxAddress;\\r\\n        promoter = _promoterAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyMailbox() {\\r\\n        require(msg.sender == mailbox);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external onlyMailbox {\\r\\n        address claimer = abi.decode(_body, (address));\\r\\n        if (claimerToClaimsCount[claimer] == 0) {\\r\\n            safeMint(claimer);\\r\\n        } else {\\r\\n            require(\\r\\n                claimerToClaimsCount[claimer] < amountOfClaimsPerPerson,\\r\\n                \\\"No more claims\\\"\\r\\n            );\\r\\n            addClaim(claimer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) internal {\\r\\n        require(claimerToClaimsCount[to] == 0, \\\"Already owns NFT\\\");\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, badgeTokenURI);\\r\\n        claimerToClaimsCount[to] = 1;\\r\\n        emit ClaimedPromotion(to, 1);\\r\\n    }\\r\\n\\r\\n    function addClaim(address to) internal {\\r\\n        claimerToClaimsCount[to] += 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, claimerToClaimsCount[to]);\\r\\n    }\\r\\n\\r\\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\\r\\n        badgeTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n    // Soulbound Token\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public pure override {\\r\\n        revert(\\\"Cannot transfer\\\");\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        revert(\\\"Disabled\\\");\\r\\n        // super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x88fa983d5ded5bf2fd681ea59094520bc1b932b6e2f0d55bd53e4c28b690360f\",\"license\":\"MIT\"},\"contracts/Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./interfaces/IMessageRecipient.sol\\\";\\r\\nimport \\\"./ERC721Promotion.sol\\\";\\r\\n\\r\\ncontract Receiver is IMessageRecipient {\\r\\n    mapping(address => address) public latestPromotionDeployment;\\r\\n    mapping(address => address) public deploymentCreator;\\r\\n    address public immutable mailbox =\\r\\n        0xCC737a94FecaeC165AbCf12dED095BB13F037685;\\r\\n\\r\\n    event PromotionNFTDeployed(address promotionNFTAddress);\\r\\n    event TokenURIChanged(\\r\\n        address contractAddress,\\r\\n        address creator,\\r\\n        string newURI\\r\\n    );\\r\\n\\r\\n    modifier onlyMailbox() {\\r\\n        require(msg.sender == mailbox);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external onlyMailbox {\\r\\n        bytes32 salt = bytes32(\\r\\n            0x0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\\r\\n        );\\r\\n        address childContractAddress;\\r\\n        bytes memory childContractBytecode = abi.encodePacked(\\r\\n            type(ERC721Promotion).creationCode,\\r\\n            _body\\r\\n        );\\r\\n        assembly {\\r\\n            childContractAddress := create2(\\r\\n                0,\\r\\n                add(childContractBytecode, 0x20),\\r\\n                mload(childContractBytecode),\\r\\n                salt\\r\\n            )\\r\\n            if iszero(extcodesize(childContractAddress)) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n        }\\r\\n        emit PromotionNFTDeployed(childContractAddress);\\r\\n    }\\r\\n\\r\\n    function changeTokenURI(address contractAddress, string calldata newURI)\\r\\n        public\\r\\n    {\\r\\n        require(msg.sender == deploymentCreator[contractAddress], \\\"Not owned\\\");\\r\\n        ERC721Promotion(contractAddress).setTokenURI(newURI);\\r\\n\\r\\n        emit TokenURIChanged(contractAddress, msg.sender, newURI);\\r\\n    }\\r\\n\\r\\n    function getLatestPromotionDeployment(address promoter)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return latestPromotionDeployment[promoter];\\r\\n    }\\r\\n\\r\\n    function bytes32ToString(bytes32 _bytes32)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint8 i = 0;\\r\\n        while (i < 32 && _bytes32[i] != 0) {\\r\\n            i++;\\r\\n        }\\r\\n        bytes memory bytesArray = new bytes(i);\\r\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\r\\n            bytesArray[i] = _bytes32[i];\\r\\n        }\\r\\n        return string(bytesArray);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd991f35fcf629eebbf0faba6be8081d9d610263ead5b33b128105abab7fa57a8\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IMessageRecipient {\\r\\n    /**\\r\\n     * @notice Handle an interchain message\\r\\n     * @param _origin Domain ID of the chain from which the message came\\r\\n     * @param _sender Address of the message sender on the origin chain as bytes32\\r\\n     * @param _body Raw bytes content of message body\\r\\n     */\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb973c9a025339a6ee49248143ae8ab0801340675ac19f635df5130e56d8d1250\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405273cc737a94fecaec165abcf12ded095bb13f03768560805234801561002857600080fd5b506080516127d761004b6000396000818161018c01526101b901526127d76000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639201de5511620000625780639201de55146200011a57806397eb01131462000140578063c1c253a9146200016f578063d5438eae146200018657600080fd5b80632b951aa3146200008c57806356d5d47514620000d55780637d45933b14620000ee575b600080fd5b620000b86200009d36600462000530565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ec620000e63660046200059a565b620001ae565b005b620000b8620000ff36600462000530565b6001602052600090815260409020546001600160a01b031681565b620001316200012b36600462000604565b620002b2565b604051620000cc919062000651565b620000b86200015136600462000530565b6001600160a01b039081166000908152602081905260409020541690565b620000ec6200018036600462000686565b62000403565b620000b87f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620001e457600080fd5b6040517f0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef9060009081906200021c6020820162000505565b601f1982820381018352601f90910116604081905262000244919087908790602001620006df565b6040516020818303038152906040529050828151602083016000f59150813b6200026d57600080fd5b6040516001600160a01b03831681527f1b71783b8dedd09b09a23e4631acfd5d04520f7e3c3c9ff1a7fa55aa32834ed29060200160405180910390a150505050505050565b606060005b60208160ff16108015620002ef5750828160ff1660208110620002de57620002de62000709565b1a60f81b6001600160f81b03191615155b156200030a578062000301816200071f565b915050620002b7565b60008160ff1667ffffffffffffffff8111156200032b576200032b6200074d565b6040519080825280601f01601f19166020018201604052801562000356576020820181803683370190505b509050600091505b60208260ff16108015620003965750838260ff166020811062000385576200038562000709565b1a60f81b6001600160f81b03191615155b15620003fc57838260ff1660208110620003b457620003b462000709565b1a60f81b818360ff1681518110620003d057620003d062000709565b60200101906001600160f81b031916908160001a90535081620003f3816200071f565b9250506200035e565b9392505050565b6001600160a01b038381166000908152600160205260409020541633146200045d5760405162461bcd60e51b8152602060048201526009602482015268139bdd081bdddb995960ba1b604482015260640160405180910390fd5b60405163e0df5b6f60e01b81526001600160a01b0384169063e0df5b6f906200048d90859085906004016200078c565b600060405180830381600087803b158015620004a857600080fd5b505af1158015620004bd573d6000803e3d6000fd5b505050507f4c76bac06cb8c6c3a184c7ca049a43e32e126ecccc406b612f103653d9cb071783338484604051620004f89493929190620007aa565b60405180910390a1505050565b611fbe80620007e483390190565b80356001600160a01b03811681146200052b57600080fd5b919050565b6000602082840312156200054357600080fd5b620003fc8262000513565b60008083601f8401126200056157600080fd5b50813567ffffffffffffffff8111156200057a57600080fd5b6020830191508360208285010111156200059357600080fd5b9250929050565b60008060008060608587031215620005b157600080fd5b843563ffffffff81168114620005c657600080fd5b935060208501359250604085013567ffffffffffffffff811115620005ea57600080fd5b620005f8878288016200054e565b95989497509550505050565b6000602082840312156200061757600080fd5b5035919050565b60005b838110156200063b57818101518382015260200162000621565b838111156200064b576000848401525b50505050565b6020815260008251806020840152620006728160408501602087016200061e565b601f01601f19169190910160400192915050565b6000806000604084860312156200069c57600080fd5b620006a78462000513565b9250602084013567ffffffffffffffff811115620006c457600080fd5b620006d2868287016200054e565b9497909650939450505050565b60008451620006f38184602089016200061e565b8201838582376000930192835250909392505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81036200074457634e487b7160e01b600052601160045260246000fd5b60010192915050565b634e487b7160e01b600052604160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000620007a260208301848662000763565b949350505050565b6001600160a01b03858116825284166020820152606060408201819052600090620007d9908301848662000763565b969550505050505056fe60a06040523480156200001157600080fd5b5060405162001fbe38038062001fbe8339810160408190526200003491620002b2565b8551869086906200004d90600090602085019062000122565b5080516200006390600190602084019062000122565b505050620000806200007a620000cc60201b60201c565b620000d0565b83516200009590600990602087019062000122565b50600a919091556001600160a01b03908116608052600c80546001600160a01b0319169290911691909117905550620003ad915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001309062000371565b90600052602060002090601f0160209004810192826200015457600085556200019f565b82601f106200016f57805160ff19168380011785556200019f565b828001600101855582156200019f579182015b828111156200019f57825182559160200191906001019062000182565b50620001ad929150620001b1565b5090565b5b80821115620001ad5760008155600101620001b2565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f057600080fd5b81516001600160401b03808211156200020d576200020d620001c8565b604051601f8301601f19908116603f01168101908282118183101715620002385762000238620001c8565b816040528381526020925086838588010111156200025557600080fd5b600091505b838210156200027957858201830151818301840152908201906200025a565b838211156200028b5760008385830101525b9695505050505050565b80516001600160a01b0381168114620002ad57600080fd5b919050565b60008060008060008060c08789031215620002cc57600080fd5b86516001600160401b0380821115620002e457600080fd5b620002f28a838b01620001de565b975060208901519150808211156200030957600080fd5b620003178a838b01620001de565b965060408901519150808211156200032e57600080fd5b506200033d89828a01620001de565b9450506200034e6060880162000295565b9250608087015191506200036560a0880162000295565b90509295509295509295565b600181811c908216806200038657607f821691505b602082108103620003a757634e487b7160e01b600052602260045260246000fd5b50919050565b608051611bee620003d0600039600081816102b4015261064b0152611bee6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116a5565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061171a565b61019761019236600461172d565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461175b565b610443565b005b6101c26101d2366004611787565b61055d565b6101c26101e5366004611787565b610597565b6101776105b2565b6101c26102003660046117c8565b610640565b61019761021336600461172d565b61071c565b600c54610197906001600160a01b031681565b61023e61023936600461185a565b61077c565b604051908152602001610166565b6101c2610802565b6007546001600160a01b0316610197565b610177610816565b6101c261027b366004611877565b610825565b61023e600a5481565b6101c2610297366004611941565b610834565b6101776102aa36600461172d565b6108b2565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119c1565b6108bd565b61015a6102f7366004611a0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461185a565b6108d8565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a38565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610951565b506000908152600460205260409020546001600160a01b031690565b600061044e8261071c565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b61055883836109b0565b505050565b60405162461bcd60e51b815260206004820152600f60248201526e21b0b73737ba103a3930b739b332b960891b60448201526064016104b7565b61055883838360405180602001604052806000815250610834565b600980546105bf90611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546105eb90611a38565b80156106385780601f1061060d57610100808354040283529160200191610638565b820191906000526020600020905b81548152906001019060200180831161061b57829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461067557600080fd5b60006106838284018461185a565b6001600160a01b0381166000908152600b6020526040812054919250036106b2576106ad81610a1e565b610715565b600a546001600160a01b0382166000908152600b60205260409020541061070c5760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61071581610b8a565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107e65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b61080a610c0c565b6108146000610c66565b565b60606001805461039990611a38565b610830338383610cb8565b5050565b61083e3383610d86565b6108a05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016104b7565b6108ac84848484610e05565b50505050565b606061038482610e38565b6108c5610c0c565b80516108309060099060208401906115f6565b6108e0610c0c565b6001600160a01b0381166109455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b61094e81610c66565b50565b6000818152600260205260409020546001600160a01b031661094e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109e58261071c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0381166000908152600b602052604090205415610a775760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610a8260085490565b9050610a92600880546001019055565b610a9c8282610f40565b610b308160098054610aad90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad990611a38565b8015610b265780601f10610afb57610100808354040283529160200191610b26565b820191906000526020600020905b815481529060010190602001808311610b0957829003601f168201915b5050505050610f5a565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610bb3908490611a72565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b031633146108145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610d195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080610d928361071c565b9050806001600160a01b0316846001600160a01b03161480610dd957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610dfd5750836001600160a01b0316610df28461041c565b6001600160a01b0316145b949350505050565b610e10848484610ff4565b610e1c84848484611158565b6108ac5760405162461bcd60e51b81526004016104b790611a98565b6060610e4382610951565b60008281526006602052604081208054610e5c90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8890611a38565b8015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b505050505090506000610ef360408051602081019091526000815290565b90508051600003610f05575092915050565b815115610f37578082604051602001610f1f929190611aea565b60405160208183030381529060405292505050919050565b610dfd84611259565b6108308282604051806020016040528060008152506112cd565b6000828152600260205260409020546001600160a01b0316610fd55760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b60008281526006602090815260409091208251610558928401906115f6565b826001600160a01b03166110078261071c565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016104b790611b19565b6001600160a01b03821661108f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b826001600160a01b03166110a28261071c565b6001600160a01b0316146110c85760405162461bcd60e51b81526004016104b790611b19565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b1561124e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061119c903390899088908890600401611b5e565b6020604051808303816000875af19250505080156111d7575060408051601f3d908101601f191682019092526111d491810190611b9b565b60015b611234573d808015611205576040519150601f19603f3d011682016040523d82523d6000602084013e61120a565b606091505b50805160000361122c5760405162461bcd60e51b81526004016104b790611a98565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610dfd565b506001949350505050565b606061126482610951565b600061127b60408051602081019091526000815290565b9050600081511161129b57604051806020016040528060008152506112c6565b806112a584611300565b6040516020016112b6929190611aea565b6040516020818303038152906040525b9392505050565b6112d78383611393565b6112e46000848484611158565b6105585760405162461bcd60e51b81526004016104b790611a98565b6060600061130d8361151e565b600101905060008167ffffffffffffffff81111561132d5761132d6118b5565b6040519080825280601f01601f191660200182016040528015611357576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136157509392505050565b6001600160a01b0382166113e95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b03161561144e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114b35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061155d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611589576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115a757662386f26fc10000830492506010015b6305f5e10083106115bf576305f5e100830492506008015b61271083106115d357612710830492506004015b606483106115e5576064830492506002015b600a83106103845760010192915050565b82805461160290611a38565b90600052602060002090601f016020900481019282611624576000855561166a565b82601f1061163d57805160ff191683800117855561166a565b8280016001018555821561166a579182015b8281111561166a57825182559160200191906001019061164f565b5061167692915061167a565b5090565b5b80821115611676576000815560010161167b565b6001600160e01b03198116811461094e57600080fd5b6000602082840312156116b757600080fd5b81356112c68161168f565b60005b838110156116dd5781810151838201526020016116c5565b838111156108ac5750506000910152565b600081518084526117068160208601602086016116c2565b601f01601f19169290920160200192915050565b6020815260006112c660208301846116ee565b60006020828403121561173f57600080fd5b5035919050565b6001600160a01b038116811461094e57600080fd5b6000806040838503121561176e57600080fd5b823561177981611746565b946020939093013593505050565b60008060006060848603121561179c57600080fd5b83356117a781611746565b925060208401356117b781611746565b929592945050506040919091013590565b600080600080606085870312156117de57600080fd5b843563ffffffff811681146117f257600080fd5b935060208501359250604085013567ffffffffffffffff8082111561181657600080fd5b818701915087601f83011261182a57600080fd5b81358181111561183957600080fd5b88602082850101111561184b57600080fd5b95989497505060200194505050565b60006020828403121561186c57600080fd5b81356112c681611746565b6000806040838503121561188a57600080fd5b823561189581611746565b9150602083013580151581146118aa57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118e6576118e66118b5565b604051601f8501601f19908116603f0116810190828211818310171561190e5761190e6118b5565b8160405280935085815286868601111561192757600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561195757600080fd5b843561196281611746565b9350602085013561197281611746565b925060408501359150606085013567ffffffffffffffff81111561199557600080fd5b8501601f810187136119a657600080fd5b6119b5878235602084016118cb565b91505092959194509250565b6000602082840312156119d357600080fd5b813567ffffffffffffffff8111156119ea57600080fd5b8201601f810184136119fb57600080fd5b610dfd848235602084016118cb565b60008060408385031215611a1d57600080fd5b8235611a2881611746565b915060208301356118aa81611746565b600181811c90821680611a4c57607f821691505b602082108103611a6c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611a9357634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611afc8184602088016116c2565b835190830190611b108183602088016116c2565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b91908301846116ee565b9695505050505050565b600060208284031215611bad57600080fd5b81516112c68161168f56fea264697066735822122026ffb14a05535fd4ae0cb98c25e1d04bc0e4d6788a68bfdfb98b0b9c4342a49964736f6c634300080e0033a2646970667358221220216fe85c4df00950e482d8fc25b319191261486bc468cd4445da568bf9ffc9aa64736f6c634300080e0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639201de5511620000625780639201de55146200011a57806397eb01131462000140578063c1c253a9146200016f578063d5438eae146200018657600080fd5b80632b951aa3146200008c57806356d5d47514620000d55780637d45933b14620000ee575b600080fd5b620000b86200009d36600462000530565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ec620000e63660046200059a565b620001ae565b005b620000b8620000ff36600462000530565b6001602052600090815260409020546001600160a01b031681565b620001316200012b36600462000604565b620002b2565b604051620000cc919062000651565b620000b86200015136600462000530565b6001600160a01b039081166000908152602081905260409020541690565b620000ec6200018036600462000686565b62000403565b620000b87f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620001e457600080fd5b6040517f0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef9060009081906200021c6020820162000505565b601f1982820381018352601f90910116604081905262000244919087908790602001620006df565b6040516020818303038152906040529050828151602083016000f59150813b6200026d57600080fd5b6040516001600160a01b03831681527f1b71783b8dedd09b09a23e4631acfd5d04520f7e3c3c9ff1a7fa55aa32834ed29060200160405180910390a150505050505050565b606060005b60208160ff16108015620002ef5750828160ff1660208110620002de57620002de62000709565b1a60f81b6001600160f81b03191615155b156200030a578062000301816200071f565b915050620002b7565b60008160ff1667ffffffffffffffff8111156200032b576200032b6200074d565b6040519080825280601f01601f19166020018201604052801562000356576020820181803683370190505b509050600091505b60208260ff16108015620003965750838260ff166020811062000385576200038562000709565b1a60f81b6001600160f81b03191615155b15620003fc57838260ff1660208110620003b457620003b462000709565b1a60f81b818360ff1681518110620003d057620003d062000709565b60200101906001600160f81b031916908160001a90535081620003f3816200071f565b9250506200035e565b9392505050565b6001600160a01b038381166000908152600160205260409020541633146200045d5760405162461bcd60e51b8152602060048201526009602482015268139bdd081bdddb995960ba1b604482015260640160405180910390fd5b60405163e0df5b6f60e01b81526001600160a01b0384169063e0df5b6f906200048d90859085906004016200078c565b600060405180830381600087803b158015620004a857600080fd5b505af1158015620004bd573d6000803e3d6000fd5b505050507f4c76bac06cb8c6c3a184c7ca049a43e32e126ecccc406b612f103653d9cb071783338484604051620004f89493929190620007aa565b60405180910390a1505050565b611fbe80620007e483390190565b80356001600160a01b03811681146200052b57600080fd5b919050565b6000602082840312156200054357600080fd5b620003fc8262000513565b60008083601f8401126200056157600080fd5b50813567ffffffffffffffff8111156200057a57600080fd5b6020830191508360208285010111156200059357600080fd5b9250929050565b60008060008060608587031215620005b157600080fd5b843563ffffffff81168114620005c657600080fd5b935060208501359250604085013567ffffffffffffffff811115620005ea57600080fd5b620005f8878288016200054e565b95989497509550505050565b6000602082840312156200061757600080fd5b5035919050565b60005b838110156200063b57818101518382015260200162000621565b838111156200064b576000848401525b50505050565b6020815260008251806020840152620006728160408501602087016200061e565b601f01601f19169190910160400192915050565b6000806000604084860312156200069c57600080fd5b620006a78462000513565b9250602084013567ffffffffffffffff811115620006c457600080fd5b620006d2868287016200054e565b9497909650939450505050565b60008451620006f38184602089016200061e565b8201838582376000930192835250909392505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff81036200074457634e487b7160e01b600052601160045260246000fd5b60010192915050565b634e487b7160e01b600052604160045260246000fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000620007a260208301848662000763565b949350505050565b6001600160a01b03858116825284166020820152606060408201819052600090620007d9908301848662000763565b969550505050505056fe60a06040523480156200001157600080fd5b5060405162001fbe38038062001fbe8339810160408190526200003491620002b2565b8551869086906200004d90600090602085019062000122565b5080516200006390600190602084019062000122565b505050620000806200007a620000cc60201b60201c565b620000d0565b83516200009590600990602087019062000122565b50600a919091556001600160a01b03908116608052600c80546001600160a01b0319169290911691909117905550620003ad915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001309062000371565b90600052602060002090601f0160209004810192826200015457600085556200019f565b82601f106200016f57805160ff19168380011785556200019f565b828001600101855582156200019f579182015b828111156200019f57825182559160200191906001019062000182565b50620001ad929150620001b1565b5090565b5b80821115620001ad5760008155600101620001b2565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f057600080fd5b81516001600160401b03808211156200020d576200020d620001c8565b604051601f8301601f19908116603f01168101908282118183101715620002385762000238620001c8565b816040528381526020925086838588010111156200025557600080fd5b600091505b838210156200027957858201830151818301840152908201906200025a565b838211156200028b5760008385830101525b9695505050505050565b80516001600160a01b0381168114620002ad57600080fd5b919050565b60008060008060008060c08789031215620002cc57600080fd5b86516001600160401b0380821115620002e457600080fd5b620002f28a838b01620001de565b975060208901519150808211156200030957600080fd5b620003178a838b01620001de565b965060408901519150808211156200032e57600080fd5b506200033d89828a01620001de565b9450506200034e6060880162000295565b9250608087015191506200036560a0880162000295565b90509295509295509295565b600181811c908216806200038657607f821691505b602082108103620003a757634e487b7160e01b600052602260045260246000fd5b50919050565b608051611bee620003d0600039600081816102b4015261064b0152611bee6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116a5565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061171a565b61019761019236600461172d565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461175b565b610443565b005b6101c26101d2366004611787565b61055d565b6101c26101e5366004611787565b610597565b6101776105b2565b6101c26102003660046117c8565b610640565b61019761021336600461172d565b61071c565b600c54610197906001600160a01b031681565b61023e61023936600461185a565b61077c565b604051908152602001610166565b6101c2610802565b6007546001600160a01b0316610197565b610177610816565b6101c261027b366004611877565b610825565b61023e600a5481565b6101c2610297366004611941565b610834565b6101776102aa36600461172d565b6108b2565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119c1565b6108bd565b61015a6102f7366004611a0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461185a565b6108d8565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a38565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610951565b506000908152600460205260409020546001600160a01b031690565b600061044e8261071c565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b61055883836109b0565b505050565b60405162461bcd60e51b815260206004820152600f60248201526e21b0b73737ba103a3930b739b332b960891b60448201526064016104b7565b61055883838360405180602001604052806000815250610834565b600980546105bf90611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546105eb90611a38565b80156106385780601f1061060d57610100808354040283529160200191610638565b820191906000526020600020905b81548152906001019060200180831161061b57829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461067557600080fd5b60006106838284018461185a565b6001600160a01b0381166000908152600b6020526040812054919250036106b2576106ad81610a1e565b610715565b600a546001600160a01b0382166000908152600b60205260409020541061070c5760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61071581610b8a565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107e65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b61080a610c0c565b6108146000610c66565b565b60606001805461039990611a38565b610830338383610cb8565b5050565b61083e3383610d86565b6108a05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016104b7565b6108ac84848484610e05565b50505050565b606061038482610e38565b6108c5610c0c565b80516108309060099060208401906115f6565b6108e0610c0c565b6001600160a01b0381166109455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b61094e81610c66565b50565b6000818152600260205260409020546001600160a01b031661094e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109e58261071c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0381166000908152600b602052604090205415610a775760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610a8260085490565b9050610a92600880546001019055565b610a9c8282610f40565b610b308160098054610aad90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad990611a38565b8015610b265780601f10610afb57610100808354040283529160200191610b26565b820191906000526020600020905b815481529060010190602001808311610b0957829003601f168201915b5050505050610f5a565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610bb3908490611a72565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b031633146108145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610d195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080610d928361071c565b9050806001600160a01b0316846001600160a01b03161480610dd957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610dfd5750836001600160a01b0316610df28461041c565b6001600160a01b0316145b949350505050565b610e10848484610ff4565b610e1c84848484611158565b6108ac5760405162461bcd60e51b81526004016104b790611a98565b6060610e4382610951565b60008281526006602052604081208054610e5c90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8890611a38565b8015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b505050505090506000610ef360408051602081019091526000815290565b90508051600003610f05575092915050565b815115610f37578082604051602001610f1f929190611aea565b60405160208183030381529060405292505050919050565b610dfd84611259565b6108308282604051806020016040528060008152506112cd565b6000828152600260205260409020546001600160a01b0316610fd55760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b60008281526006602090815260409091208251610558928401906115f6565b826001600160a01b03166110078261071c565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016104b790611b19565b6001600160a01b03821661108f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b826001600160a01b03166110a28261071c565b6001600160a01b0316146110c85760405162461bcd60e51b81526004016104b790611b19565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b1561124e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061119c903390899088908890600401611b5e565b6020604051808303816000875af19250505080156111d7575060408051601f3d908101601f191682019092526111d491810190611b9b565b60015b611234573d808015611205576040519150601f19603f3d011682016040523d82523d6000602084013e61120a565b606091505b50805160000361122c5760405162461bcd60e51b81526004016104b790611a98565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610dfd565b506001949350505050565b606061126482610951565b600061127b60408051602081019091526000815290565b9050600081511161129b57604051806020016040528060008152506112c6565b806112a584611300565b6040516020016112b6929190611aea565b6040516020818303038152906040525b9392505050565b6112d78383611393565b6112e46000848484611158565b6105585760405162461bcd60e51b81526004016104b790611a98565b6060600061130d8361151e565b600101905060008167ffffffffffffffff81111561132d5761132d6118b5565b6040519080825280601f01601f191660200182016040528015611357576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136157509392505050565b6001600160a01b0382166113e95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b03161561144e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114b35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061155d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611589576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115a757662386f26fc10000830492506010015b6305f5e10083106115bf576305f5e100830492506008015b61271083106115d357612710830492506004015b606483106115e5576064830492506002015b600a83106103845760010192915050565b82805461160290611a38565b90600052602060002090601f016020900481019282611624576000855561166a565b82601f1061163d57805160ff191683800117855561166a565b8280016001018555821561166a579182015b8281111561166a57825182559160200191906001019061164f565b5061167692915061167a565b5090565b5b80821115611676576000815560010161167b565b6001600160e01b03198116811461094e57600080fd5b6000602082840312156116b757600080fd5b81356112c68161168f565b60005b838110156116dd5781810151838201526020016116c5565b838111156108ac5750506000910152565b600081518084526117068160208601602086016116c2565b601f01601f19169290920160200192915050565b6020815260006112c660208301846116ee565b60006020828403121561173f57600080fd5b5035919050565b6001600160a01b038116811461094e57600080fd5b6000806040838503121561176e57600080fd5b823561177981611746565b946020939093013593505050565b60008060006060848603121561179c57600080fd5b83356117a781611746565b925060208401356117b781611746565b929592945050506040919091013590565b600080600080606085870312156117de57600080fd5b843563ffffffff811681146117f257600080fd5b935060208501359250604085013567ffffffffffffffff8082111561181657600080fd5b818701915087601f83011261182a57600080fd5b81358181111561183957600080fd5b88602082850101111561184b57600080fd5b95989497505060200194505050565b60006020828403121561186c57600080fd5b81356112c681611746565b6000806040838503121561188a57600080fd5b823561189581611746565b9150602083013580151581146118aa57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118e6576118e66118b5565b604051601f8501601f19908116603f0116810190828211818310171561190e5761190e6118b5565b8160405280935085815286868601111561192757600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561195757600080fd5b843561196281611746565b9350602085013561197281611746565b925060408501359150606085013567ffffffffffffffff81111561199557600080fd5b8501601f810187136119a657600080fd5b6119b5878235602084016118cb565b91505092959194509250565b6000602082840312156119d357600080fd5b813567ffffffffffffffff8111156119ea57600080fd5b8201601f810184136119fb57600080fd5b610dfd848235602084016118cb565b60008060408385031215611a1d57600080fd5b8235611a2881611746565b915060208301356118aa81611746565b600181811c90821680611a4c57607f821691505b602082108103611a6c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611a9357634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611afc8184602088016116c2565b835190830190611b108183602088016116c2565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b91908301846116ee565b9695505050505050565b600060208284031215611bad57600080fd5b81516112c68161168f56fea264697066735822122026ffb14a05535fd4ae0cb98c25e1d04bc0e4d6788a68bfdfb98b0b9c4342a49964736f6c634300080e0033a2646970667358221220216fe85c4df00950e482d8fc25b319191261486bc468cd4445da568bf9ffc9aa64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "handle(uint32,bytes32,bytes)": {
        "params": {
          "_body": "Raw bytes content of message body",
          "_origin": "Domain ID of the chain from which the message came",
          "_sender": "Address of the message sender on the origin chain as bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "handle(uint32,bytes32,bytes)": {
        "notice": "Handle an interchain message"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3094,
        "contract": "contracts/Receiver.sol:Receiver",
        "label": "latestPromotionDeployment",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3098,
        "contract": "contracts/Receiver.sol:Receiver",
        "label": "deploymentCreator",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}