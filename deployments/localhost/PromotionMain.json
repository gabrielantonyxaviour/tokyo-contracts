{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "promotionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "promotionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimsCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimedAt",
          "type": "uint256"
        }
      ],
      "name": "ClaimedPromotion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "promotionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GasTankFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "promotionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GasTankRefunded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        }
      ],
      "name": "NewChainAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "promotionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "promotionAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimsPerPerson",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "badgeURI",
          "type": "string"
        }
      ],
      "name": "PromotionCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "destinationReceiver",
          "type": "address"
        }
      ],
      "name": "addChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chains",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "destinationReceiverAddress",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isExists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_promotionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasAmount",
          "type": "uint256"
        }
      ],
      "name": "claimPromotion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "promotionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "claimsCount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "claimsPerPerson",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "badgeURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasAmount",
          "type": "uint256"
        }
      ],
      "name": "createPromotion",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_promotionId",
          "type": "bytes32"
        }
      ],
      "name": "fillGas",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "gasTank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gasAmount",
          "type": "uint256"
        }
      ],
      "name": "getQuotedPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "igp",
      "outputs": [
        {
          "internalType": "contract IInterchainGasPaymaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "iqsRouter",
      "outputs": [
        {
          "internalType": "contract IInterchainQueryRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "promotions",
      "outputs": [
        {
          "internalType": "address",
          "name": "promotionAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimsPerPerson",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_promotionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "refundGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3987dcabe7b173e84bd0842bada0e6ae575692b3452c7e607bd70bf61cf8b3f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3567354",
    "logsBloom": "0x
    "blockHash": "0x0855a38726d2ff3b6b082c12ba882fe2d1d646c8c6467a7961905159e45ea624",
    "transactionHash": "0xe3987dcabe7b173e84bd0842bada0e6ae575692b3452c7e607bd70bf61cf8b3f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe3987dcabe7b173e84bd0842bada0e6ae575692b3452c7e607bd70bf61cf8b3f",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0855a38726d2ff3b6b082c12ba882fe2d1d646c8c6467a7961905159e45ea624"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3567354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "62a00d6394f671ea30bcf5500e59f2f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAt\",\"type\":\"uint256\"}],\"name\":\"ClaimedPromotion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasTankFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasTankRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"name\":\"NewChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsPerPerson\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"badgeURI\",\"type\":\"string\"}],\"name\":\"PromotionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationReceiver\",\"type\":\"address\"}],\"name\":\"addChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationReceiverAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_promotionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"claimPromotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimsCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"claimsPerPerson\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"badgeURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"createPromotion\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_promotionId\",\"type\":\"bytes32\"}],\"name\":\"fillGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gasTank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"}],\"name\":\"getQuotedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"igp\",\"outputs\":[{\"internalType\":\"contract IInterchainGasPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iqsRouter\",\"outputs\":[{\"internalType\":\"contract IInterchainQueryRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"promotions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimsPerPerson\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_promotionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"refundGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PromotionMain.sol\":\"PromotionMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721Promotion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/IMessageRecipient.sol\\\";\\r\\n\\r\\ncontract ERC721Promotion is\\r\\n    ERC721,\\r\\n    ERC721URIStorage,\\r\\n    Ownable,\\r\\n    IMessageRecipient\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public badgeTokenURI;\\r\\n    uint256 public amountOfClaimsPerPerson;\\r\\n    mapping(address => uint) claimerToClaimsCount;\\r\\n    address public immutable mailbox;\\r\\n    address public promoter;\\r\\n\\r\\n    event ClaimedPromotion(address claimer, uint claimCount);\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory _tokenURI,\\r\\n        address _promoterAddress,\\r\\n        uint _amountOfClaimsPerPerson,\\r\\n        address _mailboxAddress\\r\\n    ) ERC721(name, symbol) {\\r\\n        badgeTokenURI = _tokenURI;\\r\\n        amountOfClaimsPerPerson = _amountOfClaimsPerPerson;\\r\\n        mailbox = _mailboxAddress;\\r\\n        promoter = _promoterAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyMailbox() {\\r\\n        require(msg.sender == mailbox);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external onlyMailbox {\\r\\n        address claimer = abi.decode(_body, (address));\\r\\n        if (claimerToClaimsCount[claimer] == 0) {\\r\\n            safeMint(claimer);\\r\\n        } else {\\r\\n            require(\\r\\n                claimerToClaimsCount[claimer] < amountOfClaimsPerPerson,\\r\\n                \\\"No more claims\\\"\\r\\n            );\\r\\n            addClaim(claimer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) internal {\\r\\n        require(claimerToClaimsCount[to] == 0, \\\"Already owns NFT\\\");\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, badgeTokenURI);\\r\\n        claimerToClaimsCount[to] = 1;\\r\\n        emit ClaimedPromotion(to, 1);\\r\\n    }\\r\\n\\r\\n    function addClaim(address to) internal {\\r\\n        claimerToClaimsCount[to] += 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, claimerToClaimsCount[to]);\\r\\n    }\\r\\n\\r\\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\\r\\n        badgeTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n    // Soulbound Token\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public pure override {\\r\\n        revert(\\\"Cannot transfer\\\");\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        pure\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        revert(\\\"Disabled\\\");\\r\\n        // super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x88fa983d5ded5bf2fd681ea59094520bc1b932b6e2f0d55bd53e4c28b690360f\",\"license\":\"MIT\"},\"contracts/PromotionMain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IInterchainQueryRouter.sol\\\";\\r\\nimport \\\"./interfaces/IMailbox.sol\\\";\\r\\nimport \\\"./interfaces/IInterchainGasPaymaster.sol\\\";\\r\\nimport \\\"./interfaces/IReceiver.sol\\\";\\r\\nimport \\\"./ERC721Promotion.sol\\\";\\r\\n\\r\\ncontract PromotionMain is Ownable, ReentrancyGuard {\\r\\n    using ECDSA for bytes32;\\r\\n    struct Receiver {\\r\\n        bytes32 destinationReceiverAddress;\\r\\n        bool isExists;\\r\\n    }\\r\\n\\r\\n    struct Promotion {\\r\\n        address promotionAddress;\\r\\n        uint32 destinationDomain;\\r\\n        address creator;\\r\\n        uint createdAt;\\r\\n        uint claimsPerPerson;\\r\\n        bool isExists;\\r\\n    }\\r\\n\\r\\n    struct Claim {\\r\\n        uint32 destinationDomain;\\r\\n        address promotionAddress;\\r\\n        uint claimsCount;\\r\\n        bool isExists;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => Promotion) public promotions; // Promotion Id => Promotion\\r\\n    mapping(bytes32 => mapping(address => Claim)) public claims;\\r\\n\\r\\n    mapping(bytes32 => uint256) public gasTank;\\r\\n    mapping(uint32 => Receiver) public chains;\\r\\n\\r\\n    IMailbox public constant mailbox =\\r\\n        IMailbox(0xCC737a94FecaeC165AbCf12dED095BB13F037685);\\r\\n    IInterchainGasPaymaster public constant igp =\\r\\n        IInterchainGasPaymaster(0xF90cB82a76492614D07B82a7658917f3aC811Ac1);\\r\\n    IInterchainQueryRouter public constant iqsRouter =\\r\\n        IInterchainQueryRouter(0xF782C6C4A02f2c71BB8a1Db0166FAB40ea956818);\\r\\n\\r\\n    event NewChainAdded(uint32 destinationDomain);\\r\\n    event GasTankFilled(bytes32 promotionId, uint256 amount);\\r\\n    event GasTankRefunded(bytes32 promotionId, uint256 amount);\\r\\n    event PromotionCreated(\\r\\n        bytes32 promotionId,\\r\\n        address promotionAddress,\\r\\n        uint32 destinationDomain,\\r\\n        address creator,\\r\\n        uint createdAt,\\r\\n        uint claimsPerPerson,\\r\\n        string badgeURI\\r\\n    );\\r\\n    event ClaimedPromotion(\\r\\n        bytes32 promotionId,\\r\\n        address promotionAddress,\\r\\n        address claimer,\\r\\n        uint32 destinationDomain,\\r\\n        uint claimsCount,\\r\\n        uint claimedAt\\r\\n    );\\r\\n\\r\\n    function addChain(uint32 destinationDomain, address destinationReceiver)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        chains[destinationDomain] = Receiver(\\r\\n            addressToBytes32(destinationReceiver),\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getAddress(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint32 destinationDomain,\\r\\n        uint claimsPerPerson,\\r\\n        string memory badgeURI,\\r\\n        uint _salt\\r\\n    ) internal view returns (address) {\\r\\n        bytes memory bytecode = abi.encodePacked(\\r\\n            type(ERC721Promotion).creationCode,\\r\\n            abi.encode(\\r\\n                name,\\r\\n                symbol,\\r\\n                badgeURI,\\r\\n                msg.sender,\\r\\n                claimsPerPerson,\\r\\n                address(mailbox)\\r\\n            )\\r\\n        );\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                bytes1(0xff),\\r\\n                chains[destinationDomain].destinationReceiverAddress,\\r\\n                bytes32(_salt),\\r\\n                keccak256(bytecode)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return address(uint160(uint(hash)));\\r\\n    }\\r\\n\\r\\n    function createPromotion(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint32 destinationDomain,\\r\\n        uint claimsPerPerson,\\r\\n        string memory badgeURI,\\r\\n        uint _salt,\\r\\n        uint gasAmount\\r\\n    ) public payable {\\r\\n        require(chains[destinationDomain].isExists, \\\"Invalid Destination\\\");\\r\\n        // 1. Create PromotionNFT contract in destination chain and Fill Gas\\r\\n        bytes memory message = abi.encode(\\r\\n            name,\\r\\n            symbol,\\r\\n            badgeURI,\\r\\n            msg.sender,\\r\\n            claimsPerPerson,\\r\\n            bytes32(_salt)\\r\\n        );\\r\\n\\r\\n        bytes32 messageId = mailbox.dispatch(\\r\\n            destinationDomain,\\r\\n            chains[destinationDomain].destinationReceiverAddress,\\r\\n            message\\r\\n        );\\r\\n        address _promotionAddress = _getAddress(\\r\\n            name,\\r\\n            symbol,\\r\\n            destinationDomain,\\r\\n            claimsPerPerson,\\r\\n            badgeURI,\\r\\n            _salt\\r\\n        );\\r\\n        bytes32 _promotionId = keccak256(\\r\\n            abi.encodePacked(\\r\\n                name,\\r\\n                symbol,\\r\\n                _promotionAddress,\\r\\n                destinationDomain,\\r\\n                claimsPerPerson,\\r\\n                badgeURI,\\r\\n                msg.sender,\\r\\n                block.timestamp\\r\\n            )\\r\\n        );\\r\\n        require(promotions[_promotionId].isExists == false, \\\"Promotion exists\\\");\\r\\n\\r\\n        // 2. Get gas amount\\r\\n        uint256 quotedPayment = getQuotedPayment(destinationDomain, gasAmount);\\r\\n        require(msg.value >= quotedPayment, \\\"Insufficient gas\\\");\\r\\n        gasTank[_promotionId] += (msg.value - quotedPayment);\\r\\n\\r\\n        // 3. Pay for Interchain Gas\\r\\n        igp.payForGas{value: quotedPayment}(\\r\\n            messageId,\\r\\n            destinationDomain,\\r\\n            gasAmount,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // 4. Update State Variables\\r\\n        promotions[_promotionId] = Promotion(\\r\\n            _promotionAddress,\\r\\n            destinationDomain,\\r\\n            msg.sender,\\r\\n            block.timestamp,\\r\\n            claimsPerPerson,\\r\\n            true\\r\\n        );\\r\\n\\r\\n        // 5. Emit events\\r\\n        if (gasTank[_promotionId] > 0) {\\r\\n            emit GasTankFilled(_promotionId, gasTank[_promotionId]);\\r\\n        }\\r\\n        emit PromotionCreated(\\r\\n            _promotionId,\\r\\n            _promotionAddress,\\r\\n            destinationDomain,\\r\\n            msg.sender,\\r\\n            block.timestamp,\\r\\n            claimsPerPerson,\\r\\n            badgeURI\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function claimPromotion(\\r\\n        bytes32 _promotionId,\\r\\n        uint32 destinationDomain,\\r\\n        bytes calldata signature,\\r\\n        address claimer,\\r\\n        uint gasAmount\\r\\n    ) public {\\r\\n        require(chains[destinationDomain].isExists, \\\"Invalid Destination\\\");\\r\\n        Promotion memory _promotion = promotions[_promotionId];\\r\\n        Claim memory _claim = claims[_promotionId][claimer];\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _promotionId,\\r\\n                destinationDomain,\\r\\n                _promotion.promotionAddress,\\r\\n                msg.sender\\r\\n            )\\r\\n        );\\r\\n        require(hash.recover(signature) == claimer, \\\"unauthorized\\\");\\r\\n        require(_promotion.isExists, \\\"Invalid Promotion\\\");\\r\\n        require(\\r\\n            !_claim.isExists || _promotion.claimsPerPerson > _claim.claimsCount,\\r\\n            \\\"No more claims\\\"\\r\\n        );\\r\\n\\r\\n        bytes memory message = abi.encode(claimer);\\r\\n        bytes32 messageId = mailbox.dispatch(\\r\\n            destinationDomain,\\r\\n            addressToBytes32(_promotion.promotionAddress),\\r\\n            message\\r\\n        );\\r\\n\\r\\n        uint256 quotedPayment = getQuotedPayment(destinationDomain, gasAmount);\\r\\n        require(gasTank[_promotionId] >= quotedPayment, \\\"Insufficient gas\\\");\\r\\n        gasTank[_promotionId] -= quotedPayment;\\r\\n        igp.payForGas{value: quotedPayment}(\\r\\n            messageId,\\r\\n            destinationDomain,\\r\\n            gasAmount,\\r\\n            _promotion.creator\\r\\n        );\\r\\n        uint _currentClaims = _claim.claimsCount;\\r\\n        claims[_promotionId][claimer] = Claim(\\r\\n            destinationDomain,\\r\\n            _promotion.promotionAddress,\\r\\n            _currentClaims + 1,\\r\\n            true\\r\\n        );\\r\\n\\r\\n        emit ClaimedPromotion(\\r\\n            _promotionId,\\r\\n            _promotion.promotionAddress,\\r\\n            msg.sender,\\r\\n            destinationDomain,\\r\\n            _currentClaims + 1,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fillGas(bytes32 _promotionId) public payable {\\r\\n        gasTank[_promotionId] += msg.value;\\r\\n        emit GasTankFilled(_promotionId, gasTank[_promotionId]);\\r\\n    }\\r\\n\\r\\n    function refundGas(bytes32 _promotionId, address _to) public nonReentrant {\\r\\n        require(msg.sender == promotions[_promotionId].creator, \\\"Unauthorized\\\");\\r\\n        require(gasTank[_promotionId] > 0, \\\"No balance\\\");\\r\\n        (bool success, bytes memory data) = payable(_to).call{\\r\\n            value: gasTank[_promotionId]\\r\\n        }(\\\"\\\");\\r\\n        if (success) {\\r\\n            uint _gasAmount = gasTank[_promotionId];\\r\\n            gasTank[_promotionId] = 0;\\r\\n            emit GasTankRefunded(_promotionId, _gasAmount);\\r\\n        } else {\\r\\n            revert(\\\"Failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // GETTERS\\r\\n    function getQuotedPayment(uint32 destinationDomain, uint gasAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 quotedPayment = igp.quoteGasPayment(\\r\\n            destinationDomain,\\r\\n            gasAmount\\r\\n        );\\r\\n        return quotedPayment;\\r\\n    }\\r\\n\\r\\n    // LIBRARY FUNCTIONS\\r\\n\\r\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\r\\n        return bytes32(uint256(uint160(_addr)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbcba537e998fbb67b301857baf0f0a1bd9fa8ca3a00e9de0d61661c54f9af382\",\"license\":\"MIT\"},\"contracts/interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/**\\r\\n * @title IInterchainGasPaymaster\\r\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\r\\n * messages to destination chains.\\r\\n */\\r\\ninterface IInterchainGasPaymaster {\\r\\n    /**\\r\\n     * @notice Emitted when a payment is made for a message's gas costs.\\r\\n     * @param messageId The ID of the message to pay for.\\r\\n     * @param gasAmount The amount of destination gas paid for.\\r\\n     * @param payment The amount of native tokens paid.\\r\\n     */\\r\\n    event GasPayment(\\r\\n        bytes32 indexed messageId,\\r\\n        uint256 gasAmount,\\r\\n        uint256 payment\\r\\n    );\\r\\n\\r\\n    function payForGas(\\r\\n        bytes32 _messageId,\\r\\n        uint32 _destinationDomain,\\r\\n        uint256 _gasAmount,\\r\\n        address _refundAddress\\r\\n    ) external payable;\\r\\n\\r\\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x69780ca2e1ee4defcb8bf53175b6832a01b7232726c103082b31eb1ac7c33227\",\"license\":\"MIT\"},\"contracts/interfaces/IInterchainQueryRouter.sol\":{\"content\":\"interface IInterchainQueryRouter {\\r\\n    /**\\r\\n     * @param _destinationDomain Domain of destination chain\\r\\n     * @param target The address of the contract to query on destination chain.\\r\\n     * @param queryData The calldata of the view call to make on the destination\\r\\n     * chain.\\r\\n     * @param callback Callback function selector on `msg.sender` and optionally\\r\\n     * abi-encoded prefix arguments.\\r\\n     * @return messageId The ID of the Hyperlane message encoding the query.\\r\\n     */\\r\\n    function query(\\r\\n        uint32 _destinationDomain,\\r\\n        address target,\\r\\n        bytes calldata queryData,\\r\\n        bytes calldata callback\\r\\n    ) external returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xd38022d2da4b2e4c77fd731126edec27e4cc4176c616cce631bdd26e27d39299\"},\"contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IMailbox {\\r\\n    function dispatch(\\r\\n        uint32 _destinationDomain,\\r\\n        bytes32 _recipientAddress,\\r\\n        bytes calldata _messageBody\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function process(bytes calldata _metadata, bytes calldata _message)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd6cb0a2e1d9a69f4f7b8ac3dc51bfebf547620d2f08ee1f9f2e627d759d6ccc2\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IMessageRecipient {\\r\\n    /**\\r\\n     * @notice Handle an interchain message\\r\\n     * @param _origin Domain ID of the chain from which the message came\\r\\n     * @param _sender Address of the message sender on the origin chain as bytes32\\r\\n     * @param _body Raw bytes content of message body\\r\\n     */\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb973c9a025339a6ee49248143ae8ab0801340675ac19f635df5130e56d8d1250\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/interfaces/IReceiver.sol\":{\"content\":\"interface IReceiver {\\r\\n    function getLatestPromotionDeployment(address claimer)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ac0a7a0339a0ec44b7a46a2aa0564773b7fcbe184a9da8787abffc8614aa04a\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613ecf806100826000396000f3fe608060405260043610620001075760003560e01c806392256c0e1162000095578063ea272e391162000060578063ea272e391462000372578063f28b2daa1462000422578063f2fde38b146200044c578063f8717e8d146200047157600080fd5b806392256c0e1462000273578063cade147d146200030c578063d5438eae1462000331578063d8b0857f146200035b57600080fd5b806360cb07d011620000d657806360cb07d014620001a7578063715018a614620001ea5780638b203dd414620002025780638da5cb5b146200025357600080fd5b806319a832ba146200010c5780633b86b52d14620001335780634262e0ad146200016b57806358b063fd1462000190575b600080fd5b3480156200011957600080fd5b50620001316200012b366004620018d3565b620004a2565b005b3480156200014057600080fd5b50620001586200015236600462001982565b62000bb6565b6040519081526020015b60405180910390f35b3480156200017857600080fd5b50620001316200018a366004620019af565b62000c46565b62000131620001a136600462001a92565b62000caa565b348015620001b457600080fd5b50620001d173f782c6c4a02f2c71bb8a1db0166fab40ea95681881565b6040516001600160a01b03909116815260200162000162565b348015620001f757600080fd5b50620001316200114e565b3480156200020f57600080fd5b506200023d6200022136600462001b54565b6005602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520162000162565b3480156200026057600080fd5b506000546001600160a01b0316620001d1565b3480156200028057600080fd5b50620002da6200029236600462001b79565b600360209081526000928352604080842090915290825290208054600182015460029092015463ffffffff8216926401000000009092046001600160a01b0316919060ff1684565b6040805163ffffffff90951685526001600160a01b039093166020850152918301521515606082015260800162000162565b3480156200031957600080fd5b50620001316200032b36600462001b79565b62001166565b3480156200033e57600080fd5b50620001d173cc737a94fecaec165abcf12ded095bb13f03768581565b620001316200036c36600462001b9f565b62001313565b3480156200037f57600080fd5b50620003dd6200039136600462001b9f565b6002602081905260009182526040909120805460018201549282015460038301546004909301546001600160a01b0380841695600160a01b90940463ffffffff16949316929060ff1686565b604080516001600160a01b03978816815263ffffffff96909616602087015293909516928401929092526060830152608082015290151560a082015260c00162000162565b3480156200042f57600080fd5b50620001d173f90cb82a76492614d07b82a7658917f3ac811ac181565b3480156200045957600080fd5b50620001316200046b36600462001bb9565b62001382565b3480156200047e57600080fd5b50620001586200049036600462001b9f565b60046020526000908152604090205481565b63ffffffff851660009081526005602052604090206001015460ff16620005065760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b60448201526064015b60405180910390fd5b6000600260008881526020019081526020016000206040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000600360008981526020019081526020016000206000856001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905060008888846000015133604051602001620006f5949392919093845260e09290921b6001600160e01b0319166020840152606090811b6bffffffffffffffffffffffff19908116602485015291901b166038820152604c0190565b604051602081830303815290604052805190602001209050846001600160a01b03166200075b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050620014019050565b6001600160a01b031614620007a25760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b6044820152606401620004fd565b8260a00151620007e95760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b210283937b6b7ba34b7b760791b6044820152606401620004fd565b8160600151158062000802575081604001518360800151115b620008415760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b6044820152606401620004fd565b604080516001600160a01b0387166020820152600091016040516020818303038152906040529050600073cc737a94fecaec165abcf12ded095bb13f0376856001600160a01b031663fa31de018b620008a488600001516001600160a01b031690565b856040518463ffffffff1660e01b8152600401620008c59392919062001c38565b6020604051808303816000875af1158015620008e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090b919062001c68565b905060006200091b8b8862000bb6565b60008d815260046020526040902054909150811115620009715760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b6044820152606401620004fd565b60008c815260046020526040812080548392906200099190849062001c98565b90915550506040868101519051630237e58360e31b81526004810184905263ffffffff8d166024820152604481018990526001600160a01b03909116606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000a0d57600080fd5b505af115801562000a22573d6000803e3d6000fd5b505050505060008560400151905060405180608001604052808d63ffffffff16815260200188600001516001600160a01b0316815260200182600162000a69919062001cb2565b815260200160011515815250600360008f815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083151502179055509050507f1d784a2e6117c9c7790cd6effb9ad66fee4286853a212a375d7a5c8c7bf175a78d8860000151338f85600162000b64919062001cb2565b604080519586526001600160a01b039485166020870152929093169184019190915263ffffffff16606083015260808201524260a082015260c00160405180910390a150505050505050505050505050565b60405163a692979360e01b815263ffffffff8316600482015260248101829052600090819073f90cb82a76492614d07b82a7658917f3ac811ac19063a692979390604401602060405180830381865afa15801562000c18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c3e919062001c68565b949350505050565b62000c5062001429565b604051806040016040528062000c6c836001600160a01b031690565b81526001602091820181905263ffffffff9490941660009081526005825260409020825181559101519201805460ff19169215159290921790915550565b63ffffffff851660009081526005602052604090206001015460ff1662000d0a5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b6044820152606401620004fd565b60405160009062000d2a9089908990879033908a90899060200162001ccd565b60408051601f1981840301815282825263ffffffff8916600090815260056020529182205463fa31de0160e01b8452909350909173cc737a94fecaec165abcf12ded095bb13f0376859163fa31de019162000d8c918b91879060040162001c38565b6020604051808303816000875af115801562000dac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd2919062001c68565b9050600062000de68a8a8a8a8a8a62001485565b905060008a8a838b8b8b334260405160200162000e0b98979695949392919062001d34565b60408051601f1981840301815291815281516020928301206000818152600290935291206004015490915060ff161562000e7b5760405162461bcd60e51b815260206004820152601060248201526f50726f6d6f74696f6e2065786973747360801b6044820152606401620004fd565b600062000e898a8762000bb6565b90508034101562000ed05760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b6044820152606401620004fd565b62000edc813462001c98565b6000838152600460205260408120805490919062000efc90849062001cb2565b9091555050604051630237e58360e31b81526004810185905263ffffffff8b1660248201526044810187905233606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000f6957600080fd5b505af115801562000f7e573d6000803e3d6000fd5b50505050506040518060c00160405280846001600160a01b031681526020018b63ffffffff168152602001336001600160a01b031681526020014281526020018a8152602001600115158152506002600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff021916908315150217905550905050600060046000848152602001908152602001600020541115620010fb57600082815260046020908152604091829020548251858152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a15b7fd4a6ee30ad1cd3b2f4f9f76e9abd1d4954e098a7aebc8af7c92439acd488907682848c33428e8e60405162001138979695949392919062001dcc565b60405180910390a1505050505050505050505050565b6200115862001429565b62001164600062001579565b565b62001170620015c9565b6000828152600260205260409020600101546001600160a01b03163314620011ca5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401620004fd565b600082815260046020526040902054620012145760405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b6044820152606401620004fd565b60008281526004602052604080822054905182916001600160a01b038516918381818185875af1925050503d80600081146200126d576040519150601f19603f3d011682016040523d82523d6000602084013e62001272565b606091505b50915091508115620012d1576000848152600460209081526040808320805493905580518781529182018390527f5aafa436e7bcce48335a89fd368e909dee8d7387d9349daaed3b167446d6841c910160405180910390a15062001303565b60405162461bcd60e51b815260206004820152600660248201526511985a5b195960d21b6044820152606401620004fd565b50506200130f60018055565b5050565b600081815260046020526040812080543492906200133390849062001cb2565b9091555050600081815260046020908152604091829020548251848152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a150565b6200138c62001429565b6001600160a01b038116620013f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620004fd565b620013fe8162001579565b50565b600080600062001412858562001624565b9150915062001421816200166d565b509392505050565b6000546001600160a01b03163314620011645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620004fd565b600080604051806020016200149a9062001893565b601f1982820381018352601f909101166040819052620014dd908a908a90889033908b9073cc737a94fecaec165abcf12ded095bb13f0376859060200162001e27565b60408051601f1981840301815290829052620014fd929160200162001e92565b60408051808303601f1901815282825263ffffffff8916600090815260056020908152928120548251848401206001600160f81b031994860194909452602185015260418401879052606184019290925292509060810160408051808303601f1901815291905280516020909101209998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036200161d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620004fd565b6002600155565b60008082516041036200165e5760208301516040840151606085015160001a6200165187828585620017ca565b9450945050505062001666565b506000905060025b9250929050565b600081600481111562001684576200168462001ec5565b036200168d5750565b6001816004811115620016a457620016a462001ec5565b03620016f35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401620004fd565b60028160048111156200170a576200170a62001ec5565b03620017595760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401620004fd565b600381600481111562001770576200177062001ec5565b03620013fe5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401620004fd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156200180357506000905060036200188a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562001858573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811662001883576000600192509250506200188a565b9150600090505b94509492505050565b611fbe8062001edc83390190565b803563ffffffff81168114620018b657600080fd5b919050565b80356001600160a01b0381168114620018b657600080fd5b60008060008060008060a08789031215620018ed57600080fd5b86359550620018ff60208801620018a1565b9450604087013567ffffffffffffffff808211156200191d57600080fd5b818901915089601f8301126200193257600080fd5b8135818111156200194257600080fd5b8a60208285010111156200195557600080fd5b6020830196508095505050506200196f60608801620018bb565b9150608087013590509295509295509295565b600080604083850312156200199657600080fd5b620019a183620018a1565b946020939093013593505050565b60008060408385031215620019c357600080fd5b620019ce83620018a1565b9150620019de60208401620018bb565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262001a0f57600080fd5b813567ffffffffffffffff8082111562001a2d5762001a2d620019e7565b604051601f8301601f19908116603f0116810190828211818310171562001a585762001a58620019e7565b8160405283815286602085880101111562001a7257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a03121562001aae57600080fd5b873567ffffffffffffffff8082111562001ac757600080fd5b62001ad58b838c01620019fd565b985060208a013591508082111562001aec57600080fd5b62001afa8b838c01620019fd565b975062001b0a60408b01620018a1565b965060608a0135955060808a013591508082111562001b2857600080fd5b5062001b378a828b01620019fd565b93505060a0880135915060c0880135905092959891949750929550565b60006020828403121562001b6757600080fd5b62001b7282620018a1565b9392505050565b6000806040838503121562001b8d57600080fd5b82359150620019de60208401620018bb565b60006020828403121562001bb257600080fd5b5035919050565b60006020828403121562001bcc57600080fd5b62001b7282620018bb565b60005b8381101562001bf457818101518382015260200162001bda565b8381111562001c04576000848401525b50505050565b6000815180845262001c2481602086016020860162001bd7565b601f01601f19169290920160200192915050565b63ffffffff8416815282602082015260606040820152600062001c5f606083018462001c0a565b95945050505050565b60006020828403121562001c7b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101562001cad5762001cad62001c82565b500390565b6000821982111562001cc85762001cc862001c82565b500190565b60c08152600062001ce260c083018962001c0a565b828103602084015262001cf6818962001c0a565b9050828103604084015262001d0c818862001c0a565b6001600160a01b039690961660608401525050608081019290925260a0909101529392505050565b6000895162001d48818460208e0162001bd7565b89519083019062001d5e818360208e0162001bd7565b8082019150506bffffffffffffffffffffffff19808a60601b16825263ffffffff60e01b8960e01b166014830152876018830152865162001da7816038850160208b0162001bd7565b60609690961b16940160388101949094525050604c820152606c019695505050505050565b8781526001600160a01b03878116602083015263ffffffff87166040830152851660608201526080810184905260a0810183905260e060c0820181905260009062001e1a9083018462001c0a565b9998505050505050505050565b60c08152600062001e3c60c083018962001c0a565b828103602084015262001e50818962001c0a565b9050828103604084015262001e66818862001c0a565b6001600160a01b03968716606085015260808401959095525050921660a0909201919091529392505050565b6000835162001ea681846020880162001bd7565b83519083019062001ebc81836020880162001bd7565b01949350505050565b634e487b7160e01b600052602160045260246000fdfe60a06040523480156200001157600080fd5b5060405162001fbe38038062001fbe8339810160408190526200003491620002b2565b8551869086906200004d90600090602085019062000122565b5080516200006390600190602084019062000122565b505050620000806200007a620000cc60201b60201c565b620000d0565b83516200009590600990602087019062000122565b50600a919091556001600160a01b03908116608052600c80546001600160a01b0319169290911691909117905550620003ad915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001309062000371565b90600052602060002090601f0160209004810192826200015457600085556200019f565b82601f106200016f57805160ff19168380011785556200019f565b828001600101855582156200019f579182015b828111156200019f57825182559160200191906001019062000182565b50620001ad929150620001b1565b5090565b5b80821115620001ad5760008155600101620001b2565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f057600080fd5b81516001600160401b03808211156200020d576200020d620001c8565b604051601f8301601f19908116603f01168101908282118183101715620002385762000238620001c8565b816040528381526020925086838588010111156200025557600080fd5b600091505b838210156200027957858201830151818301840152908201906200025a565b838211156200028b5760008385830101525b9695505050505050565b80516001600160a01b0381168114620002ad57600080fd5b919050565b60008060008060008060c08789031215620002cc57600080fd5b86516001600160401b0380821115620002e457600080fd5b620002f28a838b01620001de565b975060208901519150808211156200030957600080fd5b620003178a838b01620001de565b965060408901519150808211156200032e57600080fd5b506200033d89828a01620001de565b9450506200034e6060880162000295565b9250608087015191506200036560a0880162000295565b90509295509295509295565b600181811c908216806200038657607f821691505b602082108103620003a757634e487b7160e01b600052602260045260246000fd5b50919050565b608051611bee620003d0600039600081816102b4015261064b0152611bee6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116a5565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061171a565b61019761019236600461172d565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461175b565b610443565b005b6101c26101d2366004611787565b61055d565b6101c26101e5366004611787565b610597565b6101776105b2565b6101c26102003660046117c8565b610640565b61019761021336600461172d565b61071c565b600c54610197906001600160a01b031681565b61023e61023936600461185a565b61077c565b604051908152602001610166565b6101c2610802565b6007546001600160a01b0316610197565b610177610816565b6101c261027b366004611877565b610825565b61023e600a5481565b6101c2610297366004611941565b610834565b6101776102aa36600461172d565b6108b2565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119c1565b6108bd565b61015a6102f7366004611a0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461185a565b6108d8565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a38565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610951565b506000908152600460205260409020546001600160a01b031690565b600061044e8261071c565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b61055883836109b0565b505050565b60405162461bcd60e51b815260206004820152600f60248201526e21b0b73737ba103a3930b739b332b960891b60448201526064016104b7565b61055883838360405180602001604052806000815250610834565b600980546105bf90611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546105eb90611a38565b80156106385780601f1061060d57610100808354040283529160200191610638565b820191906000526020600020905b81548152906001019060200180831161061b57829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461067557600080fd5b60006106838284018461185a565b6001600160a01b0381166000908152600b6020526040812054919250036106b2576106ad81610a1e565b610715565b600a546001600160a01b0382166000908152600b60205260409020541061070c5760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61071581610b8a565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107e65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b61080a610c0c565b6108146000610c66565b565b60606001805461039990611a38565b610830338383610cb8565b5050565b61083e3383610d86565b6108a05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016104b7565b6108ac84848484610e05565b50505050565b606061038482610e38565b6108c5610c0c565b80516108309060099060208401906115f6565b6108e0610c0c565b6001600160a01b0381166109455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b61094e81610c66565b50565b6000818152600260205260409020546001600160a01b031661094e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109e58261071c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0381166000908152600b602052604090205415610a775760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610a8260085490565b9050610a92600880546001019055565b610a9c8282610f40565b610b308160098054610aad90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad990611a38565b8015610b265780601f10610afb57610100808354040283529160200191610b26565b820191906000526020600020905b815481529060010190602001808311610b0957829003601f168201915b5050505050610f5a565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610bb3908490611a72565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b031633146108145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610d195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080610d928361071c565b9050806001600160a01b0316846001600160a01b03161480610dd957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610dfd5750836001600160a01b0316610df28461041c565b6001600160a01b0316145b949350505050565b610e10848484610ff4565b610e1c84848484611158565b6108ac5760405162461bcd60e51b81526004016104b790611a98565b6060610e4382610951565b60008281526006602052604081208054610e5c90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8890611a38565b8015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b505050505090506000610ef360408051602081019091526000815290565b90508051600003610f05575092915050565b815115610f37578082604051602001610f1f929190611aea565b60405160208183030381529060405292505050919050565b610dfd84611259565b6108308282604051806020016040528060008152506112cd565b6000828152600260205260409020546001600160a01b0316610fd55760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b60008281526006602090815260409091208251610558928401906115f6565b826001600160a01b03166110078261071c565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016104b790611b19565b6001600160a01b03821661108f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b826001600160a01b03166110a28261071c565b6001600160a01b0316146110c85760405162461bcd60e51b81526004016104b790611b19565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b1561124e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061119c903390899088908890600401611b5e565b6020604051808303816000875af19250505080156111d7575060408051601f3d908101601f191682019092526111d491810190611b9b565b60015b611234573d808015611205576040519150601f19603f3d011682016040523d82523d6000602084013e61120a565b606091505b50805160000361122c5760405162461bcd60e51b81526004016104b790611a98565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610dfd565b506001949350505050565b606061126482610951565b600061127b60408051602081019091526000815290565b9050600081511161129b57604051806020016040528060008152506112c6565b806112a584611300565b6040516020016112b6929190611aea565b6040516020818303038152906040525b9392505050565b6112d78383611393565b6112e46000848484611158565b6105585760405162461bcd60e51b81526004016104b790611a98565b6060600061130d8361151e565b600101905060008167ffffffffffffffff81111561132d5761132d6118b5565b6040519080825280601f01601f191660200182016040528015611357576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136157509392505050565b6001600160a01b0382166113e95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b03161561144e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114b35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061155d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611589576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115a757662386f26fc10000830492506010015b6305f5e10083106115bf576305f5e100830492506008015b61271083106115d357612710830492506004015b606483106115e5576064830492506002015b600a83106103845760010192915050565b82805461160290611a38565b90600052602060002090601f016020900481019282611624576000855561166a565b82601f1061163d57805160ff191683800117855561166a565b8280016001018555821561166a579182015b8281111561166a57825182559160200191906001019061164f565b5061167692915061167a565b5090565b5b80821115611676576000815560010161167b565b6001600160e01b03198116811461094e57600080fd5b6000602082840312156116b757600080fd5b81356112c68161168f565b60005b838110156116dd5781810151838201526020016116c5565b838111156108ac5750506000910152565b600081518084526117068160208601602086016116c2565b601f01601f19169290920160200192915050565b6020815260006112c660208301846116ee565b60006020828403121561173f57600080fd5b5035919050565b6001600160a01b038116811461094e57600080fd5b6000806040838503121561176e57600080fd5b823561177981611746565b946020939093013593505050565b60008060006060848603121561179c57600080fd5b83356117a781611746565b925060208401356117b781611746565b929592945050506040919091013590565b600080600080606085870312156117de57600080fd5b843563ffffffff811681146117f257600080fd5b935060208501359250604085013567ffffffffffffffff8082111561181657600080fd5b818701915087601f83011261182a57600080fd5b81358181111561183957600080fd5b88602082850101111561184b57600080fd5b95989497505060200194505050565b60006020828403121561186c57600080fd5b81356112c681611746565b6000806040838503121561188a57600080fd5b823561189581611746565b9150602083013580151581146118aa57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118e6576118e66118b5565b604051601f8501601f19908116603f0116810190828211818310171561190e5761190e6118b5565b8160405280935085815286868601111561192757600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561195757600080fd5b843561196281611746565b9350602085013561197281611746565b925060408501359150606085013567ffffffffffffffff81111561199557600080fd5b8501601f810187136119a657600080fd5b6119b5878235602084016118cb565b91505092959194509250565b6000602082840312156119d357600080fd5b813567ffffffffffffffff8111156119ea57600080fd5b8201601f810184136119fb57600080fd5b610dfd848235602084016118cb565b60008060408385031215611a1d57600080fd5b8235611a2881611746565b915060208301356118aa81611746565b600181811c90821680611a4c57607f821691505b602082108103611a6c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611a9357634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611afc8184602088016116c2565b835190830190611b108183602088016116c2565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b91908301846116ee565b9695505050505050565b600060208284031215611bad57600080fd5b81516112c68161168f56fea264697066735822122026ffb14a05535fd4ae0cb98c25e1d04bc0e4d6788a68bfdfb98b0b9c4342a49964736f6c634300080e0033a26469706673582212200d99e11a9ec8430a651b436cae4b9d68f8df1f188ffa6a1bf84ff18616b1006064736f6c634300080e0033",
  "deployedBytecode": "0x608060405260043610620001075760003560e01c806392256c0e1162000095578063ea272e391162000060578063ea272e391462000372578063f28b2daa1462000422578063f2fde38b146200044c578063f8717e8d146200047157600080fd5b806392256c0e1462000273578063cade147d146200030c578063d5438eae1462000331578063d8b0857f146200035b57600080fd5b806360cb07d011620000d657806360cb07d014620001a7578063715018a614620001ea5780638b203dd414620002025780638da5cb5b146200025357600080fd5b806319a832ba146200010c5780633b86b52d14620001335780634262e0ad146200016b57806358b063fd1462000190575b600080fd5b3480156200011957600080fd5b50620001316200012b366004620018d3565b620004a2565b005b3480156200014057600080fd5b50620001586200015236600462001982565b62000bb6565b6040519081526020015b60405180910390f35b3480156200017857600080fd5b50620001316200018a366004620019af565b62000c46565b62000131620001a136600462001a92565b62000caa565b348015620001b457600080fd5b50620001d173f782c6c4a02f2c71bb8a1db0166fab40ea95681881565b6040516001600160a01b03909116815260200162000162565b348015620001f757600080fd5b50620001316200114e565b3480156200020f57600080fd5b506200023d6200022136600462001b54565b6005602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520162000162565b3480156200026057600080fd5b506000546001600160a01b0316620001d1565b3480156200028057600080fd5b50620002da6200029236600462001b79565b600360209081526000928352604080842090915290825290208054600182015460029092015463ffffffff8216926401000000009092046001600160a01b0316919060ff1684565b6040805163ffffffff90951685526001600160a01b039093166020850152918301521515606082015260800162000162565b3480156200031957600080fd5b50620001316200032b36600462001b79565b62001166565b3480156200033e57600080fd5b50620001d173cc737a94fecaec165abcf12ded095bb13f03768581565b620001316200036c36600462001b9f565b62001313565b3480156200037f57600080fd5b50620003dd6200039136600462001b9f565b6002602081905260009182526040909120805460018201549282015460038301546004909301546001600160a01b0380841695600160a01b90940463ffffffff16949316929060ff1686565b604080516001600160a01b03978816815263ffffffff96909616602087015293909516928401929092526060830152608082015290151560a082015260c00162000162565b3480156200042f57600080fd5b50620001d173f90cb82a76492614d07b82a7658917f3ac811ac181565b3480156200045957600080fd5b50620001316200046b36600462001bb9565b62001382565b3480156200047e57600080fd5b50620001586200049036600462001b9f565b60046020526000908152604090205481565b63ffffffff851660009081526005602052604090206001015460ff16620005065760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b60448201526064015b60405180910390fd5b6000600260008881526020019081526020016000206040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000600360008981526020019081526020016000206000856001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905060008888846000015133604051602001620006f5949392919093845260e09290921b6001600160e01b0319166020840152606090811b6bffffffffffffffffffffffff19908116602485015291901b166038820152604c0190565b604051602081830303815290604052805190602001209050846001600160a01b03166200075b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050620014019050565b6001600160a01b031614620007a25760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b6044820152606401620004fd565b8260a00151620007e95760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b210283937b6b7ba34b7b760791b6044820152606401620004fd565b8160600151158062000802575081604001518360800151115b620008415760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b6044820152606401620004fd565b604080516001600160a01b0387166020820152600091016040516020818303038152906040529050600073cc737a94fecaec165abcf12ded095bb13f0376856001600160a01b031663fa31de018b620008a488600001516001600160a01b031690565b856040518463ffffffff1660e01b8152600401620008c59392919062001c38565b6020604051808303816000875af1158015620008e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090b919062001c68565b905060006200091b8b8862000bb6565b60008d815260046020526040902054909150811115620009715760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b6044820152606401620004fd565b60008c815260046020526040812080548392906200099190849062001c98565b90915550506040868101519051630237e58360e31b81526004810184905263ffffffff8d166024820152604481018990526001600160a01b03909116606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000a0d57600080fd5b505af115801562000a22573d6000803e3d6000fd5b505050505060008560400151905060405180608001604052808d63ffffffff16815260200188600001516001600160a01b0316815260200182600162000a69919062001cb2565b815260200160011515815250600360008f815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083151502179055509050507f1d784a2e6117c9c7790cd6effb9ad66fee4286853a212a375d7a5c8c7bf175a78d8860000151338f85600162000b64919062001cb2565b604080519586526001600160a01b039485166020870152929093169184019190915263ffffffff16606083015260808201524260a082015260c00160405180910390a150505050505050505050505050565b60405163a692979360e01b815263ffffffff8316600482015260248101829052600090819073f90cb82a76492614d07b82a7658917f3ac811ac19063a692979390604401602060405180830381865afa15801562000c18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c3e919062001c68565b949350505050565b62000c5062001429565b604051806040016040528062000c6c836001600160a01b031690565b81526001602091820181905263ffffffff9490941660009081526005825260409020825181559101519201805460ff19169215159290921790915550565b63ffffffff851660009081526005602052604090206001015460ff1662000d0a5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b6044820152606401620004fd565b60405160009062000d2a9089908990879033908a90899060200162001ccd565b60408051601f1981840301815282825263ffffffff8916600090815260056020529182205463fa31de0160e01b8452909350909173cc737a94fecaec165abcf12ded095bb13f0376859163fa31de019162000d8c918b91879060040162001c38565b6020604051808303816000875af115801562000dac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd2919062001c68565b9050600062000de68a8a8a8a8a8a62001485565b905060008a8a838b8b8b334260405160200162000e0b98979695949392919062001d34565b60408051601f1981840301815291815281516020928301206000818152600290935291206004015490915060ff161562000e7b5760405162461bcd60e51b815260206004820152601060248201526f50726f6d6f74696f6e2065786973747360801b6044820152606401620004fd565b600062000e898a8762000bb6565b90508034101562000ed05760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b6044820152606401620004fd565b62000edc813462001c98565b6000838152600460205260408120805490919062000efc90849062001cb2565b9091555050604051630237e58360e31b81526004810185905263ffffffff8b1660248201526044810187905233606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000f6957600080fd5b505af115801562000f7e573d6000803e3d6000fd5b50505050506040518060c00160405280846001600160a01b031681526020018b63ffffffff168152602001336001600160a01b031681526020014281526020018a8152602001600115158152506002600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff021916908315150217905550905050600060046000848152602001908152602001600020541115620010fb57600082815260046020908152604091829020548251858152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a15b7fd4a6ee30ad1cd3b2f4f9f76e9abd1d4954e098a7aebc8af7c92439acd488907682848c33428e8e60405162001138979695949392919062001dcc565b60405180910390a1505050505050505050505050565b6200115862001429565b62001164600062001579565b565b62001170620015c9565b6000828152600260205260409020600101546001600160a01b03163314620011ca5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401620004fd565b600082815260046020526040902054620012145760405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b6044820152606401620004fd565b60008281526004602052604080822054905182916001600160a01b038516918381818185875af1925050503d80600081146200126d576040519150601f19603f3d011682016040523d82523d6000602084013e62001272565b606091505b50915091508115620012d1576000848152600460209081526040808320805493905580518781529182018390527f5aafa436e7bcce48335a89fd368e909dee8d7387d9349daaed3b167446d6841c910160405180910390a15062001303565b60405162461bcd60e51b815260206004820152600660248201526511985a5b195960d21b6044820152606401620004fd565b50506200130f60018055565b5050565b600081815260046020526040812080543492906200133390849062001cb2565b9091555050600081815260046020908152604091829020548251848152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a150565b6200138c62001429565b6001600160a01b038116620013f35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620004fd565b620013fe8162001579565b50565b600080600062001412858562001624565b9150915062001421816200166d565b509392505050565b6000546001600160a01b03163314620011645760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620004fd565b600080604051806020016200149a9062001893565b601f1982820381018352601f909101166040819052620014dd908a908a90889033908b9073cc737a94fecaec165abcf12ded095bb13f0376859060200162001e27565b60408051601f1981840301815290829052620014fd929160200162001e92565b60408051808303601f1901815282825263ffffffff8916600090815260056020908152928120548251848401206001600160f81b031994860194909452602185015260418401879052606184019290925292509060810160408051808303601f1901815291905280516020909101209998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6002600154036200161d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401620004fd565b6002600155565b60008082516041036200165e5760208301516040840151606085015160001a6200165187828585620017ca565b9450945050505062001666565b506000905060025b9250929050565b600081600481111562001684576200168462001ec5565b036200168d5750565b6001816004811115620016a457620016a462001ec5565b03620016f35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401620004fd565b60028160048111156200170a576200170a62001ec5565b03620017595760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401620004fd565b600381600481111562001770576200177062001ec5565b03620013fe5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401620004fd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156200180357506000905060036200188a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562001858573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811662001883576000600192509250506200188a565b9150600090505b94509492505050565b611fbe8062001edc83390190565b803563ffffffff81168114620018b657600080fd5b919050565b80356001600160a01b0381168114620018b657600080fd5b60008060008060008060a08789031215620018ed57600080fd5b86359550620018ff60208801620018a1565b9450604087013567ffffffffffffffff808211156200191d57600080fd5b818901915089601f8301126200193257600080fd5b8135818111156200194257600080fd5b8a60208285010111156200195557600080fd5b6020830196508095505050506200196f60608801620018bb565b9150608087013590509295509295509295565b600080604083850312156200199657600080fd5b620019a183620018a1565b946020939093013593505050565b60008060408385031215620019c357600080fd5b620019ce83620018a1565b9150620019de60208401620018bb565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262001a0f57600080fd5b813567ffffffffffffffff8082111562001a2d5762001a2d620019e7565b604051601f8301601f19908116603f0116810190828211818310171562001a585762001a58620019e7565b8160405283815286602085880101111562001a7257600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a03121562001aae57600080fd5b873567ffffffffffffffff8082111562001ac757600080fd5b62001ad58b838c01620019fd565b985060208a013591508082111562001aec57600080fd5b62001afa8b838c01620019fd565b975062001b0a60408b01620018a1565b965060608a0135955060808a013591508082111562001b2857600080fd5b5062001b378a828b01620019fd565b93505060a0880135915060c0880135905092959891949750929550565b60006020828403121562001b6757600080fd5b62001b7282620018a1565b9392505050565b6000806040838503121562001b8d57600080fd5b82359150620019de60208401620018bb565b60006020828403121562001bb257600080fd5b5035919050565b60006020828403121562001bcc57600080fd5b62001b7282620018bb565b60005b8381101562001bf457818101518382015260200162001bda565b8381111562001c04576000848401525b50505050565b6000815180845262001c2481602086016020860162001bd7565b601f01601f19169290920160200192915050565b63ffffffff8416815282602082015260606040820152600062001c5f606083018462001c0a565b95945050505050565b60006020828403121562001c7b57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008282101562001cad5762001cad62001c82565b500390565b6000821982111562001cc85762001cc862001c82565b500190565b60c08152600062001ce260c083018962001c0a565b828103602084015262001cf6818962001c0a565b9050828103604084015262001d0c818862001c0a565b6001600160a01b039690961660608401525050608081019290925260a0909101529392505050565b6000895162001d48818460208e0162001bd7565b89519083019062001d5e818360208e0162001bd7565b8082019150506bffffffffffffffffffffffff19808a60601b16825263ffffffff60e01b8960e01b166014830152876018830152865162001da7816038850160208b0162001bd7565b60609690961b16940160388101949094525050604c820152606c019695505050505050565b8781526001600160a01b03878116602083015263ffffffff87166040830152851660608201526080810184905260a0810183905260e060c0820181905260009062001e1a9083018462001c0a565b9998505050505050505050565b60c08152600062001e3c60c083018962001c0a565b828103602084015262001e50818962001c0a565b9050828103604084015262001e66818862001c0a565b6001600160a01b03968716606085015260808401959095525050921660a0909201919091529392505050565b6000835162001ea681846020880162001bd7565b83519083019062001ebc81836020880162001bd7565b01949350505050565b634e487b7160e01b600052602160045260246000fdfe60a06040523480156200001157600080fd5b5060405162001fbe38038062001fbe8339810160408190526200003491620002b2565b8551869086906200004d90600090602085019062000122565b5080516200006390600190602084019062000122565b505050620000806200007a620000cc60201b60201c565b620000d0565b83516200009590600990602087019062000122565b50600a919091556001600160a01b03908116608052600c80546001600160a01b0319169290911691909117905550620003ad915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001309062000371565b90600052602060002090601f0160209004810192826200015457600085556200019f565b82601f106200016f57805160ff19168380011785556200019f565b828001600101855582156200019f579182015b828111156200019f57825182559160200191906001019062000182565b50620001ad929150620001b1565b5090565b5b80821115620001ad5760008155600101620001b2565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f057600080fd5b81516001600160401b03808211156200020d576200020d620001c8565b604051601f8301601f19908116603f01168101908282118183101715620002385762000238620001c8565b816040528381526020925086838588010111156200025557600080fd5b600091505b838210156200027957858201830151818301840152908201906200025a565b838211156200028b5760008385830101525b9695505050505050565b80516001600160a01b0381168114620002ad57600080fd5b919050565b60008060008060008060c08789031215620002cc57600080fd5b86516001600160401b0380821115620002e457600080fd5b620002f28a838b01620001de565b975060208901519150808211156200030957600080fd5b620003178a838b01620001de565b965060408901519150808211156200032e57600080fd5b506200033d89828a01620001de565b9450506200034e6060880162000295565b9250608087015191506200036560a0880162000295565b90509295509295509295565b600181811c908216806200038657607f821691505b602082108103620003a757634e487b7160e01b600052602260045260246000fd5b50919050565b608051611bee620003d0600039600081816102b4015261064b0152611bee6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116a5565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061171a565b61019761019236600461172d565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461175b565b610443565b005b6101c26101d2366004611787565b61055d565b6101c26101e5366004611787565b610597565b6101776105b2565b6101c26102003660046117c8565b610640565b61019761021336600461172d565b61071c565b600c54610197906001600160a01b031681565b61023e61023936600461185a565b61077c565b604051908152602001610166565b6101c2610802565b6007546001600160a01b0316610197565b610177610816565b6101c261027b366004611877565b610825565b61023e600a5481565b6101c2610297366004611941565b610834565b6101776102aa36600461172d565b6108b2565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119c1565b6108bd565b61015a6102f7366004611a0a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461185a565b6108d8565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a38565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610951565b506000908152600460205260409020546001600160a01b031690565b600061044e8261071c565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b61055883836109b0565b505050565b60405162461bcd60e51b815260206004820152600f60248201526e21b0b73737ba103a3930b739b332b960891b60448201526064016104b7565b61055883838360405180602001604052806000815250610834565b600980546105bf90611a38565b80601f01602080910402602001604051908101604052809291908181526020018280546105eb90611a38565b80156106385780601f1061060d57610100808354040283529160200191610638565b820191906000526020600020905b81548152906001019060200180831161061b57829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461067557600080fd5b60006106838284018461185a565b6001600160a01b0381166000908152600b6020526040812054919250036106b2576106ad81610a1e565b610715565b600a546001600160a01b0382166000908152600b60205260409020541061070c5760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61071581610b8a565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107e65760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b61080a610c0c565b6108146000610c66565b565b60606001805461039990611a38565b610830338383610cb8565b5050565b61083e3383610d86565b6108a05760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b60648201526084016104b7565b6108ac84848484610e05565b50505050565b606061038482610e38565b6108c5610c0c565b80516108309060099060208401906115f6565b6108e0610c0c565b6001600160a01b0381166109455760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b61094e81610c66565b50565b6000818152600260205260409020546001600160a01b031661094e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109e58261071c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0381166000908152600b602052604090205415610a775760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610a8260085490565b9050610a92600880546001019055565b610a9c8282610f40565b610b308160098054610aad90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad990611a38565b8015610b265780601f10610afb57610100808354040283529160200191610b26565b820191906000526020600020905b815481529060010190602001808311610b0957829003601f168201915b5050505050610f5a565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610bb3908490611a72565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b031633146108145760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610d195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080610d928361071c565b9050806001600160a01b0316846001600160a01b03161480610dd957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610dfd5750836001600160a01b0316610df28461041c565b6001600160a01b0316145b949350505050565b610e10848484610ff4565b610e1c84848484611158565b6108ac5760405162461bcd60e51b81526004016104b790611a98565b6060610e4382610951565b60008281526006602052604081208054610e5c90611a38565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8890611a38565b8015610ed55780601f10610eaa57610100808354040283529160200191610ed5565b820191906000526020600020905b815481529060010190602001808311610eb857829003601f168201915b505050505090506000610ef360408051602081019091526000815290565b90508051600003610f05575092915050565b815115610f37578082604051602001610f1f929190611aea565b60405160208183030381529060405292505050919050565b610dfd84611259565b6108308282604051806020016040528060008152506112cd565b6000828152600260205260409020546001600160a01b0316610fd55760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b60008281526006602090815260409091208251610558928401906115f6565b826001600160a01b03166110078261071c565b6001600160a01b03161461102d5760405162461bcd60e51b81526004016104b790611b19565b6001600160a01b03821661108f5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b826001600160a01b03166110a28261071c565b6001600160a01b0316146110c85760405162461bcd60e51b81526004016104b790611b19565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60006001600160a01b0384163b1561124e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061119c903390899088908890600401611b5e565b6020604051808303816000875af19250505080156111d7575060408051601f3d908101601f191682019092526111d491810190611b9b565b60015b611234573d808015611205576040519150601f19603f3d011682016040523d82523d6000602084013e61120a565b606091505b50805160000361122c5760405162461bcd60e51b81526004016104b790611a98565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610dfd565b506001949350505050565b606061126482610951565b600061127b60408051602081019091526000815290565b9050600081511161129b57604051806020016040528060008152506112c6565b806112a584611300565b6040516020016112b6929190611aea565b6040516020818303038152906040525b9392505050565b6112d78383611393565b6112e46000848484611158565b6105585760405162461bcd60e51b81526004016104b790611a98565b6060600061130d8361151e565b600101905060008167ffffffffffffffff81111561132d5761132d6118b5565b6040519080825280601f01601f191660200182016040528015611357576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136157509392505050565b6001600160a01b0382166113e95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b03161561144e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114b35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061155d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611589576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115a757662386f26fc10000830492506010015b6305f5e10083106115bf576305f5e100830492506008015b61271083106115d357612710830492506004015b606483106115e5576064830492506002015b600a83106103845760010192915050565b82805461160290611a38565b90600052602060002090601f016020900481019282611624576000855561166a565b82601f1061163d57805160ff191683800117855561166a565b8280016001018555821561166a579182015b8281111561166a57825182559160200191906001019061164f565b5061167692915061167a565b5090565b5b80821115611676576000815560010161167b565b6001600160e01b03198116811461094e57600080fd5b6000602082840312156116b757600080fd5b81356112c68161168f565b60005b838110156116dd5781810151838201526020016116c5565b838111156108ac5750506000910152565b600081518084526117068160208601602086016116c2565b601f01601f19169290920160200192915050565b6020815260006112c660208301846116ee565b60006020828403121561173f57600080fd5b5035919050565b6001600160a01b038116811461094e57600080fd5b6000806040838503121561176e57600080fd5b823561177981611746565b946020939093013593505050565b60008060006060848603121561179c57600080fd5b83356117a781611746565b925060208401356117b781611746565b929592945050506040919091013590565b600080600080606085870312156117de57600080fd5b843563ffffffff811681146117f257600080fd5b935060208501359250604085013567ffffffffffffffff8082111561181657600080fd5b818701915087601f83011261182a57600080fd5b81358181111561183957600080fd5b88602082850101111561184b57600080fd5b95989497505060200194505050565b60006020828403121561186c57600080fd5b81356112c681611746565b6000806040838503121561188a57600080fd5b823561189581611746565b9150602083013580151581146118aa57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118e6576118e66118b5565b604051601f8501601f19908116603f0116810190828211818310171561190e5761190e6118b5565b8160405280935085815286868601111561192757600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561195757600080fd5b843561196281611746565b9350602085013561197281611746565b925060408501359150606085013567ffffffffffffffff81111561199557600080fd5b8501601f810187136119a657600080fd5b6119b5878235602084016118cb565b91505092959194509250565b6000602082840312156119d357600080fd5b813567ffffffffffffffff8111156119ea57600080fd5b8201601f810184136119fb57600080fd5b610dfd848235602084016118cb565b60008060408385031215611a1d57600080fd5b8235611a2881611746565b915060208301356118aa81611746565b600181811c90821680611a4c57607f821691505b602082108103611a6c57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115611a9357634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611afc8184602088016116c2565b835190830190611b108183602088016116c2565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611b91908301846116ee565b9695505050505050565b600060208284031215611bad57600080fd5b81516112c68161168f56fea264697066735822122026ffb14a05535fd4ae0cb98c25e1d04bc0e4d6788a68bfdfb98b0b9c4342a49964736f6c634300080e0033a26469706673582212200d99e11a9ec8430a651b436cae4b9d68f8df1f188ffa6a1bf84ff18616b1006064736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PromotionMain.sol:PromotionMain",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/PromotionMain.sol:PromotionMain",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3548,
        "contract": "contracts/PromotionMain.sol:PromotionMain",
        "label": "promotions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Promotion)3534_storage)"
      },
      {
        "astId": 3555,
        "contract": "contracts/PromotionMain.sol:PromotionMain",
        "label": "claims",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Claim)3543_storage))"
      },
      {
        "astId": 3559,
        "contract": "contracts/PromotionMain.sol:PromotionMain",
        "label": "gasTank",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3564,
        "contract": "contracts/PromotionMain.sol:PromotionMain",
        "label": "chains",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_struct(Receiver)3521_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Claim)3543_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PromotionMain.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)3543_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_struct(Claim)3543_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => struct PromotionMain.Claim))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Claim)3543_storage)"
      },
      "t_mapping(t_bytes32,t_struct(Promotion)3534_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct PromotionMain.Promotion)",
        "numberOfBytes": "32",
        "value": "t_struct(Promotion)3534_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(Receiver)3521_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct PromotionMain.Receiver)",
        "numberOfBytes": "32",
        "value": "t_struct(Receiver)3521_storage"
      },
      "t_struct(Claim)3543_storage": {
        "encoding": "inplace",
        "label": "struct PromotionMain.Claim",
        "members": [
          {
            "astId": 3536,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "destinationDomain",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3538,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "promotionAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3540,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "claimsCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3542,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "isExists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Promotion)3534_storage": {
        "encoding": "inplace",
        "label": "struct PromotionMain.Promotion",
        "members": [
          {
            "astId": 3523,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "promotionAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3525,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "destinationDomain",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3527,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3529,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "createdAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3531,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "claimsPerPerson",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3533,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "isExists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Receiver)3521_storage": {
        "encoding": "inplace",
        "label": "struct PromotionMain.Receiver",
        "members": [
          {
            "astId": 3518,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "destinationReceiverAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3520,
            "contract": "contracts/PromotionMain.sol:PromotionMain",
            "label": "isExists",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}