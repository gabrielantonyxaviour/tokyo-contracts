{"id":"9982caf180b0f2a4dc0a00f80caabe2b","_format":"hh-sol-build-info-1","solcVersion":"0.8.14","solcLongVersion":"0.8.14+commit.80d49f37","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"contracts/ERC721Promotion.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\r\nimport \"./interfaces/IMessageRecipient.sol\";\r\n\r\ncontract ERC721Promotion is\r\n    ERC721,\r\n    ERC721URIStorage,\r\n    Ownable,\r\n    IMessageRecipient\r\n{\r\n    using Counters for Counters.Counter;\r\n\r\n    Counters.Counter private _tokenIdCounter;\r\n\r\n    string public badgeTokenURI;\r\n    uint256 public amountOfClaimsPerPerson;\r\n    mapping(address => uint) claimerToClaimsCount;\r\n    address public immutable mailbox;\r\n    address public promoter;\r\n\r\n    event ClaimedPromotion(address claimer, uint claimCount);\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        string memory _tokenURI,\r\n        address _promoterAddress,\r\n        uint _amountOfClaimsPerPerson,\r\n        address _mailboxAddress\r\n    ) ERC721(name, symbol) {\r\n        setTokenURI(_tokenURI);\r\n        amountOfClaimsPerPerson = _amountOfClaimsPerPerson;\r\n        mailbox = _mailboxAddress;\r\n        promoter = _promoterAddress;\r\n    }\r\n\r\n    modifier onlyMailbox() {\r\n        require(msg.sender == mailbox);\r\n        _;\r\n    }\r\n\r\n    function handle(\r\n        uint32 _origin,\r\n        bytes32 _sender,\r\n        bytes calldata _body\r\n    ) external onlyMailbox {\r\n        address claimer = abi.decode(_body, (address));\r\n        if (claimerToClaimsCount[claimer] == 0) {\r\n            safeMint(claimer);\r\n        } else {\r\n            require(\r\n                claimerToClaimsCount[claimer] < amountOfClaimsPerPerson,\r\n                \"No more claims\"\r\n            );\r\n            addClaim(claimer);\r\n        }\r\n    }\r\n\r\n    function safeMint(address to) internal {\r\n        require(claimerToClaimsCount[to] == 0, \"Already owns NFT\");\r\n        uint256 tokenId = _tokenIdCounter.current();\r\n        _tokenIdCounter.increment();\r\n        _safeMint(to, tokenId);\r\n        _setTokenURI(tokenId, badgeTokenURI);\r\n        claimerToClaimsCount[to] = 1;\r\n\r\n        emit ClaimedPromotion(to, 1);\r\n    }\r\n\r\n    function addClaim(address to) internal {\r\n        claimerToClaimsCount[to] += 1;\r\n\r\n        emit ClaimedPromotion(to, claimerToClaimsCount[to]);\r\n    }\r\n\r\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\r\n        badgeTokenURI = _tokenURI;\r\n    }\r\n\r\n    // Soulbound Token\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal override {\r\n        revert(\"Cannot transfer this token\");\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function _burn(uint256 tokenId)\r\n        internal\r\n        override(ERC721, ERC721URIStorage)\r\n    {\r\n        revert(\"Disabled\");\r\n        // super._burn(tokenId);\r\n    }\r\n\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n}\r\n"},"contracts/interfaces/IInterchainGasPaymaster.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\n/**\r\n * @title IInterchainGasPaymaster\r\n * @notice Manages payments on a source chain to cover gas costs of relaying\r\n * messages to destination chains.\r\n */\r\ninterface IInterchainGasPaymaster {\r\n    /**\r\n     * @notice Emitted when a payment is made for a message's gas costs.\r\n     * @param messageId The ID of the message to pay for.\r\n     * @param gasAmount The amount of destination gas paid for.\r\n     * @param payment The amount of native tokens paid.\r\n     */\r\n    event GasPayment(\r\n        bytes32 indexed messageId,\r\n        uint256 gasAmount,\r\n        uint256 payment\r\n    );\r\n\r\n    function payForGas(\r\n        bytes32 _messageId,\r\n        uint32 _destinationDomain,\r\n        uint256 _gasAmount,\r\n        address _refundAddress\r\n    ) external payable;\r\n\r\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n"},"contracts/interfaces/IInterchainQueryRouter.sol":{"content":"interface IInterchainQueryRouter {\r\n    /**\r\n     * @param _destinationDomain Domain of destination chain\r\n     * @param target The address of the contract to query on destination chain.\r\n     * @param queryData The calldata of the view call to make on the destination\r\n     * chain.\r\n     * @param callback Callback function selector on `msg.sender` and optionally\r\n     * abi-encoded prefix arguments.\r\n     * @return messageId The ID of the Hyperlane message encoding the query.\r\n     */\r\n    function query(\r\n        uint32 _destinationDomain,\r\n        address target,\r\n        bytes calldata queryData,\r\n        bytes calldata callback\r\n    ) external returns (bytes32);\r\n}\r\n"},"contracts/interfaces/IMailbox.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\ninterface IMailbox {\r\n    function dispatch(\r\n        uint32 _destinationDomain,\r\n        bytes32 _recipientAddress,\r\n        bytes calldata _messageBody\r\n    ) external returns (bytes32);\r\n\r\n    function process(bytes calldata _metadata, bytes calldata _message)\r\n        external;\r\n}\r\n"},"contracts/interfaces/IMessageRecipient.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\r\npragma solidity >=0.6.11;\r\n\r\ninterface IMessageRecipient {\r\n    /**\r\n     * @notice Handle an interchain message\r\n     * @param _origin Domain ID of the chain from which the message came\r\n     * @param _sender Address of the message sender on the origin chain as bytes32\r\n     * @param _body Raw bytes content of message body\r\n     */\r\n    function handle(\r\n        uint32 _origin,\r\n        bytes32 _sender,\r\n        bytes calldata _body\r\n    ) external;\r\n}\r\n"},"contracts/interfaces/IReceiver.sol":{"content":"interface IReceiver {\r\n    function getLatestPromotionDeployment(address claimer)\r\n        external\r\n        view\r\n        returns (address);\r\n}\r\n"},"contracts/PromotionMain.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\n\r\nimport \"./interfaces/IInterchainQueryRouter.sol\";\r\nimport \"./interfaces/IMailbox.sol\";\r\nimport \"./interfaces/IInterchainGasPaymaster.sol\";\r\nimport \"./interfaces/IReceiver.sol\";\r\nimport \"./ERC721Promotion.sol\";\r\n\r\ncontract PromotionMain is Ownable, ReentrancyGuard {\r\n    using ECDSA for bytes32;\r\n    struct Receiver {\r\n        bytes32 destinationReceiverAddress;\r\n        address destinationMailbox;\r\n        bool isExists;\r\n    }\r\n\r\n    struct Promotion {\r\n        address promotionAddress;\r\n        uint32 destinationDomain;\r\n        address creator;\r\n        uint createdAt;\r\n        uint claimsPerPerson;\r\n        bool isExists;\r\n    }\r\n\r\n    struct Claim {\r\n        uint32 destinationDomain;\r\n        address promotionAddress;\r\n        uint claimsCount;\r\n        bool isExists;\r\n    }\r\n\r\n    mapping(bytes32 => Promotion) public promotions; // Promotion Id => Promotion\r\n    mapping(bytes32 => mapping(address => Claim)) public claims;\r\n\r\n    mapping(bytes32 => uint256) public gasTank;\r\n    mapping(uint32 => Receiver) public chains;\r\n\r\n    IMailbox public constant mailbox =\r\n        IMailbox(0xCC737a94FecaeC165AbCf12dED095BB13F037685);\r\n    IInterchainGasPaymaster public constant igp =\r\n        IInterchainGasPaymaster(0xF90cB82a76492614D07B82a7658917f3aC811Ac1);\r\n    IInterchainQueryRouter public constant iqsRouter =\r\n        IInterchainQueryRouter(0xF782C6C4A02f2c71BB8a1Db0166FAB40ea956818);\r\n\r\n    event NewChainAdded(uint32 destinationDomain);\r\n    event GasTankFilled(bytes32 promotionId, uint256 amount);\r\n    event GasTankRefunded(bytes32 promotionId, uint256 amount);\r\n    event PromotionCreated(bytes32 promotionId,address promotionAddress,uint32 destinationDomain,address creator,uint createdAt,uint claimsPerPerson,string badgeURI);\r\n    event ClaimedPromotion(bytes32 promotionId,address promotionAddress,address claimer,uint32 destinationDomain,uint claimsCount,uint claimedAt);\r\n\r\n    function addChain(\r\n        uint32 destinationDomain,\r\n        address destinationReceiver,\r\n        address destinationMailbox\r\n    ) public onlyOwner {\r\n        chains[destinationDomain] = Receiver(\r\n            addressToBytes32(destinationReceiver),\r\n            destinationMailbox,\r\n            true\r\n        );\r\n    }\r\n\r\n    function _getAddress(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint32 destinationDomain,\r\n        uint claimsPerPerson,\r\n        string memory badgeURI,\r\n        uint _salt\r\n    ) internal returns (address) {\r\n        bytes memory bytecode = abi.encodePacked(\r\n            type(ERC721Promotion).creationCode,\r\n            abi.encode(\r\n                name,\r\n                symbol,\r\n                badgeURI,\r\n                msg.sender,\r\n                claimsPerPerson,\r\n                chains[destinationDomain].destinationMailbox\r\n            )\r\n        );\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                bytes1(0xff),\r\n                chains[destinationDomain].destinationReceiverAddress,\r\n                bytes32(_salt),\r\n                keccak256(bytecode)\r\n            )\r\n        );\r\n\r\n        return address(uint160(uint(hash)));\r\n    }\r\n\r\n\r\n\r\n    function createPromotion(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint32 destinationDomain,\r\n        uint claimsPerPerson,\r\n        string memory badgeURI,\r\n        uint _salt\r\n    ) public payable {\r\n        require(chains[destinationDomain].isExists, \"Invalid Destination\");\r\n        // 1. Create PromotionNFT contract in destination chain and Fill Gas\r\n        bytes memory message = abi.encode(\r\n            name,\r\n            symbol,\r\n            badgeURI,\r\n            msg.sender,\r\n            claimsPerPerson,\r\n            bytes32(_salt)\r\n        ); \r\n\r\n        bytes32 messageId = mailbox.dispatch(\r\n            destinationDomain,\r\n            chains[destinationDomain].destinationReceiverAddress,\r\n            message\r\n        );\r\n        address _promotionAddress=_getAddress(name,symbol,destinationDomain,claimsPerPerson,badgeURI,_salt);\r\n        bytes32 _promotionId = keccak256(\r\n            abi.encodePacked(\r\n                name,\r\n                symbol,\r\n                _promotionAddress,\r\n                destinationDomain,\r\n                claimsPerPerson,\r\n                badgeURI,\r\n                msg.sender,\r\n                block.timestamp\r\n            )\r\n        );\r\n        require(promotions[_promotionId].isExists==false,\"Promotion exists\");\r\n    \r\n        // 2. Get gas amount\r\n        uint256 quotedPayment = getQuotedPayment(destinationDomain);\r\n        require(msg.value >= quotedPayment, \"Insufficient gas\");\r\n        gasTank[_promotionId] += (msg.value-quotedPayment);\r\n\r\n        // 3. Pay for Interchain Gas\r\n        igp.payForGas{value: quotedPayment}(\r\n            messageId,\r\n            destinationDomain,\r\n            50000,\r\n            msg.sender\r\n        );\r\n\r\n        // 4. Update State Variables\r\n        promotions[_promotionId]=Promotion(_promotionAddress,destinationDomain,msg.sender,block.timestamp,claimsPerPerson,true);\r\n\r\n        // 5. Emit events\r\n        if(gasTank[_promotionId]>0)\r\n        {\r\n            emit GasTankFilled(_promotionId, gasTank[_promotionId]);\r\n        }\r\n        emit PromotionCreated(_promotionId, _promotionAddress, destinationDomain,msg.sender,block.timestamp, claimsPerPerson, badgeURI);\r\n\r\n    }\r\n\r\n    function claimPromotion(\r\n        bytes32 _promotionId,\r\n        uint32 destinationDomain,\r\n        bytes calldata signature,\r\n        address claimer\r\n    ) public {\r\n        require(chains[destinationDomain].isExists, \"Invalid Destination\");\r\n        Promotion memory _promotion=promotions[_promotionId];\r\n        Claim memory _claim=claims[_promotionId][claimer];\r\n        address _contractAddress=_promotion.promotionAddress;\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                _promotionId,\r\n                destinationDomain,\r\n                _contractAddress,\r\n                msg.sender \r\n            )\r\n        );\r\n        require(hash.recover(signature) == claimer, \"unauthorized\");\r\n        require(_promotion.isExists, \"Invalid Promotion\");\r\n        require(\r\n            !_claim.isExists ||\r\n                _promotion.claimsPerPerson >\r\n                _claim.claimsCount,\r\n            \"No more claims\"\r\n        );\r\n\r\n        bytes memory message = abi.encode(claimer);\r\n        bytes32 messageId = mailbox.dispatch(\r\n            destinationDomain,\r\n            addressToBytes32(_contractAddress),\r\n            message\r\n        );\r\n\r\n        uint256 quotedPayment = getQuotedPayment(destinationDomain);\r\n        require(gasTank[_promotionId] >= quotedPayment, \"Insufficient gas\");\r\n        igp.payForGas{value: quotedPayment}(\r\n            messageId,\r\n            destinationDomain,\r\n            50000,\r\n            _promotion.creator\r\n        );\r\n        uint _currentClaims=_claim.claimsCount;\r\n        claims[_promotionId][claimer]=Claim(destinationDomain,_contractAddress,_currentClaims+1,true);\r\n\r\n        emit ClaimedPromotion(_promotionId,_contractAddress,msg.sender,destinationDomain,_currentClaims+1,block.timestamp);\r\n    }\r\n\r\n    function fillGas(bytes32 _promotionId) public payable {\r\n        gasTank[_promotionId] += msg.value;\r\n        emit GasTankFilled(_promotionId, gasTank[_promotionId]);\r\n    }\r\n\r\n    function refundGas(bytes32 _promotionId, address _to) public nonReentrant {\r\n        require(msg.sender == promotions[_promotionId].creator, \"Unauthorized\");\r\n        require(gasTank[_promotionId] > 0, \"No balance\");\r\n        (bool success, bytes memory data) = payable(_to).call{\r\n            value: gasTank[_promotionId]\r\n        }(\"\");\r\n        if (success) {\r\n            uint _gasAmount = gasTank[_promotionId];\r\n            gasTank[_promotionId] = 0;\r\n            emit GasTankRefunded(_promotionId, _gasAmount);\r\n        } else {\r\n            revert(\"Failed\");\r\n        }\r\n    }\r\n\r\n    // GETTERS\r\n    function getQuotedPayment(uint32 destinationDomain)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 gasAmount = 50000;\r\n        uint256 quotedPayment = igp.quoteGasPayment(\r\n            destinationDomain,\r\n            gasAmount\r\n        );\r\n        return quotedPayment;\r\n    }\r\n\r\n    // LIBRARY FUNCTIONS\r\n\r\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(_addr)));\r\n    }\r\n}\r\n"},"contracts/Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.14;\r\n\r\nimport \"./interfaces/IMessageRecipient.sol\";\r\nimport \"./ERC721Promotion.sol\";\r\n\r\ncontract Receiver is IMessageRecipient {\r\n    mapping(address => address) public latestPromotionDeployment;\r\n    mapping(address => address) public deploymentCreator;\r\n    address public immutable mailbox;\r\n\r\n    constructor(address _mailboxAddress) {\r\n        mailbox = _mailboxAddress;\r\n    }\r\n\r\n    event PromotionNFTDeployed(address promotionNFTAddress);\r\n    event TokenURIChanged(\r\n        address contractAddress,\r\n        address creator,\r\n        string newURI\r\n    );\r\n\r\n    modifier onlyMailbox() {\r\n        require(msg.sender == mailbox);\r\n        _;\r\n    }\r\n\r\n    function handle(\r\n        uint32 _origin,\r\n        bytes32 _sender,\r\n        bytes calldata _body\r\n    ) external onlyMailbox {\r\n        (\r\n            string memory _name,\r\n            string memory _symbol,\r\n            string memory _badgeURI,\r\n            address _promoterAddress,\r\n            uint _claimsPerPerson,\r\n            bytes32 _salt\r\n        ) = abi.decode(_body, (string, string, string, address, uint, bytes32));\r\n        ERC721Promotion promotion = (new ERC721Promotion){salt: _salt}(\r\n            _name,\r\n            _symbol,\r\n            _badgeURI,\r\n            msg.sender,\r\n            _claimsPerPerson,\r\n            mailbox\r\n        );\r\n        emit PromotionNFTDeployed(address(promotion));\r\n    }\r\n\r\n    function changeTokenURI(address contractAddress, string calldata newURI)\r\n        public\r\n    {\r\n        require(msg.sender == deploymentCreator[contractAddress], \"Not owned\");\r\n        ERC721Promotion(contractAddress).setTokenURI(newURI);\r\n\r\n        emit TokenURIChanged(contractAddress, msg.sender, newURI);\r\n    }\r\n\r\n    function getLatestPromotionDeployment(address promoter)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return latestPromotionDeployment[promoter];\r\n    }\r\n\r\n    function bytes32ToString(bytes32 _bytes32)\r\n        public\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        uint8 i = 0;\r\n        while (i < 32 && _bytes32[i] != 0) {\r\n            i++;\r\n        }\r\n        bytes memory bytesArray = new bytes(i);\r\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IInterchainQueryRouter.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IInterchainQueryRouter.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IReceiver.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IReceiver.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.14;\"\n--> contracts/interfaces/IInterchainQueryRouter.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.14;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IInterchainQueryRouter.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.14;\"\n--> contracts/interfaces/IReceiver.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.14;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IReceiver.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:210:9:\n    |\n210 |         require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":6722,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":6612},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:268:9:\n    |\n268 |         require(\n    |         ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":8762,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":8612},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:293:9:\n    |\n293 |         require(!_exists(tokenId), \"ERC721: token already minted\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":9495,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":9437},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:295:9:\n    |\n295 |         unchecked {\n    |         ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":10004,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":9506},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:327:9:\n    |\n327 |         owner = ERC721.ownerOf(tokenId);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":10630,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":10599},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:330:9:\n    |\n330 |         delete _tokenApprovals[tokenId];\n    |         ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":11092,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":10668},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:366:9:\n    |\n366 |         require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":11924,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":11843},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n   --> @openzeppelin/contracts/token/ERC721/ERC721.sol:369:9:\n    |\n369 |         delete _tokenApprovals[tokenId];\n    |         ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":12649,"file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","start":11986},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n  --> @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:58:9:\n   |\n58 |         if (bytes(_tokenURIs[tokenId]).length != 0) {\n   |         ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":1863,"file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","start":1768},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n  --> contracts/ERC721Promotion.sol:69:9:\n   |\n69 |         _setTokenURI(tokenId, badgeTokenURI);\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":2113,"file":"contracts/ERC721Promotion.sol","start":2077},"type":"Warning"},{"component":"general","errorCode":"5740","formattedMessage":"Warning: Unreachable code.\n  --> contracts/ERC721Promotion.sol:70:9:\n   |\n70 |         claimerToClaimsCount[to] = 1;\n   |         ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Unreachable code.","severity":"warning","sourceLocation":{"end":2193,"file":"contracts/ERC721Promotion.sol","start":2124},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721Promotion.sol:48:9:\n   |\n48 |         uint32 _origin,\n   |         ^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1384,"file":"contracts/ERC721Promotion.sol","start":1370},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721Promotion.sol:49:9:\n   |\n49 |         bytes32 _sender,\n   |         ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":1410,"file":"contracts/ERC721Promotion.sol","start":1395},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721Promotion.sol:87:9:\n   |\n87 |         address from,\n   |         ^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2559,"file":"contracts/ERC721Promotion.sol","start":2547},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721Promotion.sol:88:9:\n   |\n88 |         address to,\n   |         ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2580,"file":"contracts/ERC721Promotion.sol","start":2570},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721Promotion.sol:89:9:\n   |\n89 |         uint256 firstTokenId,\n   |         ^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2611,"file":"contracts/ERC721Promotion.sol","start":2591},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721Promotion.sol:90:9:\n   |\n90 |         uint256 batchSize\n   |         ^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2639,"file":"contracts/ERC721Promotion.sol","start":2622},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/ERC721Promotion.sol:97:20:\n   |\n97 |     function _burn(uint256 tokenId)\n   |                    ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2828,"file":"contracts/ERC721Promotion.sol","start":2813},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n   --> contracts/PromotionMain.sol:222:24:\n    |\n222 |         (bool success, bytes memory data) = payable(_to).call{\n    |                        ^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":7847,"file":"contracts/PromotionMain.sol","start":7830},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Receiver.sol:29:9:\n   |\n29 |         uint32 _origin,\n   |         ^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":759,"file":"contracts/Receiver.sol","start":745},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/Receiver.sol:30:9:\n   |\n30 |         bytes32 _sender,\n   |         ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":785,"file":"contracts/Receiver.sol","start":770},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/Receiver.sol:37:13:\n   |\n37 |             address _promoterAddress,\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":1003,"file":"contracts/Receiver.sol","start":979},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/ERC721Promotion.sol:86:5:\n   |\n86 |     function _beforeTokenTransfer(\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":2720,"file":"contracts/ERC721Promotion.sol","start":2507},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/ERC721Promotion.sol:97:5:\n   |\n97 |     function _burn(uint256 tokenId)\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":2968,"file":"contracts/ERC721Promotion.sol","start":2798},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n  --> contracts/PromotionMain.sol:69:5:\n   |\n69 |     function _getAddress(\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":3396,"file":"contracts/PromotionMain.sol","start":2488},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1731],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1732,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1731,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1731],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[166]},"id":167,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":115,"nodeType":"StructuredDocumentation","src":"137:750:1","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":166,"linearizedBaseContracts":[166],"name":"ReentrancyGuard","nameLocation":"906:15:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":118,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:1","nodeType":"VariableDeclaration","scope":166,"src":"1676:41:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":116,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":121,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:1","nodeType":"VariableDeclaration","scope":166,"src":"1723:37:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":123,"mutability":"mutable","name":"_status","nameLocation":"1783:7:1","nodeType":"VariableDeclaration","scope":166,"src":"1767:23:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":122,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":130,"nodeType":"Block","src":"1811:39:1","statements":[{"expression":{"id":128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":126,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"1821:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":127,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"1831:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"nodeType":"ExpressionStatement","src":"1821:22:1"}]},"id":131,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[],"src":"1808:2:1"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"1811:0:1"},"scope":166,"src":"1797:53:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":141,"nodeType":"Block","src":"2251:79:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":134,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"2261:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2261:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":136,"nodeType":"ExpressionStatement","src":"2261:21:1"},{"id":137,"nodeType":"PlaceholderStatement","src":"2292:1:1"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":138,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":165,"src":"2303:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2303:20:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":140,"nodeType":"ExpressionStatement","src":"2303:20:1"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"1856:366:1","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":142,"name":"nonReentrant","nameLocation":"2236:12:1","nodeType":"ModifierDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"2248:2:1"},"src":"2227:103:1","virtual":false,"visibility":"internal"},{"body":{"id":156,"nodeType":"Block","src":"2375:248:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":146,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2468:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":147,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2479:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2460:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":151,"nodeType":"ExpressionStatement","src":"2460:63:1"},{"expression":{"id":154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":152,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2598:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":153,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":121,"src":"2608:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":155,"nodeType":"ExpressionStatement","src":"2598:18:1"}]},"id":157,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:1","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[],"src":"2364:2:1"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"2375:0:1"},"scope":166,"src":"2336:287:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":164,"nodeType":"Block","src":"2667:171:1","statements":[{"expression":{"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":160,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":123,"src":"2809:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":161,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":118,"src":"2819:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":163,"nodeType":"ExpressionStatement","src":"2809:22:1"}]},"id":165,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:1","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"2656:2:1"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"2667:0:1"},"scope":166,"src":"2629:209:1","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":167,"src":"888:1952:1","usedErrors":[]}],"src":"112:2729:1"},"id":1},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[1709],"Context":[1731],"ERC165":[2365],"ERC721":[1093],"IERC165":[2377],"IERC721":[1209],"IERC721Metadata":[1379],"IERC721Receiver":[1227],"Math":[3242],"Strings":[1980]},"id":1094,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":168,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:2"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1094,"sourceUnit":1210,"src":"132:23:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1094,"sourceUnit":1228,"src":"156:31:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":171,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1094,"sourceUnit":1380,"src":"188:42:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":172,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1094,"sourceUnit":1710,"src":"231:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":173,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1094,"sourceUnit":1732,"src":"265:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":174,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1094,"sourceUnit":1981,"src":"299:33:2","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":175,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1094,"sourceUnit":2366,"src":"333:46:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":177,"name":"Context","nodeType":"IdentifierPath","referencedDeclaration":1731,"src":"647:7:2"},"id":178,"nodeType":"InheritanceSpecifier","src":"647:7:2"},{"baseName":{"id":179,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":2365,"src":"656:6:2"},"id":180,"nodeType":"InheritanceSpecifier","src":"656:6:2"},{"baseName":{"id":181,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1209,"src":"664:7:2"},"id":182,"nodeType":"InheritanceSpecifier","src":"664:7:2"},{"baseName":{"id":183,"name":"IERC721Metadata","nodeType":"IdentifierPath","referencedDeclaration":1379,"src":"673:15:2"},"id":184,"nodeType":"InheritanceSpecifier","src":"673:15:2"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":176,"nodeType":"StructuredDocumentation","src":"381:246:2","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":1093,"linearizedBaseContracts":[1093,1379,1209,2365,2377,1731],"name":"ERC721","nameLocation":"637:6:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":187,"libraryName":{"id":185,"name":"Address","nodeType":"IdentifierPath","referencedDeclaration":1709,"src":"701:7:2"},"nodeType":"UsingForDirective","src":"695:26:2","typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":190,"libraryName":{"id":188,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":1980,"src":"732:7:2"},"nodeType":"UsingForDirective","src":"726:26:2","typeName":{"id":189,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":192,"mutability":"mutable","name":"_name","nameLocation":"791:5:2","nodeType":"VariableDeclaration","scope":1093,"src":"776:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":191,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":194,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:2","nodeType":"VariableDeclaration","scope":1093,"src":"823:22:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":193,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":198,"mutability":"mutable","name":"_owners","nameLocation":"934:7:2","nodeType":"VariableDeclaration","scope":1093,"src":"898:43:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":197,"keyType":{"id":195,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":202,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:2","nodeType":"VariableDeclaration","scope":1093,"src":"992:45:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":201,"keyType":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":206,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:2","nodeType":"VariableDeclaration","scope":1093,"src":"1093:51:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":205,"keyType":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueType":{"id":204,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":212,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:2","nodeType":"VariableDeclaration","scope":1093,"src":"1199:71:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":211,"keyType":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueType":{"id":210,"keyType":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueType":{"id":209,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":228,"nodeType":"Block","src":"1446:57:2","statements":[{"expression":{"id":222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":220,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"1456:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":221,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":215,"src":"1464:5:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":223,"nodeType":"ExpressionStatement","src":"1456:13:2"},{"expression":{"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":224,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"1479:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":225,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":217,"src":"1489:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":227,"nodeType":"ExpressionStatement","src":"1479:17:2"}]},"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"1277:108:2","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":229,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":215,"mutability":"mutable","name":"name_","nameLocation":"1416:5:2","nodeType":"VariableDeclaration","scope":229,"src":"1402:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":214,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":217,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:2","nodeType":"VariableDeclaration","scope":229,"src":"1423:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":216,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:2"},"returnParameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"1446:0:2"},"scope":1093,"src":"1390:113:2","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2364,2376],"body":{"id":259,"nodeType":"Block","src":"1678:192:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1707:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":242,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"1727:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1209_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1209_$","typeString":"type(contract IERC721)"}],"id":241,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1722:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1209","typeString":"type(contract IERC721)"}},"id":244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1763:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":248,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"1783:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1379_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1379_$","typeString":"type(contract IERC721Metadata)"}],"id":247,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1778:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1379","typeString":"type(contract IERC721Metadata)"}},"id":250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":255,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"1851:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":253,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$1093_$","typeString":"type(contract super ERC721)"}},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2364,"src":"1827:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1827:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":239,"id":258,"nodeType":"Return","src":"1688:175:2"}]},"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"1509:56:2","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":260,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:2","nodeType":"FunctionDefinition","overrides":{"id":236,"nodeType":"OverrideSpecifier","overrides":[{"id":234,"name":"ERC165","nodeType":"IdentifierPath","referencedDeclaration":2365,"src":"1646:6:2"},{"id":235,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"1654:7:2"}],"src":"1637:25:2"},"parameters":{"id":233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:2","nodeType":"VariableDeclaration","scope":260,"src":"1597:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":231,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:2"},"returnParameters":{"id":239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":260,"src":"1672:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":237,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:2"},"scope":1093,"src":"1570:300:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1134],"body":{"id":283,"nodeType":"Block","src":"2010:123:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":270,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"2028:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:2","typeDescriptions":{}}},"id":274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2037:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":269,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2020:73:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":278,"nodeType":"ExpressionStatement","src":"2020:73:2"},{"expression":{"baseExpression":{"id":279,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"2110:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":281,"indexExpression":{"id":280,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"2120:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":268,"id":282,"nodeType":"Return","src":"2103:23:2"}]},"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"1876:48:2","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":284,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:2","nodeType":"FunctionDefinition","overrides":{"id":265,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:2"},"parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"owner","nameLocation":"1956:5:2","nodeType":"VariableDeclaration","scope":284,"src":"1948:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":262,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:2"},"returnParameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":284,"src":"2001:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":266,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:2"},"scope":1093,"src":"1929:204:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1142],"body":{"id":311,"nodeType":"Block","src":"2271:138:2","statements":[{"assignments":[294],"declarations":[{"constant":false,"id":294,"mutability":"mutable","name":"owner","nameLocation":"2289:5:2","nodeType":"VariableDeclaration","scope":311,"src":"2281:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":298,"initialValue":{"arguments":[{"id":296,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"2306:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":295,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2297:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2297:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":300,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2332:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":301,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:2","typeDescriptions":{}}},"id":304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2341:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":299,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2324:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":308,"nodeType":"ExpressionStatement","src":"2324:56:2"},{"expression":{"id":309,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":294,"src":"2397:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":292,"id":310,"nodeType":"Return","src":"2390:12:2"}]},"documentation":{"id":285,"nodeType":"StructuredDocumentation","src":"2139:46:2","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":312,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:2","nodeType":"FunctionDefinition","overrides":{"id":289,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:2"},"parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:2","nodeType":"VariableDeclaration","scope":312,"src":"2207:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:2"},"returnParameters":{"id":292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":312,"src":"2262:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":290,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:2"},"scope":1093,"src":"2190:219:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1364],"body":{"id":321,"nodeType":"Block","src":"2540:29:2","statements":[{"expression":{"id":319,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":192,"src":"2557:5:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":318,"id":320,"nodeType":"Return","src":"2550:12:2"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"2415:51:2","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":322,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:2","nodeType":"FunctionDefinition","overrides":{"id":315,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:2"},"parameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"2484:2:2"},"returnParameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":322,"src":"2525:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":316,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:2"},"scope":1093,"src":"2471:98:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1370],"body":{"id":331,"nodeType":"Block","src":"2704:31:2","statements":[{"expression":{"id":329,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":194,"src":"2721:7:2","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":328,"id":330,"nodeType":"Return","src":"2714:14:2"}]},"documentation":{"id":323,"nodeType":"StructuredDocumentation","src":"2575:53:2","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":332,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:2","nodeType":"FunctionDefinition","overrides":{"id":325,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:2"},"parameters":{"id":324,"nodeType":"ParameterList","parameters":[],"src":"2648:2:2"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":332,"src":"2689:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":326,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:2"},"scope":1093,"src":"2633:102:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1378],"body":{"id":370,"nodeType":"Block","src":"2889:188:2","statements":[{"expression":{"arguments":[{"id":342,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"2914:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":341,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"2899:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2899:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":344,"nodeType":"ExpressionStatement","src":"2899:23:2"},{"assignments":[346],"declarations":[{"constant":false,"id":346,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:2","nodeType":"VariableDeclaration","scope":370,"src":"2933:21:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":345,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":349,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":347,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"2957:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2957:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:2"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":352,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"2990:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":350,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:2","typeDescriptions":{}}},"id":353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2984:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2984:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:2","trueExpression":{"arguments":[{"arguments":[{"id":361,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"3036:7:2","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":362,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":335,"src":"3045:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1863,"src":"3045:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3045:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":359,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3019:45:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":357,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:2","typeDescriptions":{}}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3012:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":340,"id":369,"nodeType":"Return","src":"2977:93:2"}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"2741:55:2","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":371,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:2","nodeType":"FunctionDefinition","overrides":{"id":337,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:2"},"parameters":{"id":336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":335,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:2","nodeType":"VariableDeclaration","scope":371,"src":"2819:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":334,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:2"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":371,"src":"2874:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":338,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:2"},"scope":1093,"src":"2801:276:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":379,"nodeType":"Block","src":"3385:26:2","statements":[{"expression":{"hexValue":"","id":377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":376,"id":378,"nodeType":"Return","src":"3395:9:2"}]},"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"3083:231:2","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":380,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:2","nodeType":"FunctionDefinition","parameters":{"id":373,"nodeType":"ParameterList","parameters":[],"src":"3336:2:2"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":380,"src":"3370:13:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":374,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:2","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:2"},"scope":1093,"src":"3319:92:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1182],"body":{"id":422,"nodeType":"Block","src":"3538:336:2","statements":[{"assignments":[390],"declarations":[{"constant":false,"id":390,"mutability":"mutable","name":"owner","nameLocation":"3556:5:2","nodeType":"VariableDeclaration","scope":422,"src":"3548:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":389,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":395,"initialValue":{"arguments":[{"id":393,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"3579:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":391,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"3564:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1093_$","typeString":"type(contract ERC721)"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"3564:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3564:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":397,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3605:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":398,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3611:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":396,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3597:57:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"ExpressionStatement","src":"3597:57:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":404,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"3686:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3686:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":406,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3702:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":409,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":390,"src":"3728:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":410,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"3735:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3735:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":408,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"3711:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3711:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":403,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3665:170:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":416,"nodeType":"ExpressionStatement","src":"3665:170:2"},{"expression":{"arguments":[{"id":418,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"3855:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":419,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"3859:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":417,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"3846:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3846:21:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":421,"nodeType":"ExpressionStatement","src":"3846:21:2"}]},"documentation":{"id":381,"nodeType":"StructuredDocumentation","src":"3417:46:2","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":423,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:2","nodeType":"FunctionDefinition","overrides":{"id":387,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:2"},"parameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":383,"mutability":"mutable","name":"to","nameLocation":"3493:2:2","nodeType":"VariableDeclaration","scope":423,"src":"3485:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":382,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":385,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:2","nodeType":"VariableDeclaration","scope":423,"src":"3497:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":384,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:2"},"returnParameters":{"id":388,"nodeType":"ParameterList","parameters":[],"src":"3538:0:2"},"scope":1093,"src":"3468:406:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1198],"body":{"id":440,"nodeType":"Block","src":"4020:82:2","statements":[{"expression":{"arguments":[{"id":433,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"4045:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":432,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4030:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4030:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":435,"nodeType":"ExpressionStatement","src":"4030:23:2"},{"expression":{"baseExpression":{"id":436,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"4071:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":438,"indexExpression":{"id":437,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":426,"src":"4087:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":431,"id":439,"nodeType":"Return","src":"4064:31:2"}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"3880:50:2","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":441,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:2","nodeType":"FunctionDefinition","overrides":{"id":428,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:2"},"parameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":426,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:2","nodeType":"VariableDeclaration","scope":441,"src":"3956:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":425,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:2"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":430,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":441,"src":"4011:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":429,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:2"},"scope":1093,"src":"3935:167:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1190],"body":{"id":457,"nodeType":"Block","src":"4253:69:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":451,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"4282:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4282:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":453,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"4296:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":454,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":446,"src":"4306:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":450,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"4263:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4263:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":456,"nodeType":"ExpressionStatement","src":"4263:52:2"}]},"documentation":{"id":442,"nodeType":"StructuredDocumentation","src":"4108:56:2","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":458,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:2","nodeType":"FunctionDefinition","overrides":{"id":448,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:2"},"parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":444,"mutability":"mutable","name":"operator","nameLocation":"4204:8:2","nodeType":"VariableDeclaration","scope":458,"src":"4196:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":443,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"approved","nameLocation":"4219:8:2","nodeType":"VariableDeclaration","scope":458,"src":"4214:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":445,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:2"},"returnParameters":{"id":449,"nodeType":"ParameterList","parameters":[],"src":"4253:0:2"},"scope":1093,"src":"4169:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1208],"body":{"id":475,"nodeType":"Block","src":"4491:59:2","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":469,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"4508:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":471,"indexExpression":{"id":470,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"4527:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":473,"indexExpression":{"id":472,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"4534:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":468,"id":474,"nodeType":"Return","src":"4501:42:2"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"4328:55:2","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":476,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:2","nodeType":"FunctionDefinition","overrides":{"id":465,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:2"},"parameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"owner","nameLocation":"4422:5:2","nodeType":"VariableDeclaration","scope":476,"src":"4414:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"operator","nameLocation":"4437:8:2","nodeType":"VariableDeclaration","scope":476,"src":"4429:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":462,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:2"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":476,"src":"4485:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":466,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:2"},"scope":1093,"src":"4388:162:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1174],"body":{"id":502,"nodeType":"Block","src":"4731:207:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":489,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"4820:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4820:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"4834:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":488,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"4801:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4801:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4844:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4793:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4793:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":495,"nodeType":"ExpressionStatement","src":"4793:99:2"},{"expression":{"arguments":[{"id":497,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"4913:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":498,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"4919:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":499,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"4923:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":496,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"4903:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4903:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":501,"nodeType":"ExpressionStatement","src":"4903:28:2"}]},"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"4556:51:2","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":503,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:2","nodeType":"FunctionDefinition","overrides":{"id":485,"nodeType":"OverrideSpecifier","overrides":[],"src":"4722:8:2"},"parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"from","nameLocation":"4651:4:2","nodeType":"VariableDeclaration","scope":503,"src":"4643:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"4643:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"to","nameLocation":"4673:2:2","nodeType":"VariableDeclaration","scope":503,"src":"4665:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":480,"name":"address","nodeType":"ElementaryTypeName","src":"4665:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"tokenId","nameLocation":"4693:7:2","nodeType":"VariableDeclaration","scope":503,"src":"4685:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"4685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:73:2"},"returnParameters":{"id":486,"nodeType":"ParameterList","parameters":[],"src":"4731:0:2"},"scope":1093,"src":"4612:326:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1164],"body":{"id":521,"nodeType":"Block","src":"5127:56:2","statements":[{"expression":{"arguments":[{"id":515,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"5154:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":516,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"5160:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":517,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"5164:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5173:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":514,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[522,552],"referencedDeclaration":552,"src":"5137:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5137:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":520,"nodeType":"ExpressionStatement","src":"5137:39:2"}]},"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"4944:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":522,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5013:16:2","nodeType":"FunctionDefinition","overrides":{"id":512,"nodeType":"OverrideSpecifier","overrides":[],"src":"5118:8:2"},"parameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"from","nameLocation":"5047:4:2","nodeType":"VariableDeclaration","scope":522,"src":"5039:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"5039:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"to","nameLocation":"5069:2:2","nodeType":"VariableDeclaration","scope":522,"src":"5061:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"tokenId","nameLocation":"5089:7:2","nodeType":"VariableDeclaration","scope":522,"src":"5081:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":509,"name":"uint256","nodeType":"ElementaryTypeName","src":"5081:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5029:73:2"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[],"src":"5127:0:2"},"scope":1093,"src":"5004:179:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1154],"body":{"id":551,"nodeType":"Block","src":"5399:164:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":537,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"5436:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5436:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":539,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"5450:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":536,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"5417:18:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5417:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5460:47:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":535,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5409:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5409:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":543,"nodeType":"ExpressionStatement","src":"5409:99:2"},{"expression":{"arguments":[{"id":545,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"5532:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":546,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"5538:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":547,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":529,"src":"5542:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":548,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"5551:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":544,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"5518:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5518:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":550,"nodeType":"ExpressionStatement","src":"5518:38:2"}]},"documentation":{"id":523,"nodeType":"StructuredDocumentation","src":"5189:55:2","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":552,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5258:16:2","nodeType":"FunctionDefinition","overrides":{"id":533,"nodeType":"OverrideSpecifier","overrides":[],"src":"5390:8:2"},"parameters":{"id":532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":525,"mutability":"mutable","name":"from","nameLocation":"5292:4:2","nodeType":"VariableDeclaration","scope":552,"src":"5284:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":524,"name":"address","nodeType":"ElementaryTypeName","src":"5284:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"to","nameLocation":"5314:2:2","nodeType":"VariableDeclaration","scope":552,"src":"5306:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"5306:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"tokenId","nameLocation":"5334:7:2","nodeType":"VariableDeclaration","scope":552,"src":"5326:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":528,"name":"uint256","nodeType":"ElementaryTypeName","src":"5326:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"data","nameLocation":"5364:4:2","nodeType":"VariableDeclaration","scope":552,"src":"5351:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":530,"name":"bytes","nodeType":"ElementaryTypeName","src":"5351:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5274:100:2"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[],"src":"5399:0:2"},"scope":1093,"src":"5249:314:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":580,"nodeType":"Block","src":"6564:165:2","statements":[{"expression":{"arguments":[{"id":565,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"6584:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":566,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6590:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":567,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"6594:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":564,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"6574:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6574:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":569,"nodeType":"ExpressionStatement","src":"6574:28:2"},{"expression":{"arguments":[{"arguments":[{"id":572,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"6643:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":573,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":557,"src":"6649:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":574,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"6653:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":575,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"6662:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":571,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6620:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6620:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6669:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":570,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6612:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6612:110:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":579,"nodeType":"ExpressionStatement","src":"6612:110:2"}]},"documentation":{"id":553,"nodeType":"StructuredDocumentation","src":"5569:850:2","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":581,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6433:13:2","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"from","nameLocation":"6464:4:2","nodeType":"VariableDeclaration","scope":581,"src":"6456:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":554,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":557,"mutability":"mutable","name":"to","nameLocation":"6486:2:2","nodeType":"VariableDeclaration","scope":581,"src":"6478:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"6478:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":559,"mutability":"mutable","name":"tokenId","nameLocation":"6506:7:2","nodeType":"VariableDeclaration","scope":581,"src":"6498:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":558,"name":"uint256","nodeType":"ElementaryTypeName","src":"6498:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"data","nameLocation":"6536:4:2","nodeType":"VariableDeclaration","scope":581,"src":"6523:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":560,"name":"bytes","nodeType":"ElementaryTypeName","src":"6523:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6446:100:2"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"6564:0:2"},"scope":1093,"src":"6424:305:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":593,"nodeType":"Block","src":"6913:40:2","statements":[{"expression":{"baseExpression":{"id":589,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"6930:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":591,"indexExpression":{"id":590,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"6938:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6930:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":588,"id":592,"nodeType":"Return","src":"6923:23:2"}]},"documentation":{"id":582,"nodeType":"StructuredDocumentation","src":"6735:98:2","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":594,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6847:8:2","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"tokenId","nameLocation":"6864:7:2","nodeType":"VariableDeclaration","scope":594,"src":"6856:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"6856:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6855:17:2"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":594,"src":"6904:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":586,"name":"address","nodeType":"ElementaryTypeName","src":"6904:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6903:9:2"},"scope":1093,"src":"6838:115:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":611,"nodeType":"Block","src":"7327:55:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":603,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"7353:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":602,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"7344:8:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7344:17:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7373:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7365:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"7365:7:2","typeDescriptions":{}}},"id":608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7365:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7344:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":601,"id":610,"nodeType":"Return","src":"7337:38:2"}]},"documentation":{"id":595,"nodeType":"StructuredDocumentation","src":"6959:292:2","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":612,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7265:7:2","nodeType":"FunctionDefinition","parameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"tokenId","nameLocation":"7281:7:2","nodeType":"VariableDeclaration","scope":612,"src":"7273:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":596,"name":"uint256","nodeType":"ElementaryTypeName","src":"7273:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7272:17:2"},"returnParameters":{"id":601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":612,"src":"7321:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":599,"name":"bool","nodeType":"ElementaryTypeName","src":"7321:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7320:6:2"},"scope":1093,"src":"7256:126:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":645,"nodeType":"Block","src":"7639:162:2","statements":[{"assignments":[623],"declarations":[{"constant":false,"id":623,"mutability":"mutable","name":"owner","nameLocation":"7657:5:2","nodeType":"VariableDeclaration","scope":645,"src":"7649:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"7649:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":628,"initialValue":{"arguments":[{"id":626,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"7680:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":624,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"7665:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1093_$","typeString":"type(contract ERC721)"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"7665:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7665:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7649:39:2"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":629,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7706:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":630,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"7717:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":633,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"7743:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":634,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7750:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":632,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"7726:16:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7726:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:52:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":638,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":617,"src":"7774:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":637,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"7762:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7762:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":640,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7786:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7762:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7706:87:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":643,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7705:89:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":621,"id":644,"nodeType":"Return","src":"7698:96:2"}]},"documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"7388:147:2","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":646,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7549:18:2","nodeType":"FunctionDefinition","parameters":{"id":618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":615,"mutability":"mutable","name":"spender","nameLocation":"7576:7:2","nodeType":"VariableDeclaration","scope":646,"src":"7568:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":614,"name":"address","nodeType":"ElementaryTypeName","src":"7568:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":617,"mutability":"mutable","name":"tokenId","nameLocation":"7593:7:2","nodeType":"VariableDeclaration","scope":646,"src":"7585:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":616,"name":"uint256","nodeType":"ElementaryTypeName","src":"7585:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7567:34:2"},"returnParameters":{"id":621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":620,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"7633:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":619,"name":"bool","nodeType":"ElementaryTypeName","src":"7633:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7632:6:2"},"scope":1093,"src":"7540:261:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":660,"nodeType":"Block","src":"8196:43:2","statements":[{"expression":{"arguments":[{"id":655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"8216:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"8220:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8229:2:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":654,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[661,690],"referencedDeclaration":690,"src":"8206:9:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8206:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":659,"nodeType":"ExpressionStatement","src":"8206:26:2"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"7807:319:2","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":661,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8140:9:2","nodeType":"FunctionDefinition","parameters":{"id":652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":649,"mutability":"mutable","name":"to","nameLocation":"8158:2:2","nodeType":"VariableDeclaration","scope":661,"src":"8150:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":648,"name":"address","nodeType":"ElementaryTypeName","src":"8150:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":651,"mutability":"mutable","name":"tokenId","nameLocation":"8170:7:2","nodeType":"VariableDeclaration","scope":661,"src":"8162:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":650,"name":"uint256","nodeType":"ElementaryTypeName","src":"8162:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8149:29:2"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[],"src":"8196:0:2"},"scope":1093,"src":"8131:108:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":689,"nodeType":"Block","src":"8574:195:2","statements":[{"expression":{"arguments":[{"id":672,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"8590:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":673,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"8594:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":671,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":767,"src":"8584:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8584:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":675,"nodeType":"ExpressionStatement","src":"8584:18:2"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8664:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8656:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"8656:7:2","typeDescriptions":{}}},"id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8656:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":682,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":664,"src":"8668:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":683,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":666,"src":"8672:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":684,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"8681:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":677,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"8633:22:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8633:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8700:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":676,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8612:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8612:150:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":688,"nodeType":"ExpressionStatement","src":"8612:150:2"}]},"documentation":{"id":662,"nodeType":"StructuredDocumentation","src":"8245:210:2","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":690,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8469:9:2","nodeType":"FunctionDefinition","parameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":664,"mutability":"mutable","name":"to","nameLocation":"8496:2:2","nodeType":"VariableDeclaration","scope":690,"src":"8488:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"8488:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":666,"mutability":"mutable","name":"tokenId","nameLocation":"8516:7:2","nodeType":"VariableDeclaration","scope":690,"src":"8508:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":665,"name":"uint256","nodeType":"ElementaryTypeName","src":"8508:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":668,"mutability":"mutable","name":"data","nameLocation":"8546:4:2","nodeType":"VariableDeclaration","scope":690,"src":"8533:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":667,"name":"bytes","nodeType":"ElementaryTypeName","src":"8533:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8478:78:2"},"returnParameters":{"id":670,"nodeType":"ParameterList","parameters":[],"src":"8574:0:2"},"scope":1093,"src":"8460:309:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":766,"nodeType":"Block","src":"9152:859:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":699,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9170:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9184:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":701,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9176:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"9176:7:2","typeDescriptions":{}}},"id":703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9176:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9170:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9188:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":698,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9162:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9162:61:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":707,"nodeType":"ExpressionStatement","src":"9162:61:2"},{"expression":{"arguments":[{"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9241:17:2","subExpression":{"arguments":[{"id":710,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9250:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":709,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"9242:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9242:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9260:30:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":708,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9233:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9233:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":715,"nodeType":"ExpressionStatement","src":"9233:58:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9331:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":718,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9323:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":717,"name":"address","nodeType":"ElementaryTypeName","src":"9323:7:2","typeDescriptions":{}}},"id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9323:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":721,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9335:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":722,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9339:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9348:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":716,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"9302:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9302:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":725,"nodeType":"ExpressionStatement","src":"9302:48:2"},{"expression":{"arguments":[{"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9445:17:2","subExpression":{"arguments":[{"id":728,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9454:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":727,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"9446:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9446:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9464:30:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":726,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9437:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9437:58:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":733,"nodeType":"ExpressionStatement","src":"9437:58:2"},{"id":740,"nodeType":"UncheckedBlock","src":"9506:360:2","statements":[{"expression":{"id":738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":734,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"9837:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":736,"indexExpression":{"id":735,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9847:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9837:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9854:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9837:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":739,"nodeType":"ExpressionStatement","src":"9837:18:2"}]},{"expression":{"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":741,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"9876:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":743,"indexExpression":{"id":742,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9884:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9876:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":744,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9895:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9876:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":746,"nodeType":"ExpressionStatement","src":"9876:21:2"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9930:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9922:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"9922:7:2","typeDescriptions":{}}},"id":751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9922:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":752,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9934:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":753,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9938:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":747,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"9913:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9913:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"EmitStatement","src":"9908:38:2"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9985:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":758,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9977:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":757,"name":"address","nodeType":"ElementaryTypeName","src":"9977:7:2","typeDescriptions":{}}},"id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9977:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":761,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9989:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":762,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":695,"src":"9993:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":756,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"9957:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9957:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":765,"nodeType":"ExpressionStatement","src":"9957:47:2"}]},"documentation":{"id":691,"nodeType":"StructuredDocumentation","src":"8775:311:2","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":767,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"9100:5:2","nodeType":"FunctionDefinition","parameters":{"id":696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":693,"mutability":"mutable","name":"to","nameLocation":"9114:2:2","nodeType":"VariableDeclaration","scope":767,"src":"9106:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":692,"name":"address","nodeType":"ElementaryTypeName","src":"9106:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":695,"mutability":"mutable","name":"tokenId","nameLocation":"9126:7:2","nodeType":"VariableDeclaration","scope":767,"src":"9118:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":694,"name":"uint256","nodeType":"ElementaryTypeName","src":"9118:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9105:29:2"},"returnParameters":{"id":697,"nodeType":"ParameterList","parameters":[],"src":"9152:0:2"},"scope":1093,"src":"9091:920:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":833,"nodeType":"Block","src":"10386:713:2","statements":[{"assignments":[774],"declarations":[{"constant":false,"id":774,"mutability":"mutable","name":"owner","nameLocation":"10404:5:2","nodeType":"VariableDeclaration","scope":833,"src":"10396:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":773,"name":"address","nodeType":"ElementaryTypeName","src":"10396:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":779,"initialValue":{"arguments":[{"id":777,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10427:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":775,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"10412:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1093_$","typeString":"type(contract ERC721)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"10412:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10412:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10396:39:2"},{"expression":{"arguments":[{"id":781,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10467:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10482:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10474:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":782,"name":"address","nodeType":"ElementaryTypeName","src":"10474:7:2","typeDescriptions":{}}},"id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10474:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":786,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10486:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10495:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":780,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"10446:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10446:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":789,"nodeType":"ExpressionStatement","src":"10446:51:2"},{"expression":{"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":790,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10599:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10622:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":791,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"10607:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1093_$","typeString":"type(contract ERC721)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"10607:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10607:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10599:31:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":796,"nodeType":"ExpressionStatement","src":"10599:31:2"},{"expression":{"id":800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10668:31:2","subExpression":{"baseExpression":{"id":797,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"10675:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":799,"indexExpression":{"id":798,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10691:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10675:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":801,"nodeType":"ExpressionStatement","src":"10668:31:2"},{"id":808,"nodeType":"UncheckedBlock","src":"10710:237:2","statements":[{"expression":{"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":802,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"10915:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":804,"indexExpression":{"id":803,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"10925:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10915:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10935:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10915:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":807,"nodeType":"ExpressionStatement","src":"10915:21:2"}]},{"expression":{"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10956:23:2","subExpression":{"baseExpression":{"id":809,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"10963:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":811,"indexExpression":{"id":810,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"10971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10963:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":813,"nodeType":"ExpressionStatement","src":"10956:23:2"},{"eventCall":{"arguments":[{"id":815,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"11004:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11019:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11011:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":816,"name":"address","nodeType":"ElementaryTypeName","src":"11011:7:2","typeDescriptions":{}}},"id":819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11011:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":820,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"11023:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":814,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"10995:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10995:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":822,"nodeType":"EmitStatement","src":"10990:41:2"},{"expression":{"arguments":[{"id":824,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"11062:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11077:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":826,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11069:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"11069:7:2","typeDescriptions":{}}},"id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11069:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":829,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"11081:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11090:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":823,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"11042:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11042:50:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":832,"nodeType":"ExpressionStatement","src":"11042:50:2"}]},"documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"10017:315:2","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":834,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10346:5:2","nodeType":"FunctionDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[{"constant":false,"id":770,"mutability":"mutable","name":"tokenId","nameLocation":"10360:7:2","nodeType":"VariableDeclaration","scope":834,"src":"10352:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"10352:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10351:17:2"},"returnParameters":{"id":772,"nodeType":"ParameterList","parameters":[],"src":"10386:0:2"},"scope":1093,"src":"10337:762:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":918,"nodeType":"Block","src":"11532:1124:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":847,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"11565:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":845,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"11550:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1093_$","typeString":"type(contract ERC721)"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"11550:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11550:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":849,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"11577:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11550:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11583:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":844,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11542:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11542:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":853,"nodeType":"ExpressionStatement","src":"11542:81:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":855,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"11641:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11655:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":857,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11647:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":856,"name":"address","nodeType":"ElementaryTypeName","src":"11647:7:2","typeDescriptions":{}}},"id":859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11647:10:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11641:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11659:38:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":854,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11633:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11633:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"11633:65:2"},{"expression":{"arguments":[{"id":865,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"11730:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":866,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"11736:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":867,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"11740:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11749:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":864,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"11709:20:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11709:42:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":870,"nodeType":"ExpressionStatement","src":"11709:42:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":874,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"11866:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":872,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"11851:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1093_$","typeString":"type(contract ERC721)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"11851:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11851:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":876,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"11878:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11851:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11884:39:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":871,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11843:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11843:81:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"ExpressionStatement","src":"11843:81:2"},{"expression":{"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11986:31:2","subExpression":{"baseExpression":{"id":881,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"11993:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":883,"indexExpression":{"id":882,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12009:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11993:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":885,"nodeType":"ExpressionStatement","src":"11986:31:2"},{"id":898,"nodeType":"UncheckedBlock","src":"12028:496:2","statements":[{"expression":{"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":886,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"12461:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":888,"indexExpression":{"id":887,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"12471:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12461:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12480:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12461:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":891,"nodeType":"ExpressionStatement","src":"12461:20:2"},{"expression":{"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":892,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"12495:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":894,"indexExpression":{"id":893,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12505:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12495:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12512:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12495:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":897,"nodeType":"ExpressionStatement","src":"12495:18:2"}]},{"expression":{"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":899,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"12533:7:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":901,"indexExpression":{"id":900,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12541:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12533:16:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":902,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12552:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12533:21:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":904,"nodeType":"ExpressionStatement","src":"12533:21:2"},{"eventCall":{"arguments":[{"id":906,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"12579:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":907,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12585:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":908,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12589:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":905,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"12570:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":909,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12570:27:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":910,"nodeType":"EmitStatement","src":"12565:32:2"},{"expression":{"arguments":[{"id":912,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"12628:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":913,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"12634:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":914,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"12638:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12647:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":911,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"12608:19:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12608:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":917,"nodeType":"ExpressionStatement","src":"12608:41:2"}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"11105:313:2","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":919,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11432:9:2","nodeType":"FunctionDefinition","parameters":{"id":842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"from","nameLocation":"11459:4:2","nodeType":"VariableDeclaration","scope":919,"src":"11451:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"to","nameLocation":"11481:2:2","nodeType":"VariableDeclaration","scope":919,"src":"11473:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"11473:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"tokenId","nameLocation":"11501:7:2","nodeType":"VariableDeclaration","scope":919,"src":"11493:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"11493:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11441:73:2"},"returnParameters":{"id":843,"nodeType":"ParameterList","parameters":[],"src":"11532:0:2"},"scope":1093,"src":"11423:1233:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":942,"nodeType":"Block","src":"12832:107:2","statements":[{"expression":{"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":927,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"12842:15:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":929,"indexExpression":{"id":928,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"12858:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12842:24:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":930,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"12869:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12842:29:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":932,"nodeType":"ExpressionStatement","src":"12842:29:2"},{"eventCall":{"arguments":[{"arguments":[{"id":936,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"12910:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":934,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"12895:6:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$1093_$","typeString":"type(contract ERC721)"}},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":312,"src":"12895:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12895:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":938,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"12920:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":939,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"12924:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":933,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"12886:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12886:46:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":941,"nodeType":"EmitStatement","src":"12881:51:2"}]},"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"12662:101:2","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":943,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12777:8:2","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"to","nameLocation":"12794:2:2","nodeType":"VariableDeclaration","scope":943,"src":"12786:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":921,"name":"address","nodeType":"ElementaryTypeName","src":"12786:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"tokenId","nameLocation":"12806:7:2","nodeType":"VariableDeclaration","scope":943,"src":"12798:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"12798:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12785:29:2"},"returnParameters":{"id":926,"nodeType":"ParameterList","parameters":[],"src":"12832:0:2"},"scope":1093,"src":"12768:171:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":974,"nodeType":"Block","src":"13198:184:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":954,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"13216:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":955,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"13225:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13216:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":957,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13235:27:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":953,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13208:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13208:55:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"13208:55:2"},{"expression":{"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":960,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"13273:18:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":963,"indexExpression":{"id":961,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"13292:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13273:25:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":964,"indexExpression":{"id":962,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"13299:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13273:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":965,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"13311:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13273:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":967,"nodeType":"ExpressionStatement","src":"13273:46:2"},{"eventCall":{"arguments":[{"id":969,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"13349:5:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":970,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"13356:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":971,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"13366:8:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":968,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"13334:14:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13334:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":973,"nodeType":"EmitStatement","src":"13329:46:2"}]},"documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"12945:125:2","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":975,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"13084:18:2","nodeType":"FunctionDefinition","parameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"owner","nameLocation":"13120:5:2","nodeType":"VariableDeclaration","scope":975,"src":"13112:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"13112:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"operator","nameLocation":"13143:8:2","nodeType":"VariableDeclaration","scope":975,"src":"13135:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"13135:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":950,"mutability":"mutable","name":"approved","nameLocation":"13166:8:2","nodeType":"VariableDeclaration","scope":975,"src":"13161:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":949,"name":"bool","nodeType":"ElementaryTypeName","src":"13161:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13102:78:2"},"returnParameters":{"id":952,"nodeType":"ParameterList","parameters":[],"src":"13198:0:2"},"scope":1093,"src":"13075:307:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":988,"nodeType":"Block","src":"13529:70:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":983,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"13555:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":982,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"13547:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13547:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13565:26:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":981,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13539:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13539:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":987,"nodeType":"ExpressionStatement","src":"13539:53:2"}]},"documentation":{"id":976,"nodeType":"StructuredDocumentation","src":"13388:73:2","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":989,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13475:14:2","nodeType":"FunctionDefinition","parameters":{"id":979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":978,"mutability":"mutable","name":"tokenId","nameLocation":"13498:7:2","nodeType":"VariableDeclaration","scope":989,"src":"13490:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":977,"name":"uint256","nodeType":"ElementaryTypeName","src":"13490:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13489:17:2"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[],"src":"13529:0:2"},"scope":1093,"src":"13466:133:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1050,"nodeType":"Block","src":"14306:676:2","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1003,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"14320:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"14320:13:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14320:15:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1048,"nodeType":"Block","src":"14940:36:2","statements":[{"expression":{"hexValue":"74727565","id":1046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14961:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1002,"id":1047,"nodeType":"Return","src":"14954:11:2"}]},"id":1049,"nodeType":"IfStatement","src":"14316:660:2","trueBody":{"id":1045,"nodeType":"Block","src":"14337:597:2","statements":[{"clauses":[{"block":{"id":1025,"nodeType":"Block","src":"14451:91:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1019,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1017,"src":"14476:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1020,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"14486:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1227_$","typeString":"type(contract IERC721Receiver)"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1226,"src":"14486:32:2","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"14486:41:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14476:51:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1002,"id":1024,"nodeType":"Return","src":"14469:58:2"}]},"errorName":"","id":1026,"nodeType":"TryCatchClause","parameters":{"id":1018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1017,"mutability":"mutable","name":"retval","nameLocation":"14443:6:2","nodeType":"VariableDeclaration","scope":1026,"src":"14436:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1016,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14436:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14435:15:2"},"src":"14427:115:2"},{"block":{"id":1042,"nodeType":"Block","src":"14571:353:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1030,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"14593:6:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"14593:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14610:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14593:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1040,"nodeType":"Block","src":"14720:190:2","statements":[{"AST":{"nodeType":"YulBlock","src":"14806:86:2","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14843:2:2","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14847:6:2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:2"},"nodeType":"YulFunctionCall","src":"14839:15:2"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14862:6:2"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14856:5:2"},"nodeType":"YulFunctionCall","src":"14856:13:2"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14832:6:2"},"nodeType":"YulFunctionCall","src":"14832:38:2"},"nodeType":"YulExpressionStatement","src":"14832:38:2"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1028,"isOffset":false,"isSlot":false,"src":"14847:6:2","valueSize":1},{"declaration":1028,"isOffset":false,"isSlot":false,"src":"14862:6:2","valueSize":1}],"id":1039,"nodeType":"InlineAssembly","src":"14797:95:2"}]},"id":1041,"nodeType":"IfStatement","src":"14589:321:2","trueBody":{"id":1038,"nodeType":"Block","src":"14613:101:2","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14642:52:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1034,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14635:6:2","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14635:60:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1037,"nodeType":"ExpressionStatement","src":"14635:60:2"}]}}]},"errorName":"","id":1043,"nodeType":"TryCatchClause","parameters":{"id":1029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1028,"mutability":"mutable","name":"reason","nameLocation":"14563:6:2","nodeType":"VariableDeclaration","scope":1043,"src":"14550:19:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1027,"name":"bytes","nodeType":"ElementaryTypeName","src":"14550:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14549:21:2"},"src":"14543:381:2"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1010,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"14392:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14392:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1012,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"14406:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1013,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"14412:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1014,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"14421:4:2","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1007,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"14371:2:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1006,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"14355:15:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1227_$","typeString":"type(contract IERC721Receiver)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1227","typeString":"contract IERC721Receiver"}},"id":1009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1226,"src":"14355:36:2","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"14355:71:2","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1044,"nodeType":"TryStatement","src":"14351:573:2"}]}}]},"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"13605:541:2","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1051,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"14160:22:2","nodeType":"FunctionDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"from","nameLocation":"14200:4:2","nodeType":"VariableDeclaration","scope":1051,"src":"14192:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"14192:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"to","nameLocation":"14222:2:2","nodeType":"VariableDeclaration","scope":1051,"src":"14214:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":993,"name":"address","nodeType":"ElementaryTypeName","src":"14214:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"tokenId","nameLocation":"14242:7:2","nodeType":"VariableDeclaration","scope":1051,"src":"14234:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":995,"name":"uint256","nodeType":"ElementaryTypeName","src":"14234:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":998,"mutability":"mutable","name":"data","nameLocation":"14272:4:2","nodeType":"VariableDeclaration","scope":1051,"src":"14259:17:2","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":997,"name":"bytes","nodeType":"ElementaryTypeName","src":"14259:5:2","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14182:100:2"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1051,"src":"14300:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1000,"name":"bool","nodeType":"ElementaryTypeName","src":"14300:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14299:6:2"},"scope":1093,"src":"14151:831:2","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1063,"nodeType":"Block","src":"15850:2:2","statements":[]},"documentation":{"id":1052,"nodeType":"StructuredDocumentation","src":"14988:705:2","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1064,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15707:20:2","nodeType":"FunctionDefinition","parameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1054,"mutability":"mutable","name":"from","nameLocation":"15745:4:2","nodeType":"VariableDeclaration","scope":1064,"src":"15737:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1053,"name":"address","nodeType":"ElementaryTypeName","src":"15737:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1056,"mutability":"mutable","name":"to","nameLocation":"15767:2:2","nodeType":"VariableDeclaration","scope":1064,"src":"15759:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1055,"name":"address","nodeType":"ElementaryTypeName","src":"15759:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1058,"mutability":"mutable","name":"firstTokenId","nameLocation":"15787:12:2","nodeType":"VariableDeclaration","scope":1064,"src":"15779:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1057,"name":"uint256","nodeType":"ElementaryTypeName","src":"15779:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1060,"mutability":"mutable","name":"batchSize","nameLocation":"15817:9:2","nodeType":"VariableDeclaration","scope":1064,"src":"15809:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1059,"name":"uint256","nodeType":"ElementaryTypeName","src":"15809:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15727:105:2"},"returnParameters":{"id":1062,"nodeType":"ParameterList","parameters":[],"src":"15850:0:2"},"scope":1093,"src":"15698:154:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1076,"nodeType":"Block","src":"16709:2:2","statements":[]},"documentation":{"id":1065,"nodeType":"StructuredDocumentation","src":"15858:695:2","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1077,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16567:19:2","nodeType":"FunctionDefinition","parameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1067,"mutability":"mutable","name":"from","nameLocation":"16604:4:2","nodeType":"VariableDeclaration","scope":1077,"src":"16596:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1066,"name":"address","nodeType":"ElementaryTypeName","src":"16596:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1069,"mutability":"mutable","name":"to","nameLocation":"16626:2:2","nodeType":"VariableDeclaration","scope":1077,"src":"16618:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"16618:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1071,"mutability":"mutable","name":"firstTokenId","nameLocation":"16646:12:2","nodeType":"VariableDeclaration","scope":1077,"src":"16638:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1070,"name":"uint256","nodeType":"ElementaryTypeName","src":"16638:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1073,"mutability":"mutable","name":"batchSize","nameLocation":"16676:9:2","nodeType":"VariableDeclaration","scope":1077,"src":"16668:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"16668:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16586:105:2"},"returnParameters":{"id":1075,"nodeType":"ParameterList","parameters":[],"src":"16709:0:2"},"scope":1093,"src":"16558:153:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1091,"nodeType":"Block","src":"17260:45:2","statements":[{"expression":{"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1085,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":202,"src":"17270:9:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1087,"indexExpression":{"id":1086,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1080,"src":"17280:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"17270:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1088,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"17292:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17270:28:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1090,"nodeType":"ExpressionStatement","src":"17270:28:2"}]},"documentation":{"id":1078,"nodeType":"StructuredDocumentation","src":"16717:409:2","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n that `ownerOf(tokenId)` is `a`."},"id":1092,"implemented":true,"kind":"function","modifiers":[],"name":"__unsafe_increaseBalance","nameLocation":"17193:24:2","nodeType":"FunctionDefinition","parameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1080,"mutability":"mutable","name":"account","nameLocation":"17226:7:2","nodeType":"VariableDeclaration","scope":1092,"src":"17218:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1079,"name":"address","nodeType":"ElementaryTypeName","src":"17218:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1082,"mutability":"mutable","name":"amount","nameLocation":"17243:6:2","nodeType":"VariableDeclaration","scope":1092,"src":"17235:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"17235:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17217:33:2"},"returnParameters":{"id":1084,"nodeType":"ParameterList","parameters":[],"src":"17260:0:2"},"scope":1093,"src":"17184:121:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1094,"src":"628:16679:2","usedErrors":[]}],"src":"107:17201:2"},"id":2},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[2377],"IERC721":[1209]},"id":1210,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1095,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":1096,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1210,"sourceUnit":2378,"src":"133:47:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1098,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"271:7:3"},"id":1099,"nodeType":"InheritanceSpecifier","src":"271:7:3"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"182:67:3","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":1209,"linearizedBaseContracts":[1209,2377],"name":"IERC721","nameLocation":"260:7:3","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"285:88:3","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1108,"name":"Transfer","nameLocation":"384:8:3","nodeType":"EventDefinition","parameters":{"id":1107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1102,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:3","nodeType":"VariableDeclaration","scope":1108,"src":"393:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1101,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1104,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:3","nodeType":"VariableDeclaration","scope":1108,"src":"415:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1106,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:3","nodeType":"VariableDeclaration","scope":1108,"src":"435:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1105,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:3"},"src":"378:82:3"},{"anonymous":false,"documentation":{"id":1109,"nodeType":"StructuredDocumentation","src":"466:94:3","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1117,"name":"Approval","nameLocation":"571:8:3","nodeType":"EventDefinition","parameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1111,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:3","nodeType":"VariableDeclaration","scope":1117,"src":"580:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1110,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1113,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:3","nodeType":"VariableDeclaration","scope":1117,"src":"603:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1112,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1115,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:3","nodeType":"VariableDeclaration","scope":1117,"src":"629:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1114,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:3"},"src":"565:89:3"},{"anonymous":false,"documentation":{"id":1118,"nodeType":"StructuredDocumentation","src":"660:117:3","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1126,"name":"ApprovalForAll","nameLocation":"788:14:3","nodeType":"EventDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1120,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:3","nodeType":"VariableDeclaration","scope":1126,"src":"803:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:3","nodeType":"VariableDeclaration","scope":1126,"src":"826:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1121,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1124,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:3","nodeType":"VariableDeclaration","scope":1126,"src":"852:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1123,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:3"},"src":"782:85:3"},{"documentation":{"id":1127,"nodeType":"StructuredDocumentation","src":"873:76:3","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":1134,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:3","nodeType":"FunctionDefinition","parameters":{"id":1130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1129,"mutability":"mutable","name":"owner","nameLocation":"981:5:3","nodeType":"VariableDeclaration","scope":1134,"src":"973:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:3"},"returnParameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1132,"mutability":"mutable","name":"balance","nameLocation":"1019:7:3","nodeType":"VariableDeclaration","scope":1134,"src":"1011:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1131,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:3"},"scope":1209,"src":"954:74:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1135,"nodeType":"StructuredDocumentation","src":"1034:131:3","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":1142,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:3","nodeType":"FunctionDefinition","parameters":{"id":1138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1137,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:3","nodeType":"VariableDeclaration","scope":1142,"src":"1187:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1136,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:3"},"returnParameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"owner","nameLocation":"1235:5:3","nodeType":"VariableDeclaration","scope":1142,"src":"1227:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1139,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:3"},"scope":1209,"src":"1170:72:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1143,"nodeType":"StructuredDocumentation","src":"1248:556:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":1154,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:3","nodeType":"FunctionDefinition","parameters":{"id":1152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"from","nameLocation":"1852:4:3","nodeType":"VariableDeclaration","scope":1154,"src":"1844:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"1844:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"to","nameLocation":"1874:2:3","nodeType":"VariableDeclaration","scope":1154,"src":"1866:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1146,"name":"address","nodeType":"ElementaryTypeName","src":"1866:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1149,"mutability":"mutable","name":"tokenId","nameLocation":"1894:7:3","nodeType":"VariableDeclaration","scope":1154,"src":"1886:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1148,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1151,"mutability":"mutable","name":"data","nameLocation":"1926:4:3","nodeType":"VariableDeclaration","scope":1154,"src":"1911:19:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1150,"name":"bytes","nodeType":"ElementaryTypeName","src":"1911:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:102:3"},"returnParameters":{"id":1153,"nodeType":"ParameterList","parameters":[],"src":"1945:0:3"},"scope":1209,"src":"1809:137:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1155,"nodeType":"StructuredDocumentation","src":"1952:687:3","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":1164,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2653:16:3","nodeType":"FunctionDefinition","parameters":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1157,"mutability":"mutable","name":"from","nameLocation":"2687:4:3","nodeType":"VariableDeclaration","scope":1164,"src":"2679:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1156,"name":"address","nodeType":"ElementaryTypeName","src":"2679:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1159,"mutability":"mutable","name":"to","nameLocation":"2709:2:3","nodeType":"VariableDeclaration","scope":1164,"src":"2701:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1158,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1161,"mutability":"mutable","name":"tokenId","nameLocation":"2729:7:3","nodeType":"VariableDeclaration","scope":1164,"src":"2721:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1160,"name":"uint256","nodeType":"ElementaryTypeName","src":"2721:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2669:73:3"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[],"src":"2751:0:3"},"scope":1209,"src":"2644:108:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1165,"nodeType":"StructuredDocumentation","src":"2758:732:3","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1174,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3504:12:3","nodeType":"FunctionDefinition","parameters":{"id":1172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1167,"mutability":"mutable","name":"from","nameLocation":"3534:4:3","nodeType":"VariableDeclaration","scope":1174,"src":"3526:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1166,"name":"address","nodeType":"ElementaryTypeName","src":"3526:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1169,"mutability":"mutable","name":"to","nameLocation":"3556:2:3","nodeType":"VariableDeclaration","scope":1174,"src":"3548:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1168,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1171,"mutability":"mutable","name":"tokenId","nameLocation":"3576:7:3","nodeType":"VariableDeclaration","scope":1174,"src":"3568:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1170,"name":"uint256","nodeType":"ElementaryTypeName","src":"3568:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3516:73:3"},"returnParameters":{"id":1173,"nodeType":"ParameterList","parameters":[],"src":"3598:0:3"},"scope":1209,"src":"3495:104:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"3605:452:3","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1182,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4071:7:3","nodeType":"FunctionDefinition","parameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1177,"mutability":"mutable","name":"to","nameLocation":"4087:2:3","nodeType":"VariableDeclaration","scope":1182,"src":"4079:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1176,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1179,"mutability":"mutable","name":"tokenId","nameLocation":"4099:7:3","nodeType":"VariableDeclaration","scope":1182,"src":"4091:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1178,"name":"uint256","nodeType":"ElementaryTypeName","src":"4091:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4078:29:3"},"returnParameters":{"id":1181,"nodeType":"ParameterList","parameters":[],"src":"4116:0:3"},"scope":1209,"src":"4062:55:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1183,"nodeType":"StructuredDocumentation","src":"4123:309:3","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":1190,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4446:17:3","nodeType":"FunctionDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"operator","nameLocation":"4472:8:3","nodeType":"VariableDeclaration","scope":1190,"src":"4464:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1184,"name":"address","nodeType":"ElementaryTypeName","src":"4464:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1187,"mutability":"mutable","name":"_approved","nameLocation":"4487:9:3","nodeType":"VariableDeclaration","scope":1190,"src":"4482:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1186,"name":"bool","nodeType":"ElementaryTypeName","src":"4482:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4463:34:3"},"returnParameters":{"id":1189,"nodeType":"ParameterList","parameters":[],"src":"4506:0:3"},"scope":1209,"src":"4437:70:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1191,"nodeType":"StructuredDocumentation","src":"4513:139:3","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":1198,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4666:11:3","nodeType":"FunctionDefinition","parameters":{"id":1194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1193,"mutability":"mutable","name":"tokenId","nameLocation":"4686:7:3","nodeType":"VariableDeclaration","scope":1198,"src":"4678:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1192,"name":"uint256","nodeType":"ElementaryTypeName","src":"4678:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4677:17:3"},"returnParameters":{"id":1197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"operator","nameLocation":"4726:8:3","nodeType":"VariableDeclaration","scope":1198,"src":"4718:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"4718:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4717:18:3"},"scope":1209,"src":"4657:79:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1199,"nodeType":"StructuredDocumentation","src":"4742:138:3","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":1208,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4894:16:3","nodeType":"FunctionDefinition","parameters":{"id":1204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"owner","nameLocation":"4919:5:3","nodeType":"VariableDeclaration","scope":1208,"src":"4911:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1200,"name":"address","nodeType":"ElementaryTypeName","src":"4911:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1203,"mutability":"mutable","name":"operator","nameLocation":"4934:8:3","nodeType":"VariableDeclaration","scope":1208,"src":"4926:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"4926:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4910:33:3"},"returnParameters":{"id":1207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1208,"src":"4967:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1205,"name":"bool","nodeType":"ElementaryTypeName","src":"4967:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4966:6:3"},"scope":1209,"src":"4885:88:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1210,"src":"250:4725:3","usedErrors":[]}],"src":"108:4868:3"},"id":3},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1227]},"id":1228,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1211,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1212,"nodeType":"StructuredDocumentation","src":"141:152:4","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":1227,"linearizedBaseContracts":[1227],"name":"IERC721Receiver","nameLocation":"304:15:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1213,"nodeType":"StructuredDocumentation","src":"326:493:4","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":1226,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:4","nodeType":"FunctionDefinition","parameters":{"id":1222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"operator","nameLocation":"867:8:4","nodeType":"VariableDeclaration","scope":1226,"src":"859:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"from","nameLocation":"893:4:4","nodeType":"VariableDeclaration","scope":1226,"src":"885:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1216,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1219,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:4","nodeType":"VariableDeclaration","scope":1226,"src":"907:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1218,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1221,"mutability":"mutable","name":"data","nameLocation":"947:4:4","nodeType":"VariableDeclaration","scope":1226,"src":"932:19:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1220,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:4"},"returnParameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1226,"src":"976:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1223,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:4"},"scope":1227,"src":"824:160:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1228,"src":"294:692:4","usedErrors":[]}],"src":"116:871:4"},"id":4},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"Address":[1709],"Context":[1731],"ERC165":[2365],"ERC721":[1093],"ERC721URIStorage":[1352],"IERC165":[2377],"IERC721":[1209],"IERC721Metadata":[1379],"IERC721Receiver":[1227],"Math":[3242],"Strings":[1980]},"id":1353,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1229,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":1230,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1353,"sourceUnit":1094,"src":"153:23:5","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1232,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1093,"src":"286:6:5"},"id":1233,"nodeType":"InheritanceSpecifier","src":"286:6:5"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":1231,"nodeType":"StructuredDocumentation","src":"178:69:5","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":false,"id":1352,"linearizedBaseContracts":[1352,1093,1379,1209,2365,2377,1731],"name":"ERC721URIStorage","nameLocation":"266:16:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1236,"libraryName":{"id":1234,"name":"Strings","nodeType":"IdentifierPath","referencedDeclaration":1980,"src":"305:7:5"},"nodeType":"UsingForDirective","src":"299:26:5","typeName":{"id":1235,"name":"uint256","nodeType":"ElementaryTypeName","src":"317:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1240,"mutability":"mutable","name":"_tokenURIs","nameLocation":"405:10:5","nodeType":"VariableDeclaration","scope":1352,"src":"370:45:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":1239,"keyType":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"378:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"370:26:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueType":{"id":1238,"name":"string","nodeType":"ElementaryTypeName","src":"389:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[371],"body":{"id":1298,"nodeType":"Block","src":"570:520:5","statements":[{"expression":{"arguments":[{"id":1250,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"595:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1249,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"580:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"580:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1252,"nodeType":"ExpressionStatement","src":"580:23:5"},{"assignments":[1254],"declarations":[{"constant":false,"id":1254,"mutability":"mutable","name":"_tokenURI","nameLocation":"628:9:5","nodeType":"VariableDeclaration","scope":1298,"src":"614:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1253,"name":"string","nodeType":"ElementaryTypeName","src":"614:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1258,"initialValue":{"baseExpression":{"id":1255,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"640:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1257,"indexExpression":{"id":1256,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"651:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"640:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"614:45:5"},{"assignments":[1260],"declarations":[{"constant":false,"id":1260,"mutability":"mutable","name":"base","nameLocation":"683:4:5","nodeType":"VariableDeclaration","scope":1298,"src":"669:18:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1259,"name":"string","nodeType":"ElementaryTypeName","src":"669:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1263,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1261,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"690:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"690:10:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"669:31:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1266,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"779:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"773:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1264,"name":"bytes","nodeType":"ElementaryTypeName","src":"773:5:5","typeDescriptions":{}}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"773:11:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"773:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"795:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"773:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1274,"nodeType":"IfStatement","src":"769:70:5","trueBody":{"id":1273,"nodeType":"Block","src":"798:41:5","statements":[{"expression":{"id":1271,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"819:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1248,"id":1272,"nodeType":"Return","src":"812:16:5"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1277,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"947:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"941:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1275,"name":"bytes","nodeType":"ElementaryTypeName","src":"941:5:5","typeDescriptions":{}}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"941:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"941:23:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"967:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"941:27:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1292,"nodeType":"IfStatement","src":"937:106:5","trueBody":{"id":1291,"nodeType":"Block","src":"970:73:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1286,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1260,"src":"1015:4:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1287,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"1021:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1284,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"998:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"998:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"998:33:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"991:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1282,"name":"string","nodeType":"ElementaryTypeName","src":"991:6:5","typeDescriptions":{}}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"991:41:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1248,"id":1290,"nodeType":"Return","src":"984:48:5"}]}},{"expression":{"arguments":[{"id":1295,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"1075:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1293,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1060:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1352_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":371,"src":"1060:14:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1060:23:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1248,"id":1297,"nodeType":"Return","src":"1053:30:5"}]},"documentation":{"id":1241,"nodeType":"StructuredDocumentation","src":"422:55:5","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1299,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"491:8:5","nodeType":"FunctionDefinition","overrides":{"id":1245,"nodeType":"OverrideSpecifier","overrides":[],"src":"537:8:5"},"parameters":{"id":1244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"tokenId","nameLocation":"508:7:5","nodeType":"VariableDeclaration","scope":1299,"src":"500:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"500:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"499:17:5"},"returnParameters":{"id":1248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1247,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1299,"src":"555:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1246,"name":"string","nodeType":"ElementaryTypeName","src":"555:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"554:15:5"},"scope":1352,"src":"482:608:5","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1320,"nodeType":"Block","src":"1318:133:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1309,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"1344:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1308,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"1336:7:5","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1336:16:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e","id":1311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1354:48:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""},"value":"ERC721URIStorage: URI set of nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""}],"id":1307,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1328:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1328:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1313,"nodeType":"ExpressionStatement","src":"1328:75:5"},{"expression":{"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1314,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1413:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1316,"indexExpression":{"id":1315,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"1424:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1413:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1317,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"1435:9:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1413:31:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1319,"nodeType":"ExpressionStatement","src":"1413:31:5"}]},"documentation":{"id":1300,"nodeType":"StructuredDocumentation","src":"1096:136:5","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":1321,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1246:12:5","nodeType":"FunctionDefinition","parameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1302,"mutability":"mutable","name":"tokenId","nameLocation":"1267:7:5","nodeType":"VariableDeclaration","scope":1321,"src":"1259:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1301,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1304,"mutability":"mutable","name":"_tokenURI","nameLocation":"1290:9:5","nodeType":"VariableDeclaration","scope":1321,"src":"1276:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1303,"name":"string","nodeType":"ElementaryTypeName","src":"1276:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1258:42:5"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"1318:0:5"},"scope":1352,"src":"1237:214:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[834],"body":{"id":1350,"nodeType":"Block","src":"1727:142:5","statements":[{"expression":{"arguments":[{"id":1331,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"1749:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1328,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1737:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$1352_$","typeString":"type(contract super ERC721URIStorage)"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":834,"src":"1737:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1737:20:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1333,"nodeType":"ExpressionStatement","src":"1737:20:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"baseExpression":{"id":1336,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1778:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1338,"indexExpression":{"id":1337,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"1789:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1778:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":1335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1772:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1334,"name":"bytes","nodeType":"ElementaryTypeName","src":"1772:5:5","typeDescriptions":{}}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1772:26:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1772:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1809:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1772:38:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1349,"nodeType":"IfStatement","src":"1768:95:5","trueBody":{"id":1348,"nodeType":"Block","src":"1812:51:5","statements":[{"expression":{"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1826:26:5","subExpression":{"baseExpression":{"id":1343,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1833:10:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":1345,"indexExpression":{"id":1344,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"1844:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1833:19:5","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1347,"nodeType":"ExpressionStatement","src":"1826:26:5"}]}}]},"documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"1457:207:5","text":" @dev See {ERC721-_burn}. This override additionally checks to see if a\n token-specific URI was set for the token, and if so, it deletes the token URI from\n the storage mapping."},"id":1351,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"1678:5:5","nodeType":"FunctionDefinition","overrides":{"id":1326,"nodeType":"OverrideSpecifier","overrides":[],"src":"1718:8:5"},"parameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"tokenId","nameLocation":"1692:7:5","nodeType":"VariableDeclaration","scope":1351,"src":"1684:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1323,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:17:5"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[],"src":"1727:0:5"},"scope":1352,"src":"1669:200:5","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1353,"src":"248:1623:5","usedErrors":[]}],"src":"128:1744:5"},"id":5},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[2377],"IERC721":[1209],"IERC721Metadata":[1379]},"id":1380,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1354,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":1355,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1380,"sourceUnit":1210,"src":"137:24:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1357,"name":"IERC721","nodeType":"IdentifierPath","referencedDeclaration":1209,"src":"326:7:6"},"id":1358,"nodeType":"InheritanceSpecifier","src":"326:7:6"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1356,"nodeType":"StructuredDocumentation","src":"163:133:6","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":1379,"linearizedBaseContracts":[1379,1209,2377],"name":"IERC721Metadata","nameLocation":"307:15:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1359,"nodeType":"StructuredDocumentation","src":"340:58:6","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":1364,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:6","nodeType":"FunctionDefinition","parameters":{"id":1360,"nodeType":"ParameterList","parameters":[],"src":"416:2:6"},"returnParameters":{"id":1363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1364,"src":"442:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1361,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:6"},"scope":1379,"src":"403:54:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1365,"nodeType":"StructuredDocumentation","src":"463:60:6","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":1370,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:6","nodeType":"FunctionDefinition","parameters":{"id":1366,"nodeType":"ParameterList","parameters":[],"src":"543:2:6"},"returnParameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1370,"src":"569:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1367,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:6"},"scope":1379,"src":"528:56:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1371,"nodeType":"StructuredDocumentation","src":"590:90:6","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":1378,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:6","nodeType":"FunctionDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1373,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:6","nodeType":"VariableDeclaration","scope":1378,"src":"703:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:6"},"returnParameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1378,"src":"743:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1375,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:6"},"scope":1379,"src":"685:73:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1380,"src":"297:463:6","usedErrors":[]}],"src":"112:649:6"},"id":6},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1709]},"id":1710,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1381,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"126:67:7","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1709,"linearizedBaseContracts":[1709],"name":"Address","nameLocation":"202:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1396,"nodeType":"Block","src":"1241:254:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1390,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"1465:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1465:12:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1465:19:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1389,"id":1395,"nodeType":"Return","src":"1458:30:7"}]},"documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"216:954:7","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1397,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:7","nodeType":"FunctionDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"account","nameLocation":"1203:7:7","nodeType":"VariableDeclaration","scope":1397,"src":"1195:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:7"},"returnParameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1397,"src":"1235:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1387,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:7"},"scope":1709,"src":"1175:320:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1430,"nodeType":"Block","src":"2483:241:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1408,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1709","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1709","typeString":"library Address"}],"id":1407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1406,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:7","typeDescriptions":{}}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2501:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2501:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1411,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"2526:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1405,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2493:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1415,"nodeType":"ExpressionStatement","src":"2493:73:7"},{"assignments":[1417,null],"declarations":[{"constant":false,"id":1417,"mutability":"mutable","name":"success","nameLocation":"2583:7:7","nodeType":"VariableDeclaration","scope":1430,"src":"2578:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1416,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1424,"initialValue":{"arguments":[{"hexValue":"","id":1422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1418,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"2596:9:7","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2596:14:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1420,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"2618:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2596:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:7"},{"expression":{"arguments":[{"id":1426,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1417,"src":"2647:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2639:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1429,"nodeType":"ExpressionStatement","src":"2639:78:7"}]},"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"1501:906:7","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1431,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:7","nodeType":"FunctionDefinition","parameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:7","nodeType":"VariableDeclaration","scope":1431,"src":"2431:25:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1399,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:7","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"amount","nameLocation":"2466:6:7","nodeType":"VariableDeclaration","scope":1431,"src":"2458:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:7"},"returnParameters":{"id":1404,"nodeType":"ParameterList","parameters":[],"src":"2483:0:7"},"scope":1709,"src":"2412:312:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1448,"nodeType":"Block","src":"3555:96:7","statements":[{"expression":{"arguments":[{"id":1442,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"3594:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1443,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"3602:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1441,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1489,1533],"referencedDeclaration":1533,"src":"3572:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3572:72:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1440,"id":1447,"nodeType":"Return","src":"3565:79:7"}]},"documentation":{"id":1432,"nodeType":"StructuredDocumentation","src":"2730:731:7","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1449,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:7","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1434,"mutability":"mutable","name":"target","nameLocation":"3496:6:7","nodeType":"VariableDeclaration","scope":1449,"src":"3488:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1433,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1436,"mutability":"mutable","name":"data","nameLocation":"3517:4:7","nodeType":"VariableDeclaration","scope":1449,"src":"3504:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1435,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:7"},"returnParameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1449,"src":"3541:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1438,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:7"},"scope":1709,"src":"3466:185:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1468,"nodeType":"Block","src":"4020:76:7","statements":[{"expression":{"arguments":[{"id":1462,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"4059:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1463,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"4067:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1465,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"4076:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1461,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1489,1533],"referencedDeclaration":1533,"src":"4037:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4037:52:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1460,"id":1467,"nodeType":"Return","src":"4030:59:7"}]},"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"3657:211:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1469,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:7","nodeType":"FunctionDefinition","parameters":{"id":1457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"target","nameLocation":"3912:6:7","nodeType":"VariableDeclaration","scope":1469,"src":"3904:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1451,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1454,"mutability":"mutable","name":"data","nameLocation":"3941:4:7","nodeType":"VariableDeclaration","scope":1469,"src":"3928:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1453,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1456,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:7","nodeType":"VariableDeclaration","scope":1469,"src":"3955:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1455,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:7"},"returnParameters":{"id":1460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1459,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1469,"src":"4006:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1458,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:7"},"scope":1709,"src":"3873:223:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1488,"nodeType":"Block","src":"4601:111:7","statements":[{"expression":{"arguments":[{"id":1482,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1472,"src":"4640:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1483,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"4648:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1476,"src":"4654:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1481,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1489,1533],"referencedDeclaration":1533,"src":"4618:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4618:87:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1480,"id":1487,"nodeType":"Return","src":"4611:94:7"}]},"documentation":{"id":1470,"nodeType":"StructuredDocumentation","src":"4102:351:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1489,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:7","nodeType":"FunctionDefinition","parameters":{"id":1477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1472,"mutability":"mutable","name":"target","nameLocation":"4506:6:7","nodeType":"VariableDeclaration","scope":1489,"src":"4498:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1471,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1474,"mutability":"mutable","name":"data","nameLocation":"4535:4:7","nodeType":"VariableDeclaration","scope":1489,"src":"4522:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1473,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1476,"mutability":"mutable","name":"value","nameLocation":"4557:5:7","nodeType":"VariableDeclaration","scope":1489,"src":"4549:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1475,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:7"},"returnParameters":{"id":1480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1479,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1489,"src":"4587:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1478,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:7"},"scope":1709,"src":"4458:254:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1532,"nodeType":"Block","src":"5139:267:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1506,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1709","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1709","typeString":"library Address"}],"id":1505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1504,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:7","typeDescriptions":{}}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5157:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5157:21:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1509,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"5182:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1503,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5149:81:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1513,"nodeType":"ExpressionStatement","src":"5149:81:7"},{"assignments":[1515,1517],"declarations":[{"constant":false,"id":1515,"mutability":"mutable","name":"success","nameLocation":"5246:7:7","nodeType":"VariableDeclaration","scope":1532,"src":"5241:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1514,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1517,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:7","nodeType":"VariableDeclaration","scope":1532,"src":"5255:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1516,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1524,"initialValue":{"arguments":[{"id":1522,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1494,"src":"5308:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1518,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5282:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5282:11:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1520,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1496,"src":"5301:5:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5282:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:7"},{"expression":{"arguments":[{"id":1526,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"5357:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1527,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1515,"src":"5365:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1528,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"5374:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1529,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1498,"src":"5386:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1525,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"5330:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5330:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1502,"id":1531,"nodeType":"Return","src":"5323:76:7"}]},"documentation":{"id":1490,"nodeType":"StructuredDocumentation","src":"4718:237:7","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1533,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:7","nodeType":"FunctionDefinition","parameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"target","nameLocation":"5008:6:7","nodeType":"VariableDeclaration","scope":1533,"src":"5000:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1491,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1494,"mutability":"mutable","name":"data","nameLocation":"5037:4:7","nodeType":"VariableDeclaration","scope":1533,"src":"5024:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1493,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1496,"mutability":"mutable","name":"value","nameLocation":"5059:5:7","nodeType":"VariableDeclaration","scope":1533,"src":"5051:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1495,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:7","nodeType":"VariableDeclaration","scope":1533,"src":"5074:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1497,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:7"},"returnParameters":{"id":1502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1501,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1533,"src":"5125:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1500,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:7"},"scope":1709,"src":"4960:446:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1549,"nodeType":"Block","src":"5683:97:7","statements":[{"expression":{"arguments":[{"id":1544,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"5719:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1545,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"5727:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1543,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1550,1579],"referencedDeclaration":1579,"src":"5700:18:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5700:73:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1542,"id":1548,"nodeType":"Return","src":"5693:80:7"}]},"documentation":{"id":1534,"nodeType":"StructuredDocumentation","src":"5412:166:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1550,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:7","nodeType":"FunctionDefinition","parameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1536,"mutability":"mutable","name":"target","nameLocation":"5619:6:7","nodeType":"VariableDeclaration","scope":1550,"src":"5611:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1535,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1538,"mutability":"mutable","name":"data","nameLocation":"5640:4:7","nodeType":"VariableDeclaration","scope":1550,"src":"5627:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1537,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:7"},"returnParameters":{"id":1542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1550,"src":"5669:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1540,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:7"},"scope":1709,"src":"5583:197:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1578,"nodeType":"Block","src":"6122:168:7","statements":[{"assignments":[1563,1565],"declarations":[{"constant":false,"id":1563,"mutability":"mutable","name":"success","nameLocation":"6138:7:7","nodeType":"VariableDeclaration","scope":1578,"src":"6133:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1562,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1565,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:7","nodeType":"VariableDeclaration","scope":1578,"src":"6147:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1564,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1570,"initialValue":{"arguments":[{"id":1568,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"6192:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1566,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"6174:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:7","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:7"},{"expression":{"arguments":[{"id":1572,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"6241:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1573,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"6249:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1574,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"6258:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1575,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"6270:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1571,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"6214:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6214:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1561,"id":1577,"nodeType":"Return","src":"6207:76:7"}]},"documentation":{"id":1551,"nodeType":"StructuredDocumentation","src":"5786:173:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1579,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:7","nodeType":"FunctionDefinition","parameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1553,"mutability":"mutable","name":"target","nameLocation":"6009:6:7","nodeType":"VariableDeclaration","scope":1579,"src":"6001:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1552,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1555,"mutability":"mutable","name":"data","nameLocation":"6038:4:7","nodeType":"VariableDeclaration","scope":1579,"src":"6025:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1554,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1557,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:7","nodeType":"VariableDeclaration","scope":1579,"src":"6052:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1556,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:7"},"returnParameters":{"id":1561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1579,"src":"6108:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1559,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:7"},"scope":1709,"src":"5964:326:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1595,"nodeType":"Block","src":"6566:101:7","statements":[{"expression":{"arguments":[{"id":1590,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"6604:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1591,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6612:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1589,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1596,1625],"referencedDeclaration":1625,"src":"6583:20:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6583:77:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1588,"id":1594,"nodeType":"Return","src":"6576:84:7"}]},"documentation":{"id":1580,"nodeType":"StructuredDocumentation","src":"6296:168:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1596,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:7","nodeType":"FunctionDefinition","parameters":{"id":1585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"target","nameLocation":"6507:6:7","nodeType":"VariableDeclaration","scope":1596,"src":"6499:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1581,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"data","nameLocation":"6528:4:7","nodeType":"VariableDeclaration","scope":1596,"src":"6515:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1583,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:7"},"returnParameters":{"id":1588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1596,"src":"6552:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1586,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:7"},"scope":1709,"src":"6469:198:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1624,"nodeType":"Block","src":"7008:170:7","statements":[{"assignments":[1609,1611],"declarations":[{"constant":false,"id":1609,"mutability":"mutable","name":"success","nameLocation":"7024:7:7","nodeType":"VariableDeclaration","scope":1624,"src":"7019:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1608,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1611,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:7","nodeType":"VariableDeclaration","scope":1624,"src":"7033:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1610,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1616,"initialValue":{"arguments":[{"id":1614,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"7080:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1612,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"7060:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:7","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7060:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:7"},{"expression":{"arguments":[{"id":1618,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1599,"src":"7129:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1619,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1609,"src":"7137:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1620,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1611,"src":"7146:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1621,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"7158:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1617,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"7102:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7102:69:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1607,"id":1623,"nodeType":"Return","src":"7095:76:7"}]},"documentation":{"id":1597,"nodeType":"StructuredDocumentation","src":"6673:175:7","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1625,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:7","nodeType":"FunctionDefinition","parameters":{"id":1604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1599,"mutability":"mutable","name":"target","nameLocation":"6900:6:7","nodeType":"VariableDeclaration","scope":1625,"src":"6892:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1598,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1601,"mutability":"mutable","name":"data","nameLocation":"6929:4:7","nodeType":"VariableDeclaration","scope":1625,"src":"6916:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1600,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1603,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:7","nodeType":"VariableDeclaration","scope":1625,"src":"6943:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1602,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:7"},"returnParameters":{"id":1607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1625,"src":"6994:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1605,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:7"},"scope":1709,"src":"6853:325:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1663,"nodeType":"Block","src":"7660:434:7","statements":[{"condition":{"id":1639,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"7674:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1661,"nodeType":"Block","src":"8030:58:7","statements":[{"expression":{"arguments":[{"id":1657,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"8052:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1658,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1634,"src":"8064:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1656,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"8044:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8044:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1660,"nodeType":"ExpressionStatement","src":"8044:33:7"}]},"id":1662,"nodeType":"IfStatement","src":"7670:418:7","trueBody":{"id":1655,"nodeType":"Block","src":"7683:341:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1640,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"7701:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7701:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1652,"nodeType":"IfStatement","src":"7697:286:7","trueBody":{"id":1651,"nodeType":"Block","src":"7725:258:7","statements":[{"expression":{"arguments":[{"arguments":[{"id":1646,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"7927:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1645,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"7916:10:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7916:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1644,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7908:60:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1650,"nodeType":"ExpressionStatement","src":"7908:60:7"}]}},{"expression":{"id":1653,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"8003:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1638,"id":1654,"nodeType":"Return","src":"7996:17:7"}]}}]},"documentation":{"id":1626,"nodeType":"StructuredDocumentation","src":"7184:277:7","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1664,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:7","nodeType":"FunctionDefinition","parameters":{"id":1635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1628,"mutability":"mutable","name":"target","nameLocation":"7519:6:7","nodeType":"VariableDeclaration","scope":1664,"src":"7511:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1627,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1630,"mutability":"mutable","name":"success","nameLocation":"7540:7:7","nodeType":"VariableDeclaration","scope":1664,"src":"7535:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1629,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1632,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:7","nodeType":"VariableDeclaration","scope":1664,"src":"7557:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1631,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1634,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:7","nodeType":"VariableDeclaration","scope":1664,"src":"7590:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1633,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:7"},"returnParameters":{"id":1638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1637,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1664,"src":"7646:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1636,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:7"},"scope":1709,"src":"7466:628:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1687,"nodeType":"Block","src":"8475:135:7","statements":[{"condition":{"id":1676,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1667,"src":"8489:7:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1685,"nodeType":"Block","src":"8546:58:7","statements":[{"expression":{"arguments":[{"id":1681,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"8568:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1682,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"8580:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1680,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1708,"src":"8560:7:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8560:33:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1684,"nodeType":"ExpressionStatement","src":"8560:33:7"}]},"id":1686,"nodeType":"IfStatement","src":"8485:119:7","trueBody":{"id":1679,"nodeType":"Block","src":"8498:42:7","statements":[{"expression":{"id":1677,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"8519:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1675,"id":1678,"nodeType":"Return","src":"8512:17:7"}]}}]},"documentation":{"id":1665,"nodeType":"StructuredDocumentation","src":"8100:210:7","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1688,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:7","nodeType":"FunctionDefinition","parameters":{"id":1672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1667,"mutability":"mutable","name":"success","nameLocation":"8355:7:7","nodeType":"VariableDeclaration","scope":1688,"src":"8350:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1666,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1669,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:7","nodeType":"VariableDeclaration","scope":1688,"src":"8372:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1668,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1671,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:7","nodeType":"VariableDeclaration","scope":1688,"src":"8405:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1670,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:7"},"returnParameters":{"id":1675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1674,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1688,"src":"8461:12:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1673,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:7"},"scope":1709,"src":"8315:295:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1707,"nodeType":"Block","src":"8699:457:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1695,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"8775:10:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"8775:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1705,"nodeType":"Block","src":"9105:45:7","statements":[{"expression":{"arguments":[{"id":1702,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1692,"src":"9126:12:7","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1701,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:7","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9119:20:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1704,"nodeType":"ExpressionStatement","src":"9119:20:7"}]},"id":1706,"nodeType":"IfStatement","src":"8771:379:7","trueBody":{"id":1700,"nodeType":"Block","src":"8798:301:7","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:7","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:7","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:7"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:7"},"nodeType":"YulFunctionCall","src":"8997:17:7"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:7","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:7","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:7"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:7"},"nodeType":"YulFunctionCall","src":"9038:19:7"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:7"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:7"},"nodeType":"YulFunctionCall","src":"9031:44:7"},"nodeType":"YulExpressionStatement","src":"9031:44:7"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1690,"isOffset":false,"isSlot":false,"src":"9003:10:7","valueSize":1},{"declaration":1690,"isOffset":false,"isSlot":false,"src":"9046:10:7","valueSize":1}],"id":1699,"nodeType":"InlineAssembly","src":"8947:142:7"}]}}]},"id":1708,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:7","nodeType":"FunctionDefinition","parameters":{"id":1693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1690,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:7","nodeType":"VariableDeclaration","scope":1708,"src":"8633:23:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1689,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:7","nodeType":"VariableDeclaration","scope":1708,"src":"8658:26:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1691,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:7","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:7"},"returnParameters":{"id":1694,"nodeType":"ParameterList","parameters":[],"src":"8699:0:7"},"scope":1709,"src":"8616:540:7","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1710,"src":"194:8964:7","usedErrors":[]}],"src":"101:9058:7"},"id":7},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1731]},"id":1732,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1711,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:8"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1712,"nodeType":"StructuredDocumentation","src":"111:496:8","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1731,"linearizedBaseContracts":[1731],"name":"Context","nameLocation":"626:7:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1720,"nodeType":"Block","src":"702:34:8","statements":[{"expression":{"expression":{"id":1717,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"719:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1716,"id":1719,"nodeType":"Return","src":"712:17:8"}]},"id":1721,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:8","nodeType":"FunctionDefinition","parameters":{"id":1713,"nodeType":"ParameterList","parameters":[],"src":"659:2:8"},"returnParameters":{"id":1716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1721,"src":"693:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1714,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:8"},"scope":1731,"src":"640:96:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1729,"nodeType":"Block","src":"809:32:8","statements":[{"expression":{"expression":{"id":1726,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"826:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1725,"id":1728,"nodeType":"Return","src":"819:15:8"}]},"id":1730,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:8","nodeType":"FunctionDefinition","parameters":{"id":1722,"nodeType":"ParameterList","parameters":[],"src":"759:2:8"},"returnParameters":{"id":1725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1730,"src":"793:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1723,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:8"},"scope":1731,"src":"742:99:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1732,"src":"608:235:8","usedErrors":[]}],"src":"86:758:8"},"id":8},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[1805]},"id":1806,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1733,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":1734,"nodeType":"StructuredDocumentation","src":"112:311:9","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":1805,"linearizedBaseContracts":[1805],"name":"Counters","nameLocation":"432:8:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":1737,"members":[{"constant":false,"id":1736,"mutability":"mutable","name":"_value","nameLocation":"794:6:9","nodeType":"VariableDeclaration","scope":1737,"src":"786:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1735,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:9","nodeType":"StructDefinition","scope":1805,"src":"447:374:9","visibility":"public"},{"body":{"id":1748,"nodeType":"Block","src":"901:38:9","statements":[{"expression":{"expression":{"id":1745,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"918:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1736,"src":"918:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1744,"id":1747,"nodeType":"Return","src":"911:21:9"}]},"id":1749,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:9","nodeType":"FunctionDefinition","parameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1740,"mutability":"mutable","name":"counter","nameLocation":"860:7:9","nodeType":"VariableDeclaration","scope":1749,"src":"844:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1739,"nodeType":"UserDefinedTypeName","pathNode":{"id":1738,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":1737,"src":"844:7:9"},"referencedDeclaration":1737,"src":"844:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:9"},"returnParameters":{"id":1744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1749,"src":"892:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1742,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:9"},"scope":1805,"src":"827:112:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1762,"nodeType":"Block","src":"998:70:9","statements":[{"id":1761,"nodeType":"UncheckedBlock","src":"1008:54:9","statements":[{"expression":{"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1755,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"1032:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1736,"src":"1032:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1760,"nodeType":"ExpressionStatement","src":"1032:19:9"}]}]},"id":1763,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:9","nodeType":"FunctionDefinition","parameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1752,"mutability":"mutable","name":"counter","nameLocation":"980:7:9","nodeType":"VariableDeclaration","scope":1763,"src":"964:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1751,"nodeType":"UserDefinedTypeName","pathNode":{"id":1750,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":1737,"src":"964:7:9"},"referencedDeclaration":1737,"src":"964:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:9"},"returnParameters":{"id":1754,"nodeType":"ParameterList","parameters":[],"src":"998:0:9"},"scope":1805,"src":"945:123:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1790,"nodeType":"Block","src":"1127:176:9","statements":[{"assignments":[1770],"declarations":[{"constant":false,"id":1770,"mutability":"mutable","name":"value","nameLocation":"1145:5:9","nodeType":"VariableDeclaration","scope":1790,"src":"1137:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1769,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1773,"initialValue":{"expression":{"id":1771,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1153:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1736,"src":"1153:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"1185:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":1774,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1177:49:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1780,"nodeType":"ExpressionStatement","src":"1177:49:9"},{"id":1789,"nodeType":"UncheckedBlock","src":"1236:61:9","statements":[{"expression":{"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1781,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1766,"src":"1260:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1783,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1736,"src":"1260:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1784,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"1277:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1788,"nodeType":"ExpressionStatement","src":"1260:26:9"}]}]},"id":1791,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:9","nodeType":"FunctionDefinition","parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1766,"mutability":"mutable","name":"counter","nameLocation":"1109:7:9","nodeType":"VariableDeclaration","scope":1791,"src":"1093:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1765,"nodeType":"UserDefinedTypeName","pathNode":{"id":1764,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":1737,"src":"1093:7:9"},"referencedDeclaration":1737,"src":"1093:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:9"},"returnParameters":{"id":1768,"nodeType":"ParameterList","parameters":[],"src":"1127:0:9"},"scope":1805,"src":"1074:229:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1803,"nodeType":"Block","src":"1358:35:9","statements":[{"expression":{"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1797,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1794,"src":"1368:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":1799,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":1736,"src":"1368:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1802,"nodeType":"ExpressionStatement","src":"1368:18:9"}]},"id":1804,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:9","nodeType":"FunctionDefinition","parameters":{"id":1795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"counter","nameLocation":"1340:7:9","nodeType":"VariableDeclaration","scope":1804,"src":"1324:23:9","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":1793,"nodeType":"UserDefinedTypeName","pathNode":{"id":1792,"name":"Counter","nodeType":"IdentifierPath","referencedDeclaration":1737,"src":"1324:7:9"},"referencedDeclaration":1737,"src":"1324:7:9","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:9"},"returnParameters":{"id":1796,"nodeType":"ParameterList","parameters":[],"src":"1358:0:9"},"scope":1805,"src":"1309:84:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1806,"src":"424:971:9","usedErrors":[]}],"src":"87:1309:9"},"id":9},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3242],"Strings":[1980]},"id":1981,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1807,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1808,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1981,"sourceUnit":3243,"src":"126:25:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"153:34:10","text":" @dev String operations."},"fullyImplemented":true,"id":1980,"linearizedBaseContracts":[1980],"name":"Strings","nameLocation":"196:7:10","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1812,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:10","nodeType":"VariableDeclaration","scope":1980,"src":"210:54:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1810,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1815,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:10","nodeType":"VariableDeclaration","scope":1980,"src":"270:43:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1813,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:10","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1862,"nodeType":"Block","src":"486:625:10","statements":[{"id":1861,"nodeType":"UncheckedBlock","src":"496:609:10","statements":[{"assignments":[1824],"declarations":[{"constant":false,"id":1824,"mutability":"mutable","name":"length","nameLocation":"528:6:10","nodeType":"VariableDeclaration","scope":1861,"src":"520:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1823,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1831,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1827,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"548:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1825,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"537:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3242_$","typeString":"type(library Math)"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3079,"src":"537:10:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"537:17:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:10"},{"assignments":[1833],"declarations":[{"constant":false,"id":1833,"mutability":"mutable","name":"buffer","nameLocation":"586:6:10","nodeType":"VariableDeclaration","scope":1861,"src":"572:20:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1832,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1838,"initialValue":{"arguments":[{"id":1836,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"606:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1835,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1834,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"595:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:10"},{"assignments":[1840],"declarations":[{"constant":false,"id":1840,"mutability":"mutable","name":"ptr","nameLocation":"635:3:10","nodeType":"VariableDeclaration","scope":1861,"src":"627:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1839,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1841,"nodeType":"VariableDeclarationStatement","src":"627:11:10"},{"AST":{"nodeType":"YulBlock","src":"708:67:10","statements":[{"nodeType":"YulAssignment","src":"726:35:10","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:10","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:10"},"nodeType":"YulFunctionCall","src":"745:15:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:10"},"nodeType":"YulFunctionCall","src":"733:28:10"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:10"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1833,"isOffset":false,"isSlot":false,"src":"737:6:10","valueSize":1},{"declaration":1824,"isOffset":false,"isSlot":false,"src":"753:6:10","valueSize":1},{"declaration":1840,"isOffset":false,"isSlot":false,"src":"726:3:10","valueSize":1}],"id":1842,"nodeType":"InlineAssembly","src":"699:76:10"},{"body":{"id":1857,"nodeType":"Block","src":"801:267:10","statements":[{"expression":{"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:10","subExpression":{"id":1844,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"819:3:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1846,"nodeType":"ExpressionStatement","src":"819:5:10"},{"AST":{"nodeType":"YulBlock","src":"902:84:10","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:10"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:10","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:10"},"nodeType":"YulFunctionCall","src":"942:14:10"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:10"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:10"},"nodeType":"YulFunctionCall","src":"937:30:10"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:10"},"nodeType":"YulFunctionCall","src":"924:44:10"},"nodeType":"YulExpressionStatement","src":"924:44:10"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1812,"isOffset":false,"isSlot":false,"src":"958:8:10","valueSize":1},{"declaration":1840,"isOffset":false,"isSlot":false,"src":"932:3:10","valueSize":1},{"declaration":1818,"isOffset":false,"isSlot":false,"src":"946:5:10","valueSize":1}],"id":1847,"nodeType":"InlineAssembly","src":"893:93:10"},{"expression":{"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"1003:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1851,"nodeType":"ExpressionStatement","src":"1003:11:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1852,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"1036:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1856,"nodeType":"IfStatement","src":"1032:21:10","trueBody":{"id":1855,"nodeType":"Break","src":"1048:5:10"}}]},"condition":{"hexValue":"74727565","id":1843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1858,"nodeType":"WhileStatement","src":"788:280:10"},{"expression":{"id":1859,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"1088:6:10","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1822,"id":1860,"nodeType":"Return","src":"1081:13:10"}]}]},"documentation":{"id":1816,"nodeType":"StructuredDocumentation","src":"320:90:10","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1863,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:10","nodeType":"FunctionDefinition","parameters":{"id":1819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1818,"mutability":"mutable","name":"value","nameLocation":"441:5:10","nodeType":"VariableDeclaration","scope":1863,"src":"433:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1817,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:10"},"returnParameters":{"id":1822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1821,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1863,"src":"471:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1820,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:10"},"scope":1980,"src":"415:696:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1882,"nodeType":"Block","src":"1290:100:10","statements":[{"id":1881,"nodeType":"UncheckedBlock","src":"1300:84:10","statements":[{"expression":{"arguments":[{"id":1872,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"1343:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1875,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"1362:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1873,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3242,"src":"1350:4:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3242_$","typeString":"type(library Math)"}},"id":1874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3202,"src":"1350:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1350:18:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1871,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1883,1959,1979],"referencedDeclaration":1959,"src":"1331:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1331:42:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1870,"id":1880,"nodeType":"Return","src":"1324:49:10"}]}]},"documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"1117:94:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1883,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:10","nodeType":"FunctionDefinition","parameters":{"id":1867,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"value","nameLocation":"1245:5:10","nodeType":"VariableDeclaration","scope":1883,"src":"1237:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1865,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:10"},"returnParameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1869,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1883,"src":"1275:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1868,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:10"},"scope":1980,"src":"1216:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1958,"nodeType":"Block","src":"1603:347:10","statements":[{"assignments":[1894],"declarations":[{"constant":false,"id":1894,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:10","nodeType":"VariableDeclaration","scope":1958,"src":"1613:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1893,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1903,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1898,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"1649:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:10","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1895,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1635:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:10"},{"expression":{"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1904,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"1670:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1906,"indexExpression":{"hexValue":"30","id":1905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1909,"nodeType":"ExpressionStatement","src":"1670:15:10"},{"expression":{"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1910,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"1695:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1912,"indexExpression":{"hexValue":"31","id":1911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1915,"nodeType":"ExpressionStatement","src":"1695:15:10"},{"body":{"id":1944,"nodeType":"Block","src":"1765:83:10","statements":[{"expression":{"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1930,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"1779:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1932,"indexExpression":{"id":1931,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"1786:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1933,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"1791:8:10","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1937,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1934,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"1800:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1935,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:10","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:10","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1939,"nodeType":"ExpressionStatement","src":"1779:33:10"},{"expression":{"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1940,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"1826:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1943,"nodeType":"ExpressionStatement","src":"1826:11:10"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1924,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"1753:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1945,"initializationExpression":{"assignments":[1917],"declarations":[{"constant":false,"id":1917,"mutability":"mutable","name":"i","nameLocation":"1733:1:10","nodeType":"VariableDeclaration","scope":1945,"src":"1725:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1923,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1919,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"1741:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:10"},"loopExpression":{"expression":{"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:10","subExpression":{"id":1927,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"1762:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1929,"nodeType":"ExpressionStatement","src":"1760:3:10"},"nodeType":"ForStatement","src":"1720:128:10"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"1865:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1946,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1857:55:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1952,"nodeType":"ExpressionStatement","src":"1857:55:10"},{"expression":{"arguments":[{"id":1955,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"1936:6:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1954,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:10","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1953,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:10","typeDescriptions":{}}},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1929:14:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1892,"id":1957,"nodeType":"Return","src":"1922:21:10"}]},"documentation":{"id":1884,"nodeType":"StructuredDocumentation","src":"1396:112:10","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1959,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:10","nodeType":"FunctionDefinition","parameters":{"id":1889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"value","nameLocation":"1542:5:10","nodeType":"VariableDeclaration","scope":1959,"src":"1534:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1888,"mutability":"mutable","name":"length","nameLocation":"1557:6:10","nodeType":"VariableDeclaration","scope":1959,"src":"1549:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:10"},"returnParameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1891,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1959,"src":"1588:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1890,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:10"},"scope":1980,"src":"1513:437:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1978,"nodeType":"Block","src":"2175:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1972,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"2220:4:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1971,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1970,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:10","typeDescriptions":{}}},"id":1973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2212:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1968,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:10","typeDescriptions":{}}},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:22:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1975,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1815,"src":"2228:15:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1967,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1883,1959,1979],"referencedDeclaration":1959,"src":"2192:11:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2192:52:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1966,"id":1977,"nodeType":"Return","src":"2185:59:10"}]},"documentation":{"id":1960,"nodeType":"StructuredDocumentation","src":"1956:141:10","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1979,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:10","nodeType":"FunctionDefinition","parameters":{"id":1963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1962,"mutability":"mutable","name":"addr","nameLocation":"2131:4:10","nodeType":"VariableDeclaration","scope":1979,"src":"2123:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1961,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:10"},"returnParameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1979,"src":"2160:13:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1964,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:10"},"scope":1980,"src":"2102:149:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1981,"src":"188:2065:10","usedErrors":[]}],"src":"101:2153:10"},"id":10},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[2341],"Math":[3242],"Strings":[1980]},"id":2342,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1982,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1983,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":1981,"src":"137:24:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1984,"nodeType":"StructuredDocumentation","src":"163:205:11","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2341,"linearizedBaseContracts":[2341],"name":"ECDSA","nameLocation":"377:5:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":1990,"members":[{"id":1985,"name":"NoError","nameLocation":"417:7:11","nodeType":"EnumValue","src":"417:7:11"},{"id":1986,"name":"InvalidSignature","nameLocation":"434:16:11","nodeType":"EnumValue","src":"434:16:11"},{"id":1987,"name":"InvalidSignatureLength","nameLocation":"460:22:11","nodeType":"EnumValue","src":"460:22:11"},{"id":1988,"name":"InvalidSignatureS","nameLocation":"492:17:11","nodeType":"EnumValue","src":"492:17:11"},{"id":1989,"name":"InvalidSignatureV","nameLocation":"519:17:11","nodeType":"EnumValue","src":"519:17:11"}],"name":"RecoverError","nameLocation":"394:12:11","nodeType":"EnumDefinition","src":"389:175:11"},{"body":{"id":2033,"nodeType":"Block","src":"624:457:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1996,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"638:5:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1997,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"647:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"647:20:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2002,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"734:5:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2003,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"743:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1986,"src":"743:29:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2011,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"843:5:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2012,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"852:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1987,"src":"852:35:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2020,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"965:5:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2021,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"974:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2022,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1988,"src":"974:30:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2029,"nodeType":"IfStatement","src":"961:114:11","trueBody":{"id":2028,"nodeType":"Block","src":"1006:69:11","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2024,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1020:44:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2027,"nodeType":"ExpressionStatement","src":"1020:44:11"}]}},"id":2030,"nodeType":"IfStatement","src":"839:236:11","trueBody":{"id":2019,"nodeType":"Block","src":"889:66:11","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2015,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"903:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2018,"nodeType":"ExpressionStatement","src":"903:41:11"}]}},"id":2031,"nodeType":"IfStatement","src":"730:345:11","trueBody":{"id":2010,"nodeType":"Block","src":"774:59:11","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2006,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"788:34:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2009,"nodeType":"ExpressionStatement","src":"788:34:11"}]}},"id":2032,"nodeType":"IfStatement","src":"634:441:11","trueBody":{"id":2001,"nodeType":"Block","src":"669:55:11","statements":[{"functionReturnParameters":1995,"id":2000,"nodeType":"Return","src":"683:7:11"}]}}]},"id":2034,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:11","nodeType":"FunctionDefinition","parameters":{"id":1994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"error","nameLocation":"604:5:11","nodeType":"VariableDeclaration","scope":2034,"src":"591:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1992,"nodeType":"UserDefinedTypeName","pathNode":{"id":1991,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"591:12:11"},"referencedDeclaration":1990,"src":"591:12:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:11"},"returnParameters":{"id":1995,"nodeType":"ParameterList","parameters":[],"src":"624:0:11"},"scope":2341,"src":"570:511:11","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2079,"nodeType":"Block","src":"2249:626:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2047,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2039,"src":"2263:9:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2263:16:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:11","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2077,"nodeType":"Block","src":"2788:81:11","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2070,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2069,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:11","typeDescriptions":{}}},"id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2810:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2073,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"2822:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2074,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1987,"src":"2822:35:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}}],"id":2075,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2046,"id":2076,"nodeType":"Return","src":"2802:56:11"}]},"id":2078,"nodeType":"IfStatement","src":"2259:610:11","trueBody":{"id":2068,"nodeType":"Block","src":"2287:495:11","statements":[{"assignments":[2052],"declarations":[{"constant":false,"id":2052,"mutability":"mutable","name":"r","nameLocation":"2309:1:11","nodeType":"VariableDeclaration","scope":2068,"src":"2301:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2051,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2053,"nodeType":"VariableDeclarationStatement","src":"2301:9:11"},{"assignments":[2055],"declarations":[{"constant":false,"id":2055,"mutability":"mutable","name":"s","nameLocation":"2332:1:11","nodeType":"VariableDeclaration","scope":2068,"src":"2324:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2056,"nodeType":"VariableDeclarationStatement","src":"2324:9:11"},{"assignments":[2058],"declarations":[{"constant":false,"id":2058,"mutability":"mutable","name":"v","nameLocation":"2353:1:11","nodeType":"VariableDeclaration","scope":2068,"src":"2347:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2057,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2059,"nodeType":"VariableDeclarationStatement","src":"2347:7:11"},{"AST":{"nodeType":"YulBlock","src":"2555:171:11","statements":[{"nodeType":"YulAssignment","src":"2573:32:11","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:11","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:11"},"nodeType":"YulFunctionCall","src":"2584:20:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:11"},"nodeType":"YulFunctionCall","src":"2578:27:11"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:11"}]},{"nodeType":"YulAssignment","src":"2622:32:11","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:11","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:11"},"nodeType":"YulFunctionCall","src":"2633:20:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:11"},"nodeType":"YulFunctionCall","src":"2627:27:11"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:11"}]},{"nodeType":"YulAssignment","src":"2671:41:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:11","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:11"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:11","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:11"},"nodeType":"YulFunctionCall","src":"2690:20:11"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:11"},"nodeType":"YulFunctionCall","src":"2684:27:11"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:11"},"nodeType":"YulFunctionCall","src":"2676:36:11"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":2052,"isOffset":false,"isSlot":false,"src":"2573:1:11","valueSize":1},{"declaration":2055,"isOffset":false,"isSlot":false,"src":"2622:1:11","valueSize":1},{"declaration":2039,"isOffset":false,"isSlot":false,"src":"2588:9:11","valueSize":1},{"declaration":2039,"isOffset":false,"isSlot":false,"src":"2637:9:11","valueSize":1},{"declaration":2039,"isOffset":false,"isSlot":false,"src":"2694:9:11","valueSize":1},{"declaration":2058,"isOffset":false,"isSlot":false,"src":"2671:1:11","valueSize":1}],"id":2060,"nodeType":"InlineAssembly","src":"2546:180:11"},{"expression":{"arguments":[{"id":2062,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"2757:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2063,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2058,"src":"2763:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2064,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"2766:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2065,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"2769:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2061,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2080,2154,2248],"referencedDeclaration":2248,"src":"2746:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2746:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2046,"id":2067,"nodeType":"Return","src":"2739:32:11"}]}}]},"documentation":{"id":2035,"nodeType":"StructuredDocumentation","src":"1087:1053:11","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2080,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:11","nodeType":"FunctionDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"mutability":"mutable","name":"hash","nameLocation":"2173:4:11","nodeType":"VariableDeclaration","scope":2080,"src":"2165:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2036,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2039,"mutability":"mutable","name":"signature","nameLocation":"2192:9:11","nodeType":"VariableDeclaration","scope":2080,"src":"2179:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2038,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:11"},"returnParameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2080,"src":"2226:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2041,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2080,"src":"2235:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2044,"nodeType":"UserDefinedTypeName","pathNode":{"id":2043,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"2235:12:11"},"referencedDeclaration":1990,"src":"2235:12:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:11"},"scope":2341,"src":"2145:730:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2106,"nodeType":"Block","src":"3748:140:11","statements":[{"assignments":[2091,2094],"declarations":[{"constant":false,"id":2091,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:11","nodeType":"VariableDeclaration","scope":2106,"src":"3759:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2090,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2094,"mutability":"mutable","name":"error","nameLocation":"3791:5:11","nodeType":"VariableDeclaration","scope":2106,"src":"3778:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2093,"nodeType":"UserDefinedTypeName","pathNode":{"id":2092,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"3778:12:11"},"referencedDeclaration":1990,"src":"3778:12:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2099,"initialValue":{"arguments":[{"id":2096,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2083,"src":"3811:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2097,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"3817:9:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2095,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2080,2154,2248],"referencedDeclaration":2080,"src":"3800:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":2098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3800:27:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:11"},{"expression":{"arguments":[{"id":2101,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2094,"src":"3849:5:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}],"id":2100,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"3837:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1990_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3837:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2103,"nodeType":"ExpressionStatement","src":"3837:18:11"},{"expression":{"id":2104,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2091,"src":"3872:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2089,"id":2105,"nodeType":"Return","src":"3865:16:11"}]},"documentation":{"id":2081,"nodeType":"StructuredDocumentation","src":"2881:775:11","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2107,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:11","nodeType":"FunctionDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"hash","nameLocation":"3686:4:11","nodeType":"VariableDeclaration","scope":2107,"src":"3678:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2082,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"signature","nameLocation":"3705:9:11","nodeType":"VariableDeclaration","scope":2107,"src":"3692:22:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2084,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:11"},"returnParameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2107,"src":"3739:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2087,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:11"},"scope":2341,"src":"3661:227:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2153,"nodeType":"Block","src":"4275:203:11","statements":[{"assignments":[2123],"declarations":[{"constant":false,"id":2123,"mutability":"mutable","name":"s","nameLocation":"4293:1:11","nodeType":"VariableDeclaration","scope":2153,"src":"4285:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2122,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4285:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2130,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2124,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"4297:2:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:66:11","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:11","typeDescriptions":{}}},"id":2128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4302:75:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4297:80:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4285:92:11"},{"assignments":[2132],"declarations":[{"constant":false,"id":2132,"mutability":"mutable","name":"v","nameLocation":"4393:1:11","nodeType":"VariableDeclaration","scope":2153,"src":"4387:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2131,"name":"uint8","nodeType":"ElementaryTypeName","src":"4387:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2145,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2137,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"4412:2:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4404:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2135,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:11","typeDescriptions":{}}},"id":2138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4404:11:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:3:11","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4404:18:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2141,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4403:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4426:2:11","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4403:25:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4397:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2133,"name":"uint8","nodeType":"ElementaryTypeName","src":"4397:5:11","typeDescriptions":{}}},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4397:32:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4387:42:11"},{"expression":{"arguments":[{"id":2147,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2110,"src":"4457:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2148,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4463:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2149,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"4466:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2150,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"4469:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2146,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2080,2154,2248],"referencedDeclaration":2248,"src":"4446:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4446:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2121,"id":2152,"nodeType":"Return","src":"4439:32:11"}]},"documentation":{"id":2108,"nodeType":"StructuredDocumentation","src":"3894:243:11","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2154,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:11","nodeType":"FunctionDefinition","parameters":{"id":2115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"mutability":"mutable","name":"hash","nameLocation":"4179:4:11","nodeType":"VariableDeclaration","scope":2154,"src":"4171:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4171:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2112,"mutability":"mutable","name":"r","nameLocation":"4201:1:11","nodeType":"VariableDeclaration","scope":2154,"src":"4193:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2114,"mutability":"mutable","name":"vs","nameLocation":"4220:2:11","nodeType":"VariableDeclaration","scope":2154,"src":"4212:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4212:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:67:11"},"returnParameters":{"id":2121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2117,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2154,"src":"4252:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2116,"name":"address","nodeType":"ElementaryTypeName","src":"4252:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2120,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2154,"src":"4261:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2119,"nodeType":"UserDefinedTypeName","pathNode":{"id":2118,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"4261:12:11"},"referencedDeclaration":1990,"src":"4261:12:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4251:23:11"},"scope":2341,"src":"4142:336:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2183,"nodeType":"Block","src":"4759:136:11","statements":[{"assignments":[2167,2170],"declarations":[{"constant":false,"id":2167,"mutability":"mutable","name":"recovered","nameLocation":"4778:9:11","nodeType":"VariableDeclaration","scope":2183,"src":"4770:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2166,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2170,"mutability":"mutable","name":"error","nameLocation":"4802:5:11","nodeType":"VariableDeclaration","scope":2183,"src":"4789:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2169,"nodeType":"UserDefinedTypeName","pathNode":{"id":2168,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"4789:12:11"},"referencedDeclaration":1990,"src":"4789:12:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2176,"initialValue":{"arguments":[{"id":2172,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"4822:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2173,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2159,"src":"4828:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2174,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"4831:2:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2171,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2080,2154,2248],"referencedDeclaration":2154,"src":"4811:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4811:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4769:65:11"},{"expression":{"arguments":[{"id":2178,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"4856:5:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}],"id":2177,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"4844:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1990_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4844:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2180,"nodeType":"ExpressionStatement","src":"4844:18:11"},{"expression":{"id":2181,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"4879:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2165,"id":2182,"nodeType":"Return","src":"4872:16:11"}]},"documentation":{"id":2155,"nodeType":"StructuredDocumentation","src":"4484:154:11","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2184,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4652:7:11","nodeType":"FunctionDefinition","parameters":{"id":2162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"hash","nameLocation":"4677:4:11","nodeType":"VariableDeclaration","scope":2184,"src":"4669:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2156,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2159,"mutability":"mutable","name":"r","nameLocation":"4699:1:11","nodeType":"VariableDeclaration","scope":2184,"src":"4691:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2161,"mutability":"mutable","name":"vs","nameLocation":"4718:2:11","nodeType":"VariableDeclaration","scope":2184,"src":"4710:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4659:67:11"},"returnParameters":{"id":2165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2184,"src":"4750:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2163,"name":"address","nodeType":"ElementaryTypeName","src":"4750:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:9:11"},"scope":2341,"src":"4643:252:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2247,"nodeType":"Block","src":"5218:1345:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2203,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"6114:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2201,"name":"uint256","nodeType":"ElementaryTypeName","src":"6106:7:11","typeDescriptions":{}}},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6106:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:66:11","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6106:79:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2216,"nodeType":"IfStatement","src":"6102:161:11","trueBody":{"id":2215,"nodeType":"Block","src":"6187:76:11","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6217:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6209:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2207,"name":"address","nodeType":"ElementaryTypeName","src":"6209:7:11","typeDescriptions":{}}},"id":2210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6209:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2211,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"6221:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1988,"src":"6221:30:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}}],"id":2213,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6208:44:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2200,"id":2214,"nodeType":"Return","src":"6201:51:11"}]}},{"assignments":[2218],"declarations":[{"constant":false,"id":2218,"mutability":"mutable","name":"signer","nameLocation":"6365:6:11","nodeType":"VariableDeclaration","scope":2247,"src":"6357:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2217,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2225,"initialValue":{"arguments":[{"id":2220,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"6384:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2221,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"6390:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2222,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2191,"src":"6393:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2223,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"6396:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2219,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6374:9:11","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6374:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6357:41:11"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2226,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"6412:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6430:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2227,"name":"address","nodeType":"ElementaryTypeName","src":"6422:7:11","typeDescriptions":{}}},"id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6422:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6412:20:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2241,"nodeType":"IfStatement","src":"6408:101:11","trueBody":{"id":2240,"nodeType":"Block","src":"6434:75:11","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6464:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6456:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2232,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:11","typeDescriptions":{}}},"id":2235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6456:10:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2236,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"6468:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2237,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1986,"src":"6468:29:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}}],"id":2238,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6455:43:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2200,"id":2239,"nodeType":"Return","src":"6448:50:11"}]}},{"expression":{"components":[{"id":2242,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2218,"src":"6527:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2243,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"6535:12:11","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1990_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1985,"src":"6535:20:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}}],"id":2245,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6526:30:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2200,"id":2246,"nodeType":"Return","src":"6519:37:11"}]},"documentation":{"id":2185,"nodeType":"StructuredDocumentation","src":"4901:163:11","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2248,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5078:10:11","nodeType":"FunctionDefinition","parameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2187,"mutability":"mutable","name":"hash","nameLocation":"5106:4:11","nodeType":"VariableDeclaration","scope":2248,"src":"5098:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5098:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2189,"mutability":"mutable","name":"v","nameLocation":"5126:1:11","nodeType":"VariableDeclaration","scope":2248,"src":"5120:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2188,"name":"uint8","nodeType":"ElementaryTypeName","src":"5120:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2191,"mutability":"mutable","name":"r","nameLocation":"5145:1:11","nodeType":"VariableDeclaration","scope":2248,"src":"5137:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2190,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5137:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2193,"mutability":"mutable","name":"s","nameLocation":"5164:1:11","nodeType":"VariableDeclaration","scope":2248,"src":"5156:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5088:83:11"},"returnParameters":{"id":2200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2248,"src":"5195:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2195,"name":"address","nodeType":"ElementaryTypeName","src":"5195:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2248,"src":"5204:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2198,"nodeType":"UserDefinedTypeName","pathNode":{"id":2197,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"5204:12:11"},"referencedDeclaration":1990,"src":"5204:12:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5194:23:11"},"scope":2341,"src":"5069:1494:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2280,"nodeType":"Block","src":"6828:138:11","statements":[{"assignments":[2263,2266],"declarations":[{"constant":false,"id":2263,"mutability":"mutable","name":"recovered","nameLocation":"6847:9:11","nodeType":"VariableDeclaration","scope":2280,"src":"6839:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2262,"name":"address","nodeType":"ElementaryTypeName","src":"6839:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2266,"mutability":"mutable","name":"error","nameLocation":"6871:5:11","nodeType":"VariableDeclaration","scope":2280,"src":"6858:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2265,"nodeType":"UserDefinedTypeName","pathNode":{"id":2264,"name":"RecoverError","nodeType":"IdentifierPath","referencedDeclaration":1990,"src":"6858:12:11"},"referencedDeclaration":1990,"src":"6858:12:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2273,"initialValue":{"arguments":[{"id":2268,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2251,"src":"6891:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2269,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"6897:1:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2270,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"6900:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2271,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2257,"src":"6903:1:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2267,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2080,2154,2248],"referencedDeclaration":2248,"src":"6880:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6880:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1990_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6838:67:11"},{"expression":{"arguments":[{"id":2275,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"6927:5:11","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1990","typeString":"enum ECDSA.RecoverError"}],"id":2274,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"6915:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1990_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6915:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2277,"nodeType":"ExpressionStatement","src":"6915:18:11"},{"expression":{"id":2278,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2263,"src":"6950:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2261,"id":2279,"nodeType":"Return","src":"6943:16:11"}]},"documentation":{"id":2249,"nodeType":"StructuredDocumentation","src":"6569:122:11","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2281,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6705:7:11","nodeType":"FunctionDefinition","parameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2251,"mutability":"mutable","name":"hash","nameLocation":"6730:4:11","nodeType":"VariableDeclaration","scope":2281,"src":"6722:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6722:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2253,"mutability":"mutable","name":"v","nameLocation":"6750:1:11","nodeType":"VariableDeclaration","scope":2281,"src":"6744:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2252,"name":"uint8","nodeType":"ElementaryTypeName","src":"6744:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2255,"mutability":"mutable","name":"r","nameLocation":"6769:1:11","nodeType":"VariableDeclaration","scope":2281,"src":"6761:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6761:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2257,"mutability":"mutable","name":"s","nameLocation":"6788:1:11","nodeType":"VariableDeclaration","scope":2281,"src":"6780:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6780:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6712:83:11"},"returnParameters":{"id":2261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2260,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2281,"src":"6819:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2259,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:11"},"scope":2341,"src":"6696:270:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2297,"nodeType":"Block","src":"7334:187:11","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":2292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7472:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":2293,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"7508:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2290,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7455:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"7455:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7455:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2289,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7445:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7445:69:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2288,"id":2296,"nodeType":"Return","src":"7438:76:11"}]},"documentation":{"id":2282,"nodeType":"StructuredDocumentation","src":"6972:279:11","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2298,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7265:22:11","nodeType":"FunctionDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2284,"mutability":"mutable","name":"hash","nameLocation":"7296:4:11","nodeType":"VariableDeclaration","scope":2298,"src":"7288:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2283,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7288:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7287:14:11"},"returnParameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2298,"src":"7325:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7325:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7324:9:11"},"scope":2341,"src":"7256:265:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2319,"nodeType":"Block","src":"7886:116:11","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:32:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2312,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"7981:1:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7981:8:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2310,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"7964:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1980_$","typeString":"type(library Strings)"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1863,"src":"7964:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7964:26:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2315,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"7992:1:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2307,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7913:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"7913:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7913:81:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2306,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7903:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7903:92:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2305,"id":2318,"nodeType":"Return","src":"7896:99:11"}]},"documentation":{"id":2299,"nodeType":"StructuredDocumentation","src":"7527:274:11","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2320,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7815:22:11","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"s","nameLocation":"7851:1:11","nodeType":"VariableDeclaration","scope":2320,"src":"7838:14:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2300,"name":"bytes","nodeType":"ElementaryTypeName","src":"7838:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7837:16:11"},"returnParameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2320,"src":"7877:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7877:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7876:9:11"},"scope":2341,"src":"7806:196:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2339,"nodeType":"Block","src":"8443:92:11","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":2333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:10:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":2334,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"8499:15:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2335,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2325,"src":"8516:10:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2331,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8470:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2332,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"8470:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8470:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2330,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8460:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8460:68:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2329,"id":2338,"nodeType":"Return","src":"8453:75:11"}]},"documentation":{"id":2321,"nodeType":"StructuredDocumentation","src":"8008:328:11","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2340,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8350:15:11","nodeType":"FunctionDefinition","parameters":{"id":2326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"domainSeparator","nameLocation":"8374:15:11","nodeType":"VariableDeclaration","scope":2340,"src":"8366:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2325,"mutability":"mutable","name":"structHash","nameLocation":"8399:10:11","nodeType":"VariableDeclaration","scope":2340,"src":"8391:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8391:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:45:11"},"returnParameters":{"id":2329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2340,"src":"8434:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8434:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8433:9:11"},"scope":2341,"src":"8341:194:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2342,"src":"369:8168:11","usedErrors":[]}],"src":"112:8426:11"},"id":11},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2365],"IERC165":[2377]},"id":2366,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2343,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2344,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2366,"sourceUnit":2378,"src":"124:23:12","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2346,"name":"IERC165","nodeType":"IdentifierPath","referencedDeclaration":2377,"src":"754:7:12"},"id":2347,"nodeType":"InheritanceSpecifier","src":"754:7:12"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2345,"nodeType":"StructuredDocumentation","src":"149:576:12","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2365,"linearizedBaseContracts":[2365,2377],"name":"ERC165","nameLocation":"744:6:12","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2376],"body":{"id":2363,"nodeType":"Block","src":"920:64:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2356,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2350,"src":"937:11:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2358,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2377,"src":"957:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2377_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2377_$","typeString":"type(contract IERC165)"}],"id":2357,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"952:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2377","typeString":"type(contract IERC165)"}},"id":2360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2355,"id":2362,"nodeType":"Return","src":"930:47:12"}]},"documentation":{"id":2348,"nodeType":"StructuredDocumentation","src":"768:56:12","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2364,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:12","nodeType":"FunctionDefinition","overrides":{"id":2352,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:12"},"parameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2350,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:12","nodeType":"VariableDeclaration","scope":2364,"src":"856:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2349,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:12"},"returnParameters":{"id":2355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2364,"src":"914:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2353,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:12"},"scope":2365,"src":"829:155:12","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2366,"src":"726:260:12","usedErrors":[]}],"src":"99:888:12"},"id":12},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2377]},"id":2378,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2367,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2368,"nodeType":"StructuredDocumentation","src":"125:279:13","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2377,"linearizedBaseContracts":[2377],"name":"IERC165","nameLocation":"415:7:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2369,"nodeType":"StructuredDocumentation","src":"429:340:13","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2376,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:13","nodeType":"FunctionDefinition","parameters":{"id":2372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2371,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:13","nodeType":"VariableDeclaration","scope":2376,"src":"801:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2370,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:13"},"returnParameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2376,"src":"844:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2373,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:13"},"scope":2377,"src":"774:76:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2378,"src":"405:447:13","usedErrors":[]}],"src":"100:753:13"},"id":13},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3242]},"id":3243,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2379,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"128:73:14","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3242,"linearizedBaseContracts":[3242],"name":"Math","nameLocation":"210:4:14","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2384,"members":[{"id":2381,"name":"Down","nameLocation":"245:4:14","nodeType":"EnumValue","src":"245:4:14"},{"id":2382,"name":"Up","nameLocation":"287:2:14","nodeType":"EnumValue","src":"287:2:14"},{"id":2383,"name":"Zero","nameLocation":"318:4:14","nodeType":"EnumValue","src":"318:4:14"}],"name":"Rounding","nameLocation":"226:8:14","nodeType":"EnumDefinition","src":"221:122:14"},{"body":{"id":2401,"nodeType":"Block","src":"480:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"497:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2395,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"501:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2398,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"509:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:14","trueExpression":{"id":2397,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"505:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2393,"id":2400,"nodeType":"Return","src":"490:20:14"}]},"documentation":{"id":2385,"nodeType":"StructuredDocumentation","src":"349:59:14","text":" @dev Returns the largest of two numbers."},"id":2402,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:14","nodeType":"FunctionDefinition","parameters":{"id":2390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2387,"mutability":"mutable","name":"a","nameLocation":"434:1:14","nodeType":"VariableDeclaration","scope":2402,"src":"426:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2386,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2389,"mutability":"mutable","name":"b","nameLocation":"445:1:14","nodeType":"VariableDeclaration","scope":2402,"src":"437:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2388,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:14"},"returnParameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2402,"src":"471:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2391,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:14"},"scope":3242,"src":"413:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2419,"nodeType":"Block","src":"655:37:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"672:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2413,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"676:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2416,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"684:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:14","trueExpression":{"id":2415,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"680:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2411,"id":2418,"nodeType":"Return","src":"665:20:14"}]},"documentation":{"id":2403,"nodeType":"StructuredDocumentation","src":"523:60:14","text":" @dev Returns the smallest of two numbers."},"id":2420,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:14","nodeType":"FunctionDefinition","parameters":{"id":2408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2405,"mutability":"mutable","name":"a","nameLocation":"609:1:14","nodeType":"VariableDeclaration","scope":2420,"src":"601:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2404,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2407,"mutability":"mutable","name":"b","nameLocation":"620:1:14","nodeType":"VariableDeclaration","scope":2420,"src":"612:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2406,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:14"},"returnParameters":{"id":2411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2410,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2420,"src":"646:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2409,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:14"},"scope":3242,"src":"588:104:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2442,"nodeType":"Block","src":"876:82:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2430,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"931:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2431,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"935:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2433,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2423,"src":"941:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2435,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"945:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2437,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2429,"id":2441,"nodeType":"Return","src":"923:28:14"}]},"documentation":{"id":2421,"nodeType":"StructuredDocumentation","src":"698:102:14","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2443,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:14","nodeType":"FunctionDefinition","parameters":{"id":2426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2423,"mutability":"mutable","name":"a","nameLocation":"830:1:14","nodeType":"VariableDeclaration","scope":2443,"src":"822:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2422,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2425,"mutability":"mutable","name":"b","nameLocation":"841:1:14","nodeType":"VariableDeclaration","scope":2443,"src":"833:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2424,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:14"},"returnParameters":{"id":2429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2443,"src":"867:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2427,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:14"},"scope":3242,"src":"805:153:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2467,"nodeType":"Block","src":"1228:123:14","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2453,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"1316:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2457,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2446,"src":"1330:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2458,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2460,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2461,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"1339:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:14","trueExpression":{"hexValue":"30","id":2456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2452,"id":2466,"nodeType":"Return","src":"1309:35:14"}]},"documentation":{"id":2444,"nodeType":"StructuredDocumentation","src":"964:188:14","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2468,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:14","nodeType":"FunctionDefinition","parameters":{"id":2449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2446,"mutability":"mutable","name":"a","nameLocation":"1182:1:14","nodeType":"VariableDeclaration","scope":2468,"src":"1174:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2445,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2448,"mutability":"mutable","name":"b","nameLocation":"1193:1:14","nodeType":"VariableDeclaration","scope":2468,"src":"1185:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2447,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:14"},"returnParameters":{"id":2452,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2451,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2468,"src":"1219:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2450,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:14"},"scope":3242,"src":"1157:194:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2589,"nodeType":"Block","src":"1795:3797:14","statements":[{"id":2588,"nodeType":"UncheckedBlock","src":"1805:3781:14","statements":[{"assignments":[2481],"declarations":[{"constant":false,"id":2481,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:14","nodeType":"VariableDeclaration","scope":2588,"src":"2126:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2480,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2482,"nodeType":"VariableDeclarationStatement","src":"2126:13:14"},{"assignments":[2484],"declarations":[{"constant":false,"id":2484,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:14","nodeType":"VariableDeclaration","scope":2588,"src":"2198:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2483,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2485,"nodeType":"VariableDeclarationStatement","src":"2198:13:14"},{"AST":{"nodeType":"YulBlock","src":"2278:157:14","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:14"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:14","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:14"},"nodeType":"YulFunctionCall","src":"2319:6:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:14"},"nodeType":"YulFunctionCall","src":"2306:20:14"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:14","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:14"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:14"},"nodeType":"YulFunctionCall","src":"2352:9:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:14"}]},{"nodeType":"YulAssignment","src":"2378:43:14","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:14"},"nodeType":"YulFunctionCall","src":"2391:14:14"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:14"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:14"},"nodeType":"YulFunctionCall","src":"2407:13:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:14"},"nodeType":"YulFunctionCall","src":"2387:34:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2481,"isOffset":false,"isSlot":false,"src":"2343:5:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"2399:5:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"2414:5:14","valueSize":1},{"declaration":2484,"isOffset":false,"isSlot":false,"src":"2378:5:14","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"2313:1:14","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"2356:1:14","valueSize":1},{"declaration":2473,"isOffset":false,"isSlot":false,"src":"2316:1:14","valueSize":1},{"declaration":2473,"isOffset":false,"isSlot":false,"src":"2359:1:14","valueSize":1}],"id":2486,"nodeType":"InlineAssembly","src":"2269:166:14"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2487,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"2516:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2488,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2495,"nodeType":"IfStatement","src":"2512:75:14","trueBody":{"id":2494,"nodeType":"Block","src":"2528:59:14","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2490,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"2553:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2491,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"2561:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2479,"id":2493,"nodeType":"Return","src":"2546:26:14"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"2697:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2498,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"2711:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2496,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2689:28:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2501,"nodeType":"ExpressionStatement","src":"2689:28:14"},{"assignments":[2503],"declarations":[{"constant":false,"id":2503,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:14","nodeType":"VariableDeclaration","scope":2588,"src":"2973:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2502,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2504,"nodeType":"VariableDeclarationStatement","src":"2973:17:14"},{"AST":{"nodeType":"YulBlock","src":"3013:291:14","statements":[{"nodeType":"YulAssignment","src":"3082:38:14","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:14"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:14"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:14"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:14"},"nodeType":"YulFunctionCall","src":"3095:25:14"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:14"}]},{"nodeType":"YulAssignment","src":"3202:41:14","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:14"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:14"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:14"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:14"},"nodeType":"YulFunctionCall","src":"3222:20:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:14"},"nodeType":"YulFunctionCall","src":"3211:32:14"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:14"}]},{"nodeType":"YulAssignment","src":"3260:30:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:14"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:14"},"nodeType":"YulFunctionCall","src":"3269:21:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2475,"isOffset":false,"isSlot":false,"src":"3108:11:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"3236:5:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"3260:5:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"3273:5:14","valueSize":1},{"declaration":2484,"isOffset":false,"isSlot":false,"src":"3202:5:14","valueSize":1},{"declaration":2484,"isOffset":false,"isSlot":false,"src":"3215:5:14","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"3082:9:14","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"3225:9:14","valueSize":1},{"declaration":2503,"isOffset":false,"isSlot":false,"src":"3280:9:14","valueSize":1},{"declaration":2471,"isOffset":false,"isSlot":false,"src":"3102:1:14","valueSize":1},{"declaration":2473,"isOffset":false,"isSlot":false,"src":"3105:1:14","valueSize":1}],"id":2505,"nodeType":"InlineAssembly","src":"3004:300:14"},{"assignments":[2507],"declarations":[{"constant":false,"id":2507,"mutability":"mutable","name":"twos","nameLocation":"3619:4:14","nodeType":"VariableDeclaration","scope":2588,"src":"3611:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2506,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2515,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2508,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"3626:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:14","subExpression":{"id":2509,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"3642:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2513,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:14"},{"AST":{"nodeType":"YulBlock","src":"3681:362:14","statements":[{"nodeType":"YulAssignment","src":"3746:37:14","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:14"},"nodeType":"YulFunctionCall","src":"3761:22:14"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:14"}]},{"nodeType":"YulAssignment","src":"3850:25:14","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:14"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:14"},"nodeType":"YulFunctionCall","src":"3859:16:14"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:14"}]},{"nodeType":"YulAssignment","src":"3990:39:14","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:14","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:14"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:14"},"nodeType":"YulFunctionCall","src":"4006:12:14"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:14"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:14"},"nodeType":"YulFunctionCall","src":"4002:23:14"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:14","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:14"},"nodeType":"YulFunctionCall","src":"3998:31:14"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:14"}]}]},"evmVersion":"london","externalReferences":[{"declaration":2475,"isOffset":false,"isSlot":false,"src":"3746:11:14","valueSize":1},{"declaration":2475,"isOffset":false,"isSlot":false,"src":"3765:11:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"3850:5:14","valueSize":1},{"declaration":2481,"isOffset":false,"isSlot":false,"src":"3863:5:14","valueSize":1},{"declaration":2507,"isOffset":false,"isSlot":false,"src":"3778:4:14","valueSize":1},{"declaration":2507,"isOffset":false,"isSlot":false,"src":"3870:4:14","valueSize":1},{"declaration":2507,"isOffset":false,"isSlot":false,"src":"3990:4:14","valueSize":1},{"declaration":2507,"isOffset":false,"isSlot":false,"src":"4013:4:14","valueSize":1},{"declaration":2507,"isOffset":false,"isSlot":false,"src":"4020:4:14","valueSize":1}],"id":2516,"nodeType":"InlineAssembly","src":"3672:371:14"},{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2517,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"4109:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2518,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"4118:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2519,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2507,"src":"4126:4:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2522,"nodeType":"ExpressionStatement","src":"4109:21:14"},{"assignments":[2524],"declarations":[{"constant":false,"id":2524,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:14","nodeType":"VariableDeclaration","scope":2588,"src":"4448:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2523,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2531,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:14","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2526,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"4471:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2528,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:14"},{"expression":{"id":2538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2532,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4704:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2534,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"4719:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2535,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4733:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2539,"nodeType":"ExpressionStatement","src":"4704:36:14"},{"expression":{"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2540,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4773:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"4788:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2543,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4802:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2547,"nodeType":"ExpressionStatement","src":"4773:36:14"},{"expression":{"id":2554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2548,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4843:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2550,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"4858:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2551,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4872:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2555,"nodeType":"ExpressionStatement","src":"4843:36:14"},{"expression":{"id":2562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2556,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4913:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2558,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"4928:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2559,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4942:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2563,"nodeType":"ExpressionStatement","src":"4913:36:14"},{"expression":{"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2564,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"4983:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2566,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"4998:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2567,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"5012:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2571,"nodeType":"ExpressionStatement","src":"4983:36:14"},{"expression":{"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2572,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"5054:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2574,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"5069:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2575,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"5083:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2579,"nodeType":"ExpressionStatement","src":"5054:36:14"},{"expression":{"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2580,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"5524:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2581,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"5533:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2582,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2524,"src":"5541:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2585,"nodeType":"ExpressionStatement","src":"5524:24:14"},{"expression":{"id":2586,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"5569:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2479,"id":2587,"nodeType":"Return","src":"5562:13:14"}]}]},"documentation":{"id":2469,"nodeType":"StructuredDocumentation","src":"1357:305:14","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2590,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:14","nodeType":"FunctionDefinition","parameters":{"id":2476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2471,"mutability":"mutable","name":"x","nameLocation":"1700:1:14","nodeType":"VariableDeclaration","scope":2590,"src":"1692:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2470,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2473,"mutability":"mutable","name":"y","nameLocation":"1719:1:14","nodeType":"VariableDeclaration","scope":2590,"src":"1711:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2472,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2475,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:14","nodeType":"VariableDeclaration","scope":2590,"src":"1730:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2474,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:14"},"returnParameters":{"id":2479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2478,"mutability":"mutable","name":"result","nameLocation":"1787:6:14","nodeType":"VariableDeclaration","scope":2590,"src":"1779:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2477,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:14"},"scope":3242,"src":"1667:3925:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2633,"nodeType":"Block","src":"5872:189:14","statements":[{"assignments":[2606],"declarations":[{"constant":false,"id":2606,"mutability":"mutable","name":"result","nameLocation":"5890:6:14","nodeType":"VariableDeclaration","scope":2633,"src":"5882:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2605,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2612,"initialValue":{"arguments":[{"id":2608,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"5906:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2609,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"5909:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2610,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"5912:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2607,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2590,2634],"referencedDeclaration":2590,"src":"5899:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5899:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:14"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2613,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"5938:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2614,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5950:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2384_$","typeString":"type(enum Math.Rounding)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2382,"src":"5950:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"src":"5938:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2618,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"5972:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2619,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2595,"src":"5975:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2620,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"5978:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2617,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:14","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5965:25:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2630,"nodeType":"IfStatement","src":"5934:98:14","trueBody":{"id":2629,"nodeType":"Block","src":"5996:36:14","statements":[{"expression":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2625,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"6010:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2628,"nodeType":"ExpressionStatement","src":"6010:11:14"}]}},{"expression":{"id":2631,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"6048:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2604,"id":2632,"nodeType":"Return","src":"6041:13:14"}]},"documentation":{"id":2591,"nodeType":"StructuredDocumentation","src":"5598:121:14","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2634,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:14","nodeType":"FunctionDefinition","parameters":{"id":2601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"x","nameLocation":"5757:1:14","nodeType":"VariableDeclaration","scope":2634,"src":"5749:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2595,"mutability":"mutable","name":"y","nameLocation":"5776:1:14","nodeType":"VariableDeclaration","scope":2634,"src":"5768:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2594,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2597,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:14","nodeType":"VariableDeclaration","scope":2634,"src":"5787:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2596,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2600,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:14","nodeType":"VariableDeclaration","scope":2634,"src":"5816:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"typeName":{"id":2599,"nodeType":"UserDefinedTypeName","pathNode":{"id":2598,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"5816:8:14"},"referencedDeclaration":2384,"src":"5816:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:14"},"returnParameters":{"id":2604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2603,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2634,"src":"5863:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:14"},"scope":3242,"src":"5724:337:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2745,"nodeType":"Block","src":"6337:1585:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2642,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"6351:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2648,"nodeType":"IfStatement","src":"6347:45:14","trueBody":{"id":2647,"nodeType":"Block","src":"6359:33:14","statements":[{"expression":{"hexValue":"30","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2641,"id":2646,"nodeType":"Return","src":"6373:8:14"}]}},{"assignments":[2650],"declarations":[{"constant":false,"id":2650,"mutability":"mutable","name":"result","nameLocation":"7079:6:14","nodeType":"VariableDeclaration","scope":2745,"src":"7071:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2649,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2659,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2653,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7099:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2652,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2914,2950],"referencedDeclaration":2914,"src":"7094:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7094:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2657,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:14"},{"id":2744,"nodeType":"UncheckedBlock","src":"7508:408:14","statements":[{"expression":{"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2660,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7532:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2661,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7542:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2662,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7551:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2663,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7555:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2666,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2670,"nodeType":"ExpressionStatement","src":"7532:35:14"},{"expression":{"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2671,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7581:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2672,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7591:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2673,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7600:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2674,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7604:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2681,"nodeType":"ExpressionStatement","src":"7581:35:14"},{"expression":{"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2682,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7630:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2683,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7640:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2684,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7649:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2685,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7653:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2688,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2692,"nodeType":"ExpressionStatement","src":"7630:35:14"},{"expression":{"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2693,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7679:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7689:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2695,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7698:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2696,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7702:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2699,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2703,"nodeType":"ExpressionStatement","src":"7679:35:14"},{"expression":{"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2704,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7728:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2705,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7738:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2706,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7747:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7751:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2710,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2714,"nodeType":"ExpressionStatement","src":"7728:35:14"},{"expression":{"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2715,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7777:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2716,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7787:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2717,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7796:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2718,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7800:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2721,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2725,"nodeType":"ExpressionStatement","src":"7777:35:14"},{"expression":{"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2726,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7826:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2727,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7836:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2728,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7845:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2729,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7849:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2732,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2736,"nodeType":"ExpressionStatement","src":"7826:35:14"},{"expression":{"arguments":[{"id":2738,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7886:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2739,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"7894:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2740,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"7898:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2737,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2420,"src":"7882:3:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7882:23:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2641,"id":2743,"nodeType":"Return","src":"7875:30:14"}]}]},"documentation":{"id":2635,"nodeType":"StructuredDocumentation","src":"6067:208:14","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2746,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:14","nodeType":"FunctionDefinition","parameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"mutability":"mutable","name":"a","nameLocation":"6302:1:14","nodeType":"VariableDeclaration","scope":2746,"src":"6294:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:14"},"returnParameters":{"id":2641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2640,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2746,"src":"6328:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2639,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:14"},"scope":3242,"src":"6280:1642:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2781,"nodeType":"Block","src":"8098:161:14","statements":[{"id":2780,"nodeType":"UncheckedBlock","src":"8108:145:14","statements":[{"assignments":[2758],"declarations":[{"constant":false,"id":2758,"mutability":"mutable","name":"result","nameLocation":"8140:6:14","nodeType":"VariableDeclaration","scope":2780,"src":"8132:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2762,"initialValue":{"arguments":[{"id":2760,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"8154:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2759,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2746,2782],"referencedDeclaration":2746,"src":"8149:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8149:7:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2763,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"8177:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2764,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"8187:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2765,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"8199:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2384_$","typeString":"type(enum Math.Rounding)"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2382,"src":"8199:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"src":"8187:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2768,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"8214:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2769,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"8223:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2771,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"8232:1:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:14","trueExpression":{"hexValue":"31","id":2774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2777,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2756,"id":2779,"nodeType":"Return","src":"8170:72:14"}]}]},"documentation":{"id":2747,"nodeType":"StructuredDocumentation","src":"7928:89:14","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2782,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:14","nodeType":"FunctionDefinition","parameters":{"id":2753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2749,"mutability":"mutable","name":"a","nameLocation":"8044:1:14","nodeType":"VariableDeclaration","scope":2782,"src":"8036:9:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2748,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2752,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:14","nodeType":"VariableDeclaration","scope":2782,"src":"8047:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"typeName":{"id":2751,"nodeType":"UserDefinedTypeName","pathNode":{"id":2750,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"8047:8:14"},"referencedDeclaration":2384,"src":"8047:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:14"},"returnParameters":{"id":2756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2782,"src":"8089:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2754,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:14"},"scope":3242,"src":"8022:237:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2913,"nodeType":"Block","src":"8444:922:14","statements":[{"assignments":[2791],"declarations":[{"constant":false,"id":2791,"mutability":"mutable","name":"result","nameLocation":"8462:6:14","nodeType":"VariableDeclaration","scope":2913,"src":"8454:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2790,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2793,"initialValue":{"hexValue":"30","id":2792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:14"},{"id":2910,"nodeType":"UncheckedBlock","src":"8482:855:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2794,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8510:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2808,"nodeType":"IfStatement","src":"8506:99:14","trueBody":{"id":2807,"nodeType":"Block","src":"8528:77:14","statements":[{"expression":{"id":2801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8546:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2802,"nodeType":"ExpressionStatement","src":"8546:13:14"},{"expression":{"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2803,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"8577:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2806,"nodeType":"ExpressionStatement","src":"8577:13:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2809,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8622:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2823,"nodeType":"IfStatement","src":"8618:96:14","trueBody":{"id":2822,"nodeType":"Block","src":"8639:75:14","statements":[{"expression":{"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8657:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2817,"nodeType":"ExpressionStatement","src":"8657:12:14"},{"expression":{"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2818,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"8687:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2821,"nodeType":"ExpressionStatement","src":"8687:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2824,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8731:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2838,"nodeType":"IfStatement","src":"8727:96:14","trueBody":{"id":2837,"nodeType":"Block","src":"8748:75:14","statements":[{"expression":{"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8766:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2832,"nodeType":"ExpressionStatement","src":"8766:12:14"},{"expression":{"id":2835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2833,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"8796:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2836,"nodeType":"ExpressionStatement","src":"8796:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2839,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8840:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2853,"nodeType":"IfStatement","src":"8836:96:14","trueBody":{"id":2852,"nodeType":"Block","src":"8857:75:14","statements":[{"expression":{"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2844,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8875:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2847,"nodeType":"ExpressionStatement","src":"8875:12:14"},{"expression":{"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2848,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"8905:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2851,"nodeType":"ExpressionStatement","src":"8905:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2854,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8949:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2868,"nodeType":"IfStatement","src":"8945:93:14","trueBody":{"id":2867,"nodeType":"Block","src":"8965:73:14","statements":[{"expression":{"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2859,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"8983:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2862,"nodeType":"ExpressionStatement","src":"8983:11:14"},{"expression":{"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2863,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"9012:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2866,"nodeType":"ExpressionStatement","src":"9012:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9055:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2883,"nodeType":"IfStatement","src":"9051:93:14","trueBody":{"id":2882,"nodeType":"Block","src":"9071:73:14","statements":[{"expression":{"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2874,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9089:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2877,"nodeType":"ExpressionStatement","src":"9089:11:14"},{"expression":{"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2878,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"9118:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2881,"nodeType":"ExpressionStatement","src":"9118:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2884,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9161:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2898,"nodeType":"IfStatement","src":"9157:93:14","trueBody":{"id":2897,"nodeType":"Block","src":"9177:73:14","statements":[{"expression":{"id":2891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2889,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9195:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2892,"nodeType":"ExpressionStatement","src":"9195:11:14"},{"expression":{"id":2895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2893,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"9224:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2896,"nodeType":"ExpressionStatement","src":"9224:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2899,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9267:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2909,"nodeType":"IfStatement","src":"9263:64:14","trueBody":{"id":2908,"nodeType":"Block","src":"9283:44:14","statements":[{"expression":{"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2904,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"9301:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2907,"nodeType":"ExpressionStatement","src":"9301:11:14"}]}}]},{"expression":{"id":2911,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2791,"src":"9353:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2789,"id":2912,"nodeType":"Return","src":"9346:13:14"}]},"documentation":{"id":2783,"nodeType":"StructuredDocumentation","src":"8265:113:14","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2914,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:14","nodeType":"FunctionDefinition","parameters":{"id":2786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2785,"mutability":"mutable","name":"value","nameLocation":"8405:5:14","nodeType":"VariableDeclaration","scope":2914,"src":"8397:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:14"},"returnParameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2788,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2914,"src":"8435:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:14"},"scope":3242,"src":"8383:983:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2949,"nodeType":"Block","src":"9599:165:14","statements":[{"id":2948,"nodeType":"UncheckedBlock","src":"9609:149:14","statements":[{"assignments":[2926],"declarations":[{"constant":false,"id":2926,"mutability":"mutable","name":"result","nameLocation":"9641:6:14","nodeType":"VariableDeclaration","scope":2948,"src":"9633:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2925,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2930,"initialValue":{"arguments":[{"id":2928,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"9655:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2927,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2914,2950],"referencedDeclaration":2914,"src":"9650:4:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9650:11:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2931,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"9682:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"id":2935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2932,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"9692:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2933,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"9704:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2384_$","typeString":"type(enum Math.Rounding)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2382,"src":"9704:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"src":"9692:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2926,"src":"9724:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2939,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2917,"src":"9733:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2943,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:14","trueExpression":{"hexValue":"31","id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2945,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2924,"id":2947,"nodeType":"Return","src":"9675:72:14"}]}]},"documentation":{"id":2915,"nodeType":"StructuredDocumentation","src":"9372:142:14","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2950,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:14","nodeType":"FunctionDefinition","parameters":{"id":2921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2917,"mutability":"mutable","name":"value","nameLocation":"9541:5:14","nodeType":"VariableDeclaration","scope":2950,"src":"9533:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2916,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2920,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:14","nodeType":"VariableDeclaration","scope":2950,"src":"9548:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"typeName":{"id":2919,"nodeType":"UserDefinedTypeName","pathNode":{"id":2918,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"9548:8:14"},"referencedDeclaration":2384,"src":"9548:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:14"},"returnParameters":{"id":2924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2950,"src":"9590:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2922,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:14"},"scope":3242,"src":"9519:245:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3078,"nodeType":"Block","src":"9951:828:14","statements":[{"assignments":[2959],"declarations":[{"constant":false,"id":2959,"mutability":"mutable","name":"result","nameLocation":"9969:6:14","nodeType":"VariableDeclaration","scope":3078,"src":"9961:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2958,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2961,"initialValue":{"hexValue":"30","id":2960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:14"},{"id":3075,"nodeType":"UncheckedBlock","src":"9989:761:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2962,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10017:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2965,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2978,"nodeType":"IfStatement","src":"10013:99:14","trueBody":{"id":2977,"nodeType":"Block","src":"10034:78:14","statements":[{"expression":{"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2967,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10052:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2972,"nodeType":"ExpressionStatement","src":"10052:15:14"},{"expression":{"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10085:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2976,"nodeType":"ExpressionStatement","src":"10085:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2979,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10129:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2982,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2995,"nodeType":"IfStatement","src":"10125:99:14","trueBody":{"id":2994,"nodeType":"Block","src":"10146:78:14","statements":[{"expression":{"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10164:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2987,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2989,"nodeType":"ExpressionStatement","src":"10164:15:14"},{"expression":{"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2990,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10197:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2993,"nodeType":"ExpressionStatement","src":"10197:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2996,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10241:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3012,"nodeType":"IfStatement","src":"10237:99:14","trueBody":{"id":3011,"nodeType":"Block","src":"10258:78:14","statements":[{"expression":{"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3001,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10276:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3004,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3003,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:14","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3006,"nodeType":"ExpressionStatement","src":"10276:15:14"},{"expression":{"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3007,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10309:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3008,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3010,"nodeType":"ExpressionStatement","src":"10309:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3013,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10353:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3016,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3014,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3029,"nodeType":"IfStatement","src":"10349:96:14","trueBody":{"id":3028,"nodeType":"Block","src":"10369:76:14","statements":[{"expression":{"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3018,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10387:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3023,"nodeType":"ExpressionStatement","src":"10387:14:14"},{"expression":{"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3024,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10419:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3025,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3027,"nodeType":"ExpressionStatement","src":"10419:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3030,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10462:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3033,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3046,"nodeType":"IfStatement","src":"10458:96:14","trueBody":{"id":3045,"nodeType":"Block","src":"10478:76:14","statements":[{"expression":{"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3035,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10496:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3038,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3040,"nodeType":"ExpressionStatement","src":"10496:14:14"},{"expression":{"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3041,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10528:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3044,"nodeType":"ExpressionStatement","src":"10528:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3047,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10571:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3049,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3063,"nodeType":"IfStatement","src":"10567:96:14","trueBody":{"id":3062,"nodeType":"Block","src":"10587:76:14","statements":[{"expression":{"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3052,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10605:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3055,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:14","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3057,"nodeType":"ExpressionStatement","src":"10605:14:14"},{"expression":{"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3058,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10637:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3061,"nodeType":"ExpressionStatement","src":"10637:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2953,"src":"10680:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3074,"nodeType":"IfStatement","src":"10676:64:14","trueBody":{"id":3073,"nodeType":"Block","src":"10696:44:14","statements":[{"expression":{"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3069,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10714:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3072,"nodeType":"ExpressionStatement","src":"10714:11:14"}]}}]},{"expression":{"id":3076,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2959,"src":"10766:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2957,"id":3077,"nodeType":"Return","src":"10759:13:14"}]},"documentation":{"id":2951,"nodeType":"StructuredDocumentation","src":"9770:114:14","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3079,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:14","nodeType":"FunctionDefinition","parameters":{"id":2954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2953,"mutability":"mutable","name":"value","nameLocation":"9912:5:14","nodeType":"VariableDeclaration","scope":3079,"src":"9904:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2952,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:14"},"returnParameters":{"id":2957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3079,"src":"9942:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2955,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:14"},"scope":3242,"src":"9889:890:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3114,"nodeType":"Block","src":"11014:165:14","statements":[{"id":3113,"nodeType":"UncheckedBlock","src":"11024:149:14","statements":[{"assignments":[3091],"declarations":[{"constant":false,"id":3091,"mutability":"mutable","name":"result","nameLocation":"11056:6:14","nodeType":"VariableDeclaration","scope":3113,"src":"11048:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3090,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3095,"initialValue":{"arguments":[{"id":3093,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"11071:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3092,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3079,3115],"referencedDeclaration":3079,"src":"11065:5:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11065:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11098:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3097,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3085,"src":"11108:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3098,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"11120:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2384_$","typeString":"type(enum Math.Rounding)"}},"id":3099,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2382,"src":"11120:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"src":"11108:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:14","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3102,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"11139:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3104,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"11148:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:14","trueExpression":{"hexValue":"31","id":3107,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3110,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3089,"id":3112,"nodeType":"Return","src":"11091:71:14"}]}]},"documentation":{"id":3080,"nodeType":"StructuredDocumentation","src":"10785:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3115,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:14","nodeType":"FunctionDefinition","parameters":{"id":3086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"value","nameLocation":"10956:5:14","nodeType":"VariableDeclaration","scope":3115,"src":"10948:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3081,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3085,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:14","nodeType":"VariableDeclaration","scope":3115,"src":"10963:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"typeName":{"id":3084,"nodeType":"UserDefinedTypeName","pathNode":{"id":3083,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"10963:8:14"},"referencedDeclaration":2384,"src":"10963:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:14"},"returnParameters":{"id":3089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3115,"src":"11005:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3087,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:14"},"scope":3242,"src":"10933:246:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3201,"nodeType":"Block","src":"11493:600:14","statements":[{"assignments":[3124],"declarations":[{"constant":false,"id":3124,"mutability":"mutable","name":"result","nameLocation":"11511:6:14","nodeType":"VariableDeclaration","scope":3201,"src":"11503:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3123,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3126,"initialValue":{"hexValue":"30","id":3125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:14"},{"id":3198,"nodeType":"UncheckedBlock","src":"11531:533:14","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11559:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3141,"nodeType":"IfStatement","src":"11555:98:14","trueBody":{"id":3140,"nodeType":"Block","src":"11577:76:14","statements":[{"expression":{"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3132,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11595:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:14","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3135,"nodeType":"ExpressionStatement","src":"11595:13:14"},{"expression":{"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3136,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"11626:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3139,"nodeType":"ExpressionStatement","src":"11626:12:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11670:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3156,"nodeType":"IfStatement","src":"11666:95:14","trueBody":{"id":3155,"nodeType":"Block","src":"11687:74:14","statements":[{"expression":{"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11705:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:14","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3150,"nodeType":"ExpressionStatement","src":"11705:12:14"},{"expression":{"id":3153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3151,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"11735:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3154,"nodeType":"ExpressionStatement","src":"11735:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11778:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3171,"nodeType":"IfStatement","src":"11774:95:14","trueBody":{"id":3170,"nodeType":"Block","src":"11795:74:14","statements":[{"expression":{"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11813:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:14","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3165,"nodeType":"ExpressionStatement","src":"11813:12:14"},{"expression":{"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3166,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"11843:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:14","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3169,"nodeType":"ExpressionStatement","src":"11843:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3172,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11886:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3186,"nodeType":"IfStatement","src":"11882:95:14","trueBody":{"id":3185,"nodeType":"Block","src":"11903:74:14","statements":[{"expression":{"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11921:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:14","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3180,"nodeType":"ExpressionStatement","src":"11921:12:14"},{"expression":{"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3181,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"11951:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:14","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3184,"nodeType":"ExpressionStatement","src":"11951:11:14"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3187,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3118,"src":"11994:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3197,"nodeType":"IfStatement","src":"11990:64:14","trueBody":{"id":3196,"nodeType":"Block","src":"12010:44:14","statements":[{"expression":{"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3192,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"12028:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3195,"nodeType":"ExpressionStatement","src":"12028:11:14"}]}}]},{"expression":{"id":3199,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3124,"src":"12080:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3122,"id":3200,"nodeType":"Return","src":"12073:13:14"}]},"documentation":{"id":3116,"nodeType":"StructuredDocumentation","src":"11185:240:14","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3202,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:14","nodeType":"FunctionDefinition","parameters":{"id":3119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3118,"mutability":"mutable","name":"value","nameLocation":"11454:5:14","nodeType":"VariableDeclaration","scope":3202,"src":"11446:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3117,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:14"},"returnParameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3202,"src":"11484:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3120,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:14"},"scope":3242,"src":"11430:663:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3240,"nodeType":"Block","src":"12329:173:14","statements":[{"id":3239,"nodeType":"UncheckedBlock","src":"12339:157:14","statements":[{"assignments":[3214],"declarations":[{"constant":false,"id":3214,"mutability":"mutable","name":"result","nameLocation":"12371:6:14","nodeType":"VariableDeclaration","scope":3239,"src":"12363:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3213,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3218,"initialValue":{"arguments":[{"id":3216,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"12387:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3215,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3202,3241],"referencedDeclaration":3202,"src":"12380:6:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12380:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:14"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3219,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"12414:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3220,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"12424:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3221,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"12436:8:14","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2384_$","typeString":"type(enum Math.Rounding)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2382,"src":"12436:11:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"src":"12424:23:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3225,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3214,"src":"12457:6:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":3226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:14","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3228,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3230,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"12471:5:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:14","trueExpression":{"hexValue":"31","id":3233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:14","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:14","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3212,"id":3238,"nodeType":"Return","src":"12407:78:14"}]}]},"documentation":{"id":3203,"nodeType":"StructuredDocumentation","src":"12099:143:14","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3241,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:14","nodeType":"FunctionDefinition","parameters":{"id":3209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3205,"mutability":"mutable","name":"value","nameLocation":"12271:5:14","nodeType":"VariableDeclaration","scope":3241,"src":"12263:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3204,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3208,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:14","nodeType":"VariableDeclaration","scope":3241,"src":"12278:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"},"typeName":{"id":3207,"nodeType":"UserDefinedTypeName","pathNode":{"id":3206,"name":"Rounding","nodeType":"IdentifierPath","referencedDeclaration":2384,"src":"12278:8:14"},"referencedDeclaration":2384,"src":"12278:8:14","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2384","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:14"},"returnParameters":{"id":3212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3241,"src":"12320:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:14"},"scope":3242,"src":"12247:255:14","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3243,"src":"202:12302:14","usedErrors":[]}],"src":"103:12402:14"},"id":14},"contracts/ERC721Promotion.sol":{"ast":{"absolutePath":"contracts/ERC721Promotion.sol","exportedSymbols":{"Address":[1709],"Context":[1731],"Counters":[1805],"ERC165":[2365],"ERC721":[1093],"ERC721Promotion":[3501],"ERC721URIStorage":[1352],"IERC165":[2377],"IERC721":[1209],"IERC721Metadata":[1379],"IERC721Receiver":[1227],"IMessageRecipient":[4501],"Math":[3242],"Ownable":[112],"Strings":[1980]},"id":3502,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3244,"literals":["solidity","^","0.8",".14"],"nodeType":"PragmaDirective","src":"33:24:15"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":3245,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3502,"sourceUnit":1094,"src":"61:57:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":3246,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3502,"sourceUnit":1353,"src":"120:78:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3247,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3502,"sourceUnit":113,"src":"200:52:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":3248,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3502,"sourceUnit":1806,"src":"254:52:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMessageRecipient.sol","file":"./interfaces/IMessageRecipient.sol","id":3249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3502,"sourceUnit":4502,"src":"308:44:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3250,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1093,"src":"389:6:15"},"id":3251,"nodeType":"InheritanceSpecifier","src":"389:6:15"},{"baseName":{"id":3252,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":1352,"src":"402:16:15"},"id":3253,"nodeType":"InheritanceSpecifier","src":"402:16:15"},{"baseName":{"id":3254,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"425:7:15"},"id":3255,"nodeType":"InheritanceSpecifier","src":"425:7:15"},{"baseName":{"id":3256,"name":"IMessageRecipient","nodeType":"IdentifierPath","referencedDeclaration":4501,"src":"439:17:15"},"id":3257,"nodeType":"InheritanceSpecifier","src":"439:17:15"}],"canonicalName":"ERC721Promotion","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3501,"linearizedBaseContracts":[3501,4501,112,1352,1093,1379,1209,2365,2377,1731],"name":"ERC721Promotion","nameLocation":"365:15:15","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3261,"libraryName":{"id":3258,"name":"Counters","nodeType":"IdentifierPath","referencedDeclaration":1805,"src":"471:8:15"},"nodeType":"UsingForDirective","src":"465:36:15","typeName":{"id":3260,"nodeType":"UserDefinedTypeName","pathNode":{"id":3259,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":1737,"src":"484:16:15"},"referencedDeclaration":1737,"src":"484:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":3264,"mutability":"mutable","name":"_tokenIdCounter","nameLocation":"534:15:15","nodeType":"VariableDeclaration","scope":3501,"src":"509:40:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage","typeString":"struct Counters.Counter"},"typeName":{"id":3263,"nodeType":"UserDefinedTypeName","pathNode":{"id":3262,"name":"Counters.Counter","nodeType":"IdentifierPath","referencedDeclaration":1737,"src":"509:16:15"},"referencedDeclaration":1737,"src":"509:16:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"constant":false,"functionSelector":"4f8aaac6","id":3266,"mutability":"mutable","name":"badgeTokenURI","nameLocation":"572:13:15","nodeType":"VariableDeclaration","scope":3501,"src":"558:27:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":3265,"name":"string","nodeType":"ElementaryTypeName","src":"558:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"public"},{"constant":false,"functionSelector":"b212ba9f","id":3268,"mutability":"mutable","name":"amountOfClaimsPerPerson","nameLocation":"607:23:15","nodeType":"VariableDeclaration","scope":3501,"src":"592:38:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3267,"name":"uint256","nodeType":"ElementaryTypeName","src":"592:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"id":3272,"mutability":"mutable","name":"claimerToClaimsCount","nameLocation":"662:20:15","nodeType":"VariableDeclaration","scope":3501,"src":"637:45:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3271,"keyType":{"id":3269,"name":"address","nodeType":"ElementaryTypeName","src":"645:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"637:24:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":3270,"name":"uint","nodeType":"ElementaryTypeName","src":"656:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"functionSelector":"d5438eae","id":3274,"mutability":"immutable","name":"mailbox","nameLocation":"714:7:15","nodeType":"VariableDeclaration","scope":3501,"src":"689:32:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3273,"name":"address","nodeType":"ElementaryTypeName","src":"689:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"6769a0c4","id":3276,"mutability":"mutable","name":"promoter","nameLocation":"743:8:15","nodeType":"VariableDeclaration","scope":3501,"src":"728:23:15","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3275,"name":"address","nodeType":"ElementaryTypeName","src":"728:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64","id":3282,"name":"ClaimedPromotion","nameLocation":"766:16:15","nodeType":"EventDefinition","parameters":{"id":3281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3278,"indexed":false,"mutability":"mutable","name":"claimer","nameLocation":"791:7:15","nodeType":"VariableDeclaration","scope":3282,"src":"783:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3277,"name":"address","nodeType":"ElementaryTypeName","src":"783:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3280,"indexed":false,"mutability":"mutable","name":"claimCount","nameLocation":"805:10:15","nodeType":"VariableDeclaration","scope":3282,"src":"800:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3279,"name":"uint","nodeType":"ElementaryTypeName","src":"800:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"782:34:15"},"src":"760:57:15"},{"body":{"id":3317,"nodeType":"Block","src":"1068:176:15","statements":[{"expression":{"arguments":[{"id":3302,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3288,"src":"1091:9:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3301,"name":"setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3454,"src":"1079:11:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory)"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1079:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3304,"nodeType":"ExpressionStatement","src":"1079:22:15"},{"expression":{"id":3307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3305,"name":"amountOfClaimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"1112:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3306,"name":"_amountOfClaimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"1138:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1112:50:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3308,"nodeType":"ExpressionStatement","src":"1112:50:15"},{"expression":{"id":3311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3309,"name":"mailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"1173:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3310,"name":"_mailboxAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"1183:15:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1173:25:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3312,"nodeType":"ExpressionStatement","src":"1173:25:15"},{"expression":{"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3313,"name":"promoter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3276,"src":"1209:8:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3314,"name":"_promoterAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3290,"src":"1220:16:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1209:27:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3316,"nodeType":"ExpressionStatement","src":"1209:27:15"}]},"id":3318,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3297,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"1054:4:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3298,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3286,"src":"1060:6:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":3299,"kind":"baseConstructorSpecifier","modifierName":{"id":3296,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1093,"src":"1047:6:15"},"nodeType":"ModifierInvocation","src":"1047:20:15"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3284,"mutability":"mutable","name":"name","nameLocation":"861:4:15","nodeType":"VariableDeclaration","scope":3318,"src":"847:18:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3283,"name":"string","nodeType":"ElementaryTypeName","src":"847:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3286,"mutability":"mutable","name":"symbol","nameLocation":"890:6:15","nodeType":"VariableDeclaration","scope":3318,"src":"876:20:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3285,"name":"string","nodeType":"ElementaryTypeName","src":"876:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3288,"mutability":"mutable","name":"_tokenURI","nameLocation":"921:9:15","nodeType":"VariableDeclaration","scope":3318,"src":"907:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3287,"name":"string","nodeType":"ElementaryTypeName","src":"907:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3290,"mutability":"mutable","name":"_promoterAddress","nameLocation":"949:16:15","nodeType":"VariableDeclaration","scope":3318,"src":"941:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3289,"name":"address","nodeType":"ElementaryTypeName","src":"941:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3292,"mutability":"mutable","name":"_amountOfClaimsPerPerson","nameLocation":"981:24:15","nodeType":"VariableDeclaration","scope":3318,"src":"976:29:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3291,"name":"uint","nodeType":"ElementaryTypeName","src":"976:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3294,"mutability":"mutable","name":"_mailboxAddress","nameLocation":"1024:15:15","nodeType":"VariableDeclaration","scope":3318,"src":"1016:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3293,"name":"address","nodeType":"ElementaryTypeName","src":"1016:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:210:15"},"returnParameters":{"id":3300,"nodeType":"ParameterList","parameters":[],"src":"1068:0:15"},"scope":3501,"src":"825:419:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3328,"nodeType":"Block","src":"1275:61:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3321,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1294:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1294:10:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3323,"name":"mailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3274,"src":"1308:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1294:21:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1286:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1286:30:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3326,"nodeType":"ExpressionStatement","src":"1286:30:15"},{"id":3327,"nodeType":"PlaceholderStatement","src":"1327:1:15"}]},"id":3329,"name":"onlyMailbox","nameLocation":"1261:11:15","nodeType":"ModifierDefinition","parameters":{"id":3319,"nodeType":"ParameterList","parameters":[],"src":"1272:2:15"},"src":"1252:84:15","virtual":false,"visibility":"internal"},{"baseFunctions":[4500],"body":{"id":3375,"nodeType":"Block","src":"1470:355:15","statements":[{"assignments":[3341],"declarations":[{"constant":false,"id":3341,"mutability":"mutable","name":"claimer","nameLocation":"1489:7:15","nodeType":"VariableDeclaration","scope":3375,"src":"1481:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3340,"name":"address","nodeType":"ElementaryTypeName","src":"1481:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3349,"initialValue":{"arguments":[{"id":3344,"name":"_body","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3335,"src":"1510:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":3346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1518:7:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3345,"name":"address","nodeType":"ElementaryTypeName","src":"1518:7:15","typeDescriptions":{}}}],"id":3347,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1517:9:15","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":3342,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1499:3:15","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3343,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"1499:10:15","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1499:28:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"1481:46:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3350,"name":"claimerToClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"1542:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3352,"indexExpression":{"id":3351,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"1563:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1542:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1575:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1542:34:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3373,"nodeType":"Block","src":"1628:190:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3361,"name":"claimerToClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"1669:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3363,"indexExpression":{"id":3362,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"1690:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1669:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3364,"name":"amountOfClaimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3268,"src":"1701:23:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1669:55:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f206d6f726520636c61696d73","id":3366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1743:16:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8","typeString":"literal_string \"No more claims\""},"value":"No more claims"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8","typeString":"literal_string \"No more claims\""}],"id":3360,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1643:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1643:131:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3368,"nodeType":"ExpressionStatement","src":"1643:131:15"},{"expression":{"arguments":[{"id":3370,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"1798:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3369,"name":"addClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"1789:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1789:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3372,"nodeType":"ExpressionStatement","src":"1789:17:15"}]},"id":3374,"nodeType":"IfStatement","src":"1538:280:15","trueBody":{"id":3359,"nodeType":"Block","src":"1578:44:15","statements":[{"expression":{"arguments":[{"id":3356,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"1602:7:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3355,"name":"safeMint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3423,"src":"1593:8:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1593:17:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3358,"nodeType":"ExpressionStatement","src":"1593:17:15"}]}}]},"functionSelector":"56d5d475","id":3376,"implemented":true,"kind":"function","modifiers":[{"id":3338,"kind":"modifierInvocation","modifierName":{"id":3337,"name":"onlyMailbox","nodeType":"IdentifierPath","referencedDeclaration":3329,"src":"1458:11:15"},"nodeType":"ModifierInvocation","src":"1458:11:15"}],"name":"handle","nameLocation":"1353:6:15","nodeType":"FunctionDefinition","parameters":{"id":3336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3331,"mutability":"mutable","name":"_origin","nameLocation":"1377:7:15","nodeType":"VariableDeclaration","scope":3376,"src":"1370:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3330,"name":"uint32","nodeType":"ElementaryTypeName","src":"1370:6:15","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3333,"mutability":"mutable","name":"_sender","nameLocation":"1403:7:15","nodeType":"VariableDeclaration","scope":3376,"src":"1395:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3332,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1395:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3335,"mutability":"mutable","name":"_body","nameLocation":"1436:5:15","nodeType":"VariableDeclaration","scope":3376,"src":"1421:20:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3334,"name":"bytes","nodeType":"ElementaryTypeName","src":"1421:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1359:89:15"},"returnParameters":{"id":3339,"nodeType":"ParameterList","parameters":[],"src":"1470:0:15"},"scope":3501,"src":"1344:481:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3422,"nodeType":"Block","src":"1872:329:15","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3382,"name":"claimerToClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"1891:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3384,"indexExpression":{"id":3383,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"1912:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1891:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1919:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1891:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416c7265616479206f776e73204e4654","id":3387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1922:18:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_9be9078bc2dcbc6c3629b9da278d490ac9d795e9ec5876f150ca46dc0fcec847","typeString":"literal_string \"Already owns NFT\""},"value":"Already owns NFT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9be9078bc2dcbc6c3629b9da278d490ac9d795e9ec5876f150ca46dc0fcec847","typeString":"literal_string \"Already owns NFT\""}],"id":3381,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1883:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1883:58:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3389,"nodeType":"ExpressionStatement","src":"1883:58:15"},{"assignments":[3391],"declarations":[{"constant":false,"id":3391,"mutability":"mutable","name":"tokenId","nameLocation":"1960:7:15","nodeType":"VariableDeclaration","scope":3422,"src":"1952:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3390,"name":"uint256","nodeType":"ElementaryTypeName","src":"1952:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3395,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3392,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"1970:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage","typeString":"struct Counters.Counter storage ref"}},"id":3393,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"current","nodeType":"MemberAccess","referencedDeclaration":1749,"src":"1970:23:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$1737_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$1737_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":3394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1970:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1952:43:15"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3396,"name":"_tokenIdCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"2006:15:15","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$1737_storage","typeString":"struct Counters.Counter storage ref"}},"id":3398,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":1763,"src":"2006:25:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$1737_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$1737_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":3399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2006:27:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3400,"nodeType":"ExpressionStatement","src":"2006:27:15"},{"expression":{"arguments":[{"id":3402,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"2054:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3403,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"2058:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3401,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[661,690],"referencedDeclaration":661,"src":"2044:9:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2044:22:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3405,"nodeType":"ExpressionStatement","src":"2044:22:15"},{"expression":{"arguments":[{"id":3407,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"2090:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3408,"name":"badgeTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"2099:13:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":3406,"name":"_setTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1321,"src":"2077:12:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (uint256,string memory)"}},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2077:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3410,"nodeType":"ExpressionStatement","src":"2077:36:15"},{"expression":{"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3411,"name":"claimerToClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2124:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3413,"indexExpression":{"id":3412,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"2145:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2124:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":3414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2151:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:28:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3416,"nodeType":"ExpressionStatement","src":"2124:28:15"},{"eventCall":{"arguments":[{"id":3418,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3378,"src":"2187:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"31","id":3419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2191:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3417,"name":"ClaimedPromotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"2170:16:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2170:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3421,"nodeType":"EmitStatement","src":"2165:28:15"}]},"id":3423,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"1842:8:15","nodeType":"FunctionDefinition","parameters":{"id":3379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3378,"mutability":"mutable","name":"to","nameLocation":"1859:2:15","nodeType":"VariableDeclaration","scope":3423,"src":"1851:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"1851:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1850:12:15"},"returnParameters":{"id":3380,"nodeType":"ParameterList","parameters":[],"src":"1872:0:15"},"scope":3501,"src":"1833:368:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3441,"nodeType":"Block","src":"2248:112:15","statements":[{"expression":{"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3428,"name":"claimerToClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2259:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3430,"indexExpression":{"id":3429,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"2280:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2259:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2287:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2259:29:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3433,"nodeType":"ExpressionStatement","src":"2259:29:15"},{"eventCall":{"arguments":[{"id":3435,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"2323:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3436,"name":"claimerToClaimsCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3272,"src":"2327:20:15","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3438,"indexExpression":{"id":3437,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"2348:2:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2327:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3434,"name":"ClaimedPromotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3282,"src":"2306:16:15","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2306:46:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3440,"nodeType":"EmitStatement","src":"2301:51:15"}]},"id":3442,"implemented":true,"kind":"function","modifiers":[],"name":"addClaim","nameLocation":"2218:8:15","nodeType":"FunctionDefinition","parameters":{"id":3426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3425,"mutability":"mutable","name":"to","nameLocation":"2235:2:15","nodeType":"VariableDeclaration","scope":3442,"src":"2227:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3424,"name":"address","nodeType":"ElementaryTypeName","src":"2227:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2226:12:15"},"returnParameters":{"id":3427,"nodeType":"ParameterList","parameters":[],"src":"2248:0:15"},"scope":3501,"src":"2209:151:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3453,"nodeType":"Block","src":"2431:44:15","statements":[{"expression":{"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3449,"name":"badgeTokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3266,"src":"2442:13:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3450,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3444,"src":"2458:9:15","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2442:25:15","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3452,"nodeType":"ExpressionStatement","src":"2442:25:15"}]},"functionSelector":"e0df5b6f","id":3454,"implemented":true,"kind":"function","modifiers":[{"id":3447,"kind":"modifierInvocation","modifierName":{"id":3446,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2421:9:15"},"nodeType":"ModifierInvocation","src":"2421:9:15"}],"name":"setTokenURI","nameLocation":"2377:11:15","nodeType":"FunctionDefinition","parameters":{"id":3445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3444,"mutability":"mutable","name":"_tokenURI","nameLocation":"2403:9:15","nodeType":"VariableDeclaration","scope":3454,"src":"2389:23:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3443,"name":"string","nodeType":"ElementaryTypeName","src":"2389:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2388:25:15"},"returnParameters":{"id":3448,"nodeType":"ParameterList","parameters":[],"src":"2431:0:15"},"scope":3501,"src":"2368:107:15","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1064],"body":{"id":3470,"nodeType":"Block","src":"2665:55:15","statements":[{"expression":{"arguments":[{"hexValue":"43616e6e6f74207472616e73666572207468697320746f6b656e","id":3467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2683:28:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_da787f2021bdec5d8797a44acf6cf4c1edf6db8e95008f35f806a7547b513141","typeString":"literal_string \"Cannot transfer this token\""},"value":"Cannot transfer this token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da787f2021bdec5d8797a44acf6cf4c1edf6db8e95008f35f806a7547b513141","typeString":"literal_string \"Cannot transfer this token\""}],"id":3466,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2676:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2676:36:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3469,"nodeType":"ExpressionStatement","src":"2676:36:15"}]},"id":3471,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"2516:20:15","nodeType":"FunctionDefinition","overrides":{"id":3464,"nodeType":"OverrideSpecifier","overrides":[],"src":"2656:8:15"},"parameters":{"id":3463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3456,"mutability":"mutable","name":"from","nameLocation":"2555:4:15","nodeType":"VariableDeclaration","scope":3471,"src":"2547:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3455,"name":"address","nodeType":"ElementaryTypeName","src":"2547:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"to","nameLocation":"2578:2:15","nodeType":"VariableDeclaration","scope":3471,"src":"2570:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3457,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3460,"mutability":"mutable","name":"firstTokenId","nameLocation":"2599:12:15","nodeType":"VariableDeclaration","scope":3471,"src":"2591:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3459,"name":"uint256","nodeType":"ElementaryTypeName","src":"2591:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3462,"mutability":"mutable","name":"batchSize","nameLocation":"2630:9:15","nodeType":"VariableDeclaration","scope":3471,"src":"2622:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3461,"name":"uint256","nodeType":"ElementaryTypeName","src":"2622:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2536:110:15"},"returnParameters":{"id":3465,"nodeType":"ParameterList","parameters":[],"src":"2665:0:15"},"scope":3501,"src":"2507:213:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[834,1351],"body":{"id":3483,"nodeType":"Block","src":"2897:71:15","statements":[{"expression":{"arguments":[{"hexValue":"44697361626c6564","id":3480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2915:10:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc706b0562d4d0480fd55e80d6bbe5abb3f248e31fb8d00e56119227634d3ed3","typeString":"literal_string \"Disabled\""},"value":"Disabled"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cc706b0562d4d0480fd55e80d6bbe5abb3f248e31fb8d00e56119227634d3ed3","typeString":"literal_string \"Disabled\""}],"id":3479,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2908:6:15","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3481,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2908:18:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3482,"nodeType":"ExpressionStatement","src":"2908:18:15"}]},"id":3484,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"2807:5:15","nodeType":"FunctionDefinition","overrides":{"id":3477,"nodeType":"OverrideSpecifier","overrides":[{"id":3475,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1093,"src":"2866:6:15"},{"id":3476,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":1352,"src":"2874:16:15"}],"src":"2857:34:15"},"parameters":{"id":3474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3473,"mutability":"mutable","name":"tokenId","nameLocation":"2821:7:15","nodeType":"VariableDeclaration","scope":3484,"src":"2813:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:17:15"},"returnParameters":{"id":3478,"nodeType":"ParameterList","parameters":[],"src":"2897:0:15"},"scope":3501,"src":"2798:170:15","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[371,1299],"body":{"id":3499,"nodeType":"Block","src":"3123:49:15","statements":[{"expression":{"arguments":[{"id":3496,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"3156:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3494,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"3141:5:15","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721Promotion_$3501_$","typeString":"type(contract super ERC721Promotion)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":1299,"src":"3141:14:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3141:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3493,"id":3498,"nodeType":"Return","src":"3134:30:15"}]},"functionSelector":"c87b56dd","id":3500,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2985:8:15","nodeType":"FunctionDefinition","overrides":{"id":3490,"nodeType":"OverrideSpecifier","overrides":[{"id":3488,"name":"ERC721","nodeType":"IdentifierPath","referencedDeclaration":1093,"src":"3059:6:15"},{"id":3489,"name":"ERC721URIStorage","nodeType":"IdentifierPath","referencedDeclaration":1352,"src":"3067:16:15"}],"src":"3050:34:15"},"parameters":{"id":3487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3486,"mutability":"mutable","name":"tokenId","nameLocation":"3002:7:15","nodeType":"VariableDeclaration","scope":3500,"src":"2994:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3485,"name":"uint256","nodeType":"ElementaryTypeName","src":"2994:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2993:17:15"},"returnParameters":{"id":3493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3500,"src":"3103:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3491,"name":"string","nodeType":"ElementaryTypeName","src":"3103:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3102:15:15"},"scope":3501,"src":"2976:196:15","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":3502,"src":"356:2819:15","usedErrors":[]}],"src":"33:3144:15"},"id":15},"contracts/PromotionMain.sol":{"ast":{"absolutePath":"contracts/PromotionMain.sol","exportedSymbols":{"Address":[1709],"Context":[1731],"Counters":[1805],"ECDSA":[2341],"ERC165":[2365],"ERC721":[1093],"ERC721Promotion":[3501],"ERC721URIStorage":[1352],"IERC165":[2377],"IERC721":[1209],"IERC721Metadata":[1379],"IERC721Receiver":[1227],"IInterchainGasPaymaster":[4451],"IInterchainQueryRouter":[4467],"IMailbox":[4488],"IMessageRecipient":[4501],"IReceiver":[4510],"Math":[3242],"Ownable":[112],"PromotionMain":[4193],"ReentrancyGuard":[166],"Strings":[1980]},"id":4194,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3503,"literals":["solidity","^","0.8",".14"],"nodeType":"PragmaDirective","src":"33:24:16"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":3504,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":113,"src":"61:52:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":3505,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":167,"src":"115:62:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":3506,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":2342,"src":"179:62:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IInterchainQueryRouter.sol","file":"./interfaces/IInterchainQueryRouter.sol","id":3507,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":4468,"src":"245:49:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMailbox.sol","file":"./interfaces/IMailbox.sol","id":3508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":4489,"src":"296:35:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IInterchainGasPaymaster.sol","file":"./interfaces/IInterchainGasPaymaster.sol","id":3509,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":4452,"src":"333:50:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IReceiver.sol","file":"./interfaces/IReceiver.sol","id":3510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":4511,"src":"385:36:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ERC721Promotion.sol","file":"./ERC721Promotion.sol","id":3511,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4194,"sourceUnit":3502,"src":"423:31:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3512,"name":"Ownable","nodeType":"IdentifierPath","referencedDeclaration":112,"src":"484:7:16"},"id":3513,"nodeType":"InheritanceSpecifier","src":"484:7:16"},{"baseName":{"id":3514,"name":"ReentrancyGuard","nodeType":"IdentifierPath","referencedDeclaration":166,"src":"493:15:16"},"id":3515,"nodeType":"InheritanceSpecifier","src":"493:15:16"}],"canonicalName":"PromotionMain","contractDependencies":[3501],"contractKind":"contract","fullyImplemented":true,"id":4193,"linearizedBaseContracts":[4193,166,112,1731],"name":"PromotionMain","nameLocation":"467:13:16","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3518,"libraryName":{"id":3516,"name":"ECDSA","nodeType":"IdentifierPath","referencedDeclaration":2341,"src":"522:5:16"},"nodeType":"UsingForDirective","src":"516:24:16","typeName":{"id":3517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"532:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"canonicalName":"PromotionMain.Receiver","id":3525,"members":[{"constant":false,"id":3520,"mutability":"mutable","name":"destinationReceiverAddress","nameLocation":"581:26:16","nodeType":"VariableDeclaration","scope":3525,"src":"573:34:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"573:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3522,"mutability":"mutable","name":"destinationMailbox","nameLocation":"626:18:16","nodeType":"VariableDeclaration","scope":3525,"src":"618:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3521,"name":"address","nodeType":"ElementaryTypeName","src":"618:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3524,"mutability":"mutable","name":"isExists","nameLocation":"660:8:16","nodeType":"VariableDeclaration","scope":3525,"src":"655:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3523,"name":"bool","nodeType":"ElementaryTypeName","src":"655:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Receiver","nameLocation":"553:8:16","nodeType":"StructDefinition","scope":4193,"src":"546:130:16","visibility":"public"},{"canonicalName":"PromotionMain.Promotion","id":3538,"members":[{"constant":false,"id":3527,"mutability":"mutable","name":"promotionAddress","nameLocation":"720:16:16","nodeType":"VariableDeclaration","scope":3538,"src":"712:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3526,"name":"address","nodeType":"ElementaryTypeName","src":"712:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3529,"mutability":"mutable","name":"destinationDomain","nameLocation":"754:17:16","nodeType":"VariableDeclaration","scope":3538,"src":"747:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3528,"name":"uint32","nodeType":"ElementaryTypeName","src":"747:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3531,"mutability":"mutable","name":"creator","nameLocation":"790:7:16","nodeType":"VariableDeclaration","scope":3538,"src":"782:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3530,"name":"address","nodeType":"ElementaryTypeName","src":"782:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3533,"mutability":"mutable","name":"createdAt","nameLocation":"813:9:16","nodeType":"VariableDeclaration","scope":3538,"src":"808:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3532,"name":"uint","nodeType":"ElementaryTypeName","src":"808:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3535,"mutability":"mutable","name":"claimsPerPerson","nameLocation":"838:15:16","nodeType":"VariableDeclaration","scope":3538,"src":"833:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3534,"name":"uint","nodeType":"ElementaryTypeName","src":"833:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3537,"mutability":"mutable","name":"isExists","nameLocation":"869:8:16","nodeType":"VariableDeclaration","scope":3538,"src":"864:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3536,"name":"bool","nodeType":"ElementaryTypeName","src":"864:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Promotion","nameLocation":"691:9:16","nodeType":"StructDefinition","scope":4193,"src":"684:201:16","visibility":"public"},{"canonicalName":"PromotionMain.Claim","id":3547,"members":[{"constant":false,"id":3540,"mutability":"mutable","name":"destinationDomain","nameLocation":"924:17:16","nodeType":"VariableDeclaration","scope":3547,"src":"917:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3539,"name":"uint32","nodeType":"ElementaryTypeName","src":"917:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3542,"mutability":"mutable","name":"promotionAddress","nameLocation":"960:16:16","nodeType":"VariableDeclaration","scope":3547,"src":"952:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3541,"name":"address","nodeType":"ElementaryTypeName","src":"952:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3544,"mutability":"mutable","name":"claimsCount","nameLocation":"992:11:16","nodeType":"VariableDeclaration","scope":3547,"src":"987:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3543,"name":"uint","nodeType":"ElementaryTypeName","src":"987:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3546,"mutability":"mutable","name":"isExists","nameLocation":"1019:8:16","nodeType":"VariableDeclaration","scope":3547,"src":"1014:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3545,"name":"bool","nodeType":"ElementaryTypeName","src":"1014:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Claim","nameLocation":"900:5:16","nodeType":"StructDefinition","scope":4193,"src":"893:142:16","visibility":"public"},{"constant":false,"functionSelector":"ea272e39","id":3552,"mutability":"mutable","name":"promotions","nameLocation":"1080:10:16","nodeType":"VariableDeclaration","scope":4193,"src":"1043:47:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Promotion_$3538_storage_$","typeString":"mapping(bytes32 => struct PromotionMain.Promotion)"},"typeName":{"id":3551,"keyType":{"id":3548,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1051:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1043:29:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Promotion_$3538_storage_$","typeString":"mapping(bytes32 => struct PromotionMain.Promotion)"},"valueType":{"id":3550,"nodeType":"UserDefinedTypeName","pathNode":{"id":3549,"name":"Promotion","nodeType":"IdentifierPath","referencedDeclaration":3538,"src":"1062:9:16"},"referencedDeclaration":3538,"src":"1062:9:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_storage_ptr","typeString":"struct PromotionMain.Promotion"}}},"visibility":"public"},{"constant":false,"functionSelector":"92256c0e","id":3559,"mutability":"mutable","name":"claims","nameLocation":"1179:6:16","nodeType":"VariableDeclaration","scope":4193,"src":"1126:59:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_struct$_Claim_$3547_storage_$_$","typeString":"mapping(bytes32 => mapping(address => struct PromotionMain.Claim))"},"typeName":{"id":3558,"keyType":{"id":3553,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1134:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1126:45:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_struct$_Claim_$3547_storage_$_$","typeString":"mapping(bytes32 => mapping(address => struct PromotionMain.Claim))"},"valueType":{"id":3557,"keyType":{"id":3554,"name":"address","nodeType":"ElementaryTypeName","src":"1153:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1145:25:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Claim_$3547_storage_$","typeString":"mapping(address => struct PromotionMain.Claim)"},"valueType":{"id":3556,"nodeType":"UserDefinedTypeName","pathNode":{"id":3555,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":3547,"src":"1164:5:16"},"referencedDeclaration":3547,"src":"1164:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_storage_ptr","typeString":"struct PromotionMain.Claim"}}}},"visibility":"public"},{"constant":false,"functionSelector":"f8717e8d","id":3563,"mutability":"mutable","name":"gasTank","nameLocation":"1229:7:16","nodeType":"VariableDeclaration","scope":4193,"src":"1194:42:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":3562,"keyType":{"id":3560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1202:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1194:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":3561,"name":"uint256","nodeType":"ElementaryTypeName","src":"1213:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"8b203dd4","id":3568,"mutability":"mutable","name":"chains","nameLocation":"1278:6:16","nodeType":"VariableDeclaration","scope":4193,"src":"1243:41:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver)"},"typeName":{"id":3567,"keyType":{"id":3564,"name":"uint32","nodeType":"ElementaryTypeName","src":"1251:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Mapping","src":"1243:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver)"},"valueType":{"id":3566,"nodeType":"UserDefinedTypeName","pathNode":{"id":3565,"name":"Receiver","nodeType":"IdentifierPath","referencedDeclaration":3525,"src":"1261:8:16"},"referencedDeclaration":3525,"src":"1261:8:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage_ptr","typeString":"struct PromotionMain.Receiver"}}},"visibility":"public"},{"constant":true,"functionSelector":"d5438eae","id":3574,"mutability":"constant","name":"mailbox","nameLocation":"1318:7:16","nodeType":"VariableDeclaration","scope":4193,"src":"1293:96:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMailbox_$4488","typeString":"contract IMailbox"},"typeName":{"id":3570,"nodeType":"UserDefinedTypeName","pathNode":{"id":3569,"name":"IMailbox","nodeType":"IdentifierPath","referencedDeclaration":4488,"src":"1293:8:16"},"referencedDeclaration":4488,"src":"1293:8:16","typeDescriptions":{"typeIdentifier":"t_contract$_IMailbox_$4488","typeString":"contract IMailbox"}},"value":{"arguments":[{"hexValue":"307843433733376139344665636165433136354162436631326445443039354242313346303337363835","id":3572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1346:42:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xCC737a94FecaeC165AbCf12dED095BB13F037685"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3571,"name":"IMailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"1337:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMailbox_$4488_$","typeString":"type(contract IMailbox)"}},"id":3573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1337:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMailbox_$4488","typeString":"contract IMailbox"}},"visibility":"public"},{"constant":true,"functionSelector":"f28b2daa","id":3580,"mutability":"constant","name":"igp","nameLocation":"1436:3:16","nodeType":"VariableDeclaration","scope":4193,"src":"1396:122:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainGasPaymaster_$4451","typeString":"contract IInterchainGasPaymaster"},"typeName":{"id":3576,"nodeType":"UserDefinedTypeName","pathNode":{"id":3575,"name":"IInterchainGasPaymaster","nodeType":"IdentifierPath","referencedDeclaration":4451,"src":"1396:23:16"},"referencedDeclaration":4451,"src":"1396:23:16","typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainGasPaymaster_$4451","typeString":"contract IInterchainGasPaymaster"}},"value":{"arguments":[{"hexValue":"307846393063423832613736343932363134443037423832613736353839313766336143383131416331","id":3578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1475:42:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xF90cB82a76492614D07B82a7658917f3aC811Ac1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3577,"name":"IInterchainGasPaymaster","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"1451:23:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IInterchainGasPaymaster_$4451_$","typeString":"type(contract IInterchainGasPaymaster)"}},"id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1451:67:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainGasPaymaster_$4451","typeString":"contract IInterchainGasPaymaster"}},"visibility":"public"},{"constant":true,"functionSelector":"60cb07d0","id":3586,"mutability":"constant","name":"iqsRouter","nameLocation":"1564:9:16","nodeType":"VariableDeclaration","scope":4193,"src":"1525:126:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainQueryRouter_$4467","typeString":"contract IInterchainQueryRouter"},"typeName":{"id":3582,"nodeType":"UserDefinedTypeName","pathNode":{"id":3581,"name":"IInterchainQueryRouter","nodeType":"IdentifierPath","referencedDeclaration":4467,"src":"1525:22:16"},"referencedDeclaration":4467,"src":"1525:22:16","typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainQueryRouter_$4467","typeString":"contract IInterchainQueryRouter"}},"value":{"arguments":[{"hexValue":"307846373832433643344130326632633731424238613144623031363646414234306561393536383138","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1608:42:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"value":"0xF782C6C4A02f2c71BB8a1Db0166FAB40ea956818"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3583,"name":"IInterchainQueryRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4467,"src":"1585:22:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IInterchainQueryRouter_$4467_$","typeString":"type(contract IInterchainQueryRouter)"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1585:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainQueryRouter_$4467","typeString":"contract IInterchainQueryRouter"}},"visibility":"public"},{"anonymous":false,"eventSelector":"ef1ac31408fb0f3e181fb6722dc323e0bde7b92af909c20f07ae1737e2dd85d3","id":3590,"name":"NewChainAdded","nameLocation":"1666:13:16","nodeType":"EventDefinition","parameters":{"id":3589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3588,"indexed":false,"mutability":"mutable","name":"destinationDomain","nameLocation":"1687:17:16","nodeType":"VariableDeclaration","scope":3590,"src":"1680:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3587,"name":"uint32","nodeType":"ElementaryTypeName","src":"1680:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1679:26:16"},"src":"1660:46:16"},{"anonymous":false,"eventSelector":"1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea","id":3596,"name":"GasTankFilled","nameLocation":"1718:13:16","nodeType":"EventDefinition","parameters":{"id":3595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3592,"indexed":false,"mutability":"mutable","name":"promotionId","nameLocation":"1740:11:16","nodeType":"VariableDeclaration","scope":3596,"src":"1732:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3591,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1732:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3594,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1761:6:16","nodeType":"VariableDeclaration","scope":3596,"src":"1753:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3593,"name":"uint256","nodeType":"ElementaryTypeName","src":"1753:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1731:37:16"},"src":"1712:57:16"},{"anonymous":false,"eventSelector":"5aafa436e7bcce48335a89fd368e909dee8d7387d9349daaed3b167446d6841c","id":3602,"name":"GasTankRefunded","nameLocation":"1781:15:16","nodeType":"EventDefinition","parameters":{"id":3601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3598,"indexed":false,"mutability":"mutable","name":"promotionId","nameLocation":"1805:11:16","nodeType":"VariableDeclaration","scope":3602,"src":"1797:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1797:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3600,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1826:6:16","nodeType":"VariableDeclaration","scope":3602,"src":"1818:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3599,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1796:37:16"},"src":"1775:59:16"},{"anonymous":false,"eventSelector":"d4a6ee30ad1cd3b2f4f9f76e9abd1d4954e098a7aebc8af7c92439acd4889076","id":3618,"name":"PromotionCreated","nameLocation":"1846:16:16","nodeType":"EventDefinition","parameters":{"id":3617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3604,"indexed":false,"mutability":"mutable","name":"promotionId","nameLocation":"1871:11:16","nodeType":"VariableDeclaration","scope":3618,"src":"1863:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1863:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3606,"indexed":false,"mutability":"mutable","name":"promotionAddress","nameLocation":"1891:16:16","nodeType":"VariableDeclaration","scope":3618,"src":"1883:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3605,"name":"address","nodeType":"ElementaryTypeName","src":"1883:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3608,"indexed":false,"mutability":"mutable","name":"destinationDomain","nameLocation":"1915:17:16","nodeType":"VariableDeclaration","scope":3618,"src":"1908:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3607,"name":"uint32","nodeType":"ElementaryTypeName","src":"1908:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3610,"indexed":false,"mutability":"mutable","name":"creator","nameLocation":"1941:7:16","nodeType":"VariableDeclaration","scope":3618,"src":"1933:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3609,"name":"address","nodeType":"ElementaryTypeName","src":"1933:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3612,"indexed":false,"mutability":"mutable","name":"createdAt","nameLocation":"1954:9:16","nodeType":"VariableDeclaration","scope":3618,"src":"1949:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3611,"name":"uint","nodeType":"ElementaryTypeName","src":"1949:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3614,"indexed":false,"mutability":"mutable","name":"claimsPerPerson","nameLocation":"1969:15:16","nodeType":"VariableDeclaration","scope":3618,"src":"1964:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3613,"name":"uint","nodeType":"ElementaryTypeName","src":"1964:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3616,"indexed":false,"mutability":"mutable","name":"badgeURI","nameLocation":"1992:8:16","nodeType":"VariableDeclaration","scope":3618,"src":"1985:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3615,"name":"string","nodeType":"ElementaryTypeName","src":"1985:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1862:139:16"},"src":"1840:162:16"},{"anonymous":false,"eventSelector":"1d784a2e6117c9c7790cd6effb9ad66fee4286853a212a375d7a5c8c7bf175a7","id":3632,"name":"ClaimedPromotion","nameLocation":"2014:16:16","nodeType":"EventDefinition","parameters":{"id":3631,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3620,"indexed":false,"mutability":"mutable","name":"promotionId","nameLocation":"2039:11:16","nodeType":"VariableDeclaration","scope":3632,"src":"2031:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3619,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2031:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3622,"indexed":false,"mutability":"mutable","name":"promotionAddress","nameLocation":"2059:16:16","nodeType":"VariableDeclaration","scope":3632,"src":"2051:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3621,"name":"address","nodeType":"ElementaryTypeName","src":"2051:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3624,"indexed":false,"mutability":"mutable","name":"claimer","nameLocation":"2084:7:16","nodeType":"VariableDeclaration","scope":3632,"src":"2076:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3623,"name":"address","nodeType":"ElementaryTypeName","src":"2076:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3626,"indexed":false,"mutability":"mutable","name":"destinationDomain","nameLocation":"2099:17:16","nodeType":"VariableDeclaration","scope":3632,"src":"2092:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3625,"name":"uint32","nodeType":"ElementaryTypeName","src":"2092:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3628,"indexed":false,"mutability":"mutable","name":"claimsCount","nameLocation":"2122:11:16","nodeType":"VariableDeclaration","scope":3632,"src":"2117:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3627,"name":"uint","nodeType":"ElementaryTypeName","src":"2117:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3630,"indexed":false,"mutability":"mutable","name":"claimedAt","nameLocation":"2139:9:16","nodeType":"VariableDeclaration","scope":3632,"src":"2134:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3629,"name":"uint","nodeType":"ElementaryTypeName","src":"2134:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2030:119:16"},"src":"2008:142:16"},{"body":{"id":3655,"nodeType":"Block","src":"2310:170:16","statements":[{"expression":{"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3643,"name":"chains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"2321:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver storage ref)"}},"id":3645,"indexExpression":{"id":3644,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3634,"src":"2328:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2321:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage","typeString":"struct PromotionMain.Receiver storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3648,"name":"destinationReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3636,"src":"2389:19:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3647,"name":"addressToBytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"2372:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2372:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3650,"name":"destinationMailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3638,"src":"2424:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"74727565","id":3651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2457:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3646,"name":"Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3525,"src":"2349:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Receiver_$3525_storage_ptr_$","typeString":"type(struct PromotionMain.Receiver storage pointer)"}},"id":3652,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2349:123:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_memory_ptr","typeString":"struct PromotionMain.Receiver memory"}},"src":"2321:151:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage","typeString":"struct PromotionMain.Receiver storage ref"}},"id":3654,"nodeType":"ExpressionStatement","src":"2321:151:16"}]},"functionSelector":"2deb22d9","id":3656,"implemented":true,"kind":"function","modifiers":[{"id":3641,"kind":"modifierInvocation","modifierName":{"id":3640,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2300:9:16"},"nodeType":"ModifierInvocation","src":"2300:9:16"}],"name":"addChain","nameLocation":"2167:8:16","nodeType":"FunctionDefinition","parameters":{"id":3639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3634,"mutability":"mutable","name":"destinationDomain","nameLocation":"2193:17:16","nodeType":"VariableDeclaration","scope":3656,"src":"2186:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3633,"name":"uint32","nodeType":"ElementaryTypeName","src":"2186:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3636,"mutability":"mutable","name":"destinationReceiver","nameLocation":"2229:19:16","nodeType":"VariableDeclaration","scope":3656,"src":"2221:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3635,"name":"address","nodeType":"ElementaryTypeName","src":"2221:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3638,"mutability":"mutable","name":"destinationMailbox","nameLocation":"2267:18:16","nodeType":"VariableDeclaration","scope":3656,"src":"2259:26:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3637,"name":"address","nodeType":"ElementaryTypeName","src":"2259:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:117:16"},"returnParameters":{"id":3642,"nodeType":"ParameterList","parameters":[],"src":"2310:0:16"},"scope":4193,"src":"2158:322:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3730,"nodeType":"Block","src":"2723:673:16","statements":[{"assignments":[3674],"declarations":[{"constant":false,"id":3674,"mutability":"mutable","name":"bytecode","nameLocation":"2747:8:16","nodeType":"VariableDeclaration","scope":3730,"src":"2734:21:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3673,"name":"bytes","nodeType":"ElementaryTypeName","src":"2734:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3695,"initialValue":{"arguments":[{"expression":{"arguments":[{"id":3678,"name":"ERC721Promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"2794:15:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Promotion_$3501_$","typeString":"type(contract ERC721Promotion)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_ERC721Promotion_$3501_$","typeString":"type(contract ERC721Promotion)"}],"id":3677,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2789:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2789:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_ERC721Promotion_$3501","typeString":"type(contract ERC721Promotion)"}},"id":3680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"creationCode","nodeType":"MemberAccess","src":"2789:34:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"id":3683,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3658,"src":"2867:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3684,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3660,"src":"2890:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3685,"name":"badgeURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3666,"src":"2915:8:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2942:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2942:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3688,"name":"claimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3664,"src":"2971:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":3689,"name":"chains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"3005:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver storage ref)"}},"id":3691,"indexExpression":{"id":3690,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"3012:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3005:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage","typeString":"struct PromotionMain.Receiver storage ref"}},"id":3692,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"destinationMailbox","nodeType":"MemberAccess","referencedDeclaration":3522,"src":"3005:44:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3681,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2838:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"2838:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2838:226:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3675,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2758:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"2758:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2758:317:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2734:341:16"},{"assignments":[3697],"declarations":[{"constant":false,"id":3697,"mutability":"mutable","name":"hash","nameLocation":"3094:4:16","nodeType":"VariableDeclaration","scope":3730,"src":"3086:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3696,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3086:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3718,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30786666","id":3703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3167:4:16","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"0xff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"}],"id":3702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3160:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes1_$","typeString":"type(bytes1)"},"typeName":{"id":3701,"name":"bytes1","nodeType":"ElementaryTypeName","src":"3160:6:16","typeDescriptions":{}}},"id":3704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3160:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},{"expression":{"baseExpression":{"id":3705,"name":"chains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"3191:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver storage ref)"}},"id":3707,"indexExpression":{"id":3706,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"3198:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3191:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage","typeString":"struct PromotionMain.Receiver storage ref"}},"id":3708,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"destinationReceiverAddress","nodeType":"MemberAccess","referencedDeclaration":3520,"src":"3191:52:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3711,"name":"_salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"3270:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3710,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3262:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:16","typeDescriptions":{}}},"id":3712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3262:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":3714,"name":"bytecode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"3305:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3713,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3295:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3295:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes1","typeString":"bytes1"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3699,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3125:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3700,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"3125:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3125:204:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3698,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3101:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3101:239:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3086:254:16"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3725,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3697,"src":"3381:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3724,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3376:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3723,"name":"uint","nodeType":"ElementaryTypeName","src":"3376:4:16","typeDescriptions":{}}},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3376:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3722,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3368:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3721,"name":"uint160","nodeType":"ElementaryTypeName","src":"3368:7:16","typeDescriptions":{}}},"id":3727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3368:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3360:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3719,"name":"address","nodeType":"ElementaryTypeName","src":"3360:7:16","typeDescriptions":{}}},"id":3728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3360:28:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3672,"id":3729,"nodeType":"Return","src":"3353:35:16"}]},"id":3731,"implemented":true,"kind":"function","modifiers":[],"name":"_getAddress","nameLocation":"2497:11:16","nodeType":"FunctionDefinition","parameters":{"id":3669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3658,"mutability":"mutable","name":"name","nameLocation":"2533:4:16","nodeType":"VariableDeclaration","scope":3731,"src":"2519:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3657,"name":"string","nodeType":"ElementaryTypeName","src":"2519:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3660,"mutability":"mutable","name":"symbol","nameLocation":"2562:6:16","nodeType":"VariableDeclaration","scope":3731,"src":"2548:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3659,"name":"string","nodeType":"ElementaryTypeName","src":"2548:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3662,"mutability":"mutable","name":"destinationDomain","nameLocation":"2586:17:16","nodeType":"VariableDeclaration","scope":3731,"src":"2579:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3661,"name":"uint32","nodeType":"ElementaryTypeName","src":"2579:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3664,"mutability":"mutable","name":"claimsPerPerson","nameLocation":"2619:15:16","nodeType":"VariableDeclaration","scope":3731,"src":"2614:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3663,"name":"uint","nodeType":"ElementaryTypeName","src":"2614:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3666,"mutability":"mutable","name":"badgeURI","nameLocation":"2659:8:16","nodeType":"VariableDeclaration","scope":3731,"src":"2645:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3665,"name":"string","nodeType":"ElementaryTypeName","src":"2645:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3668,"mutability":"mutable","name":"_salt","nameLocation":"2683:5:16","nodeType":"VariableDeclaration","scope":3731,"src":"2678:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3667,"name":"uint","nodeType":"ElementaryTypeName","src":"2678:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2508:187:16"},"returnParameters":{"id":3672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3671,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3731,"src":"2714:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3670,"name":"address","nodeType":"ElementaryTypeName","src":"2714:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2713:9:16"},"scope":4193,"src":"2488:908:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3898,"nodeType":"Block","src":"3635:1979:16","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3747,"name":"chains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"3654:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver storage ref)"}},"id":3749,"indexExpression":{"id":3748,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"3661:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3654:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage","typeString":"struct PromotionMain.Receiver storage ref"}},"id":3750,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isExists","nodeType":"MemberAccess","referencedDeclaration":3524,"src":"3654:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642044657374696e6174696f6e","id":3751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3690:21:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2556b2f0738cda755e8236a64d7e89ba3fe6369211a88de912f9face6e2903e","typeString":"literal_string \"Invalid Destination\""},"value":"Invalid Destination"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2556b2f0738cda755e8236a64d7e89ba3fe6369211a88de912f9face6e2903e","typeString":"literal_string \"Invalid Destination\""}],"id":3746,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3646:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3752,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3646:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3753,"nodeType":"ExpressionStatement","src":"3646:66:16"},{"assignments":[3755],"declarations":[{"constant":false,"id":3755,"mutability":"mutable","name":"message","nameLocation":"3814:7:16","nodeType":"VariableDeclaration","scope":3898,"src":"3801:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3754,"name":"bytes","nodeType":"ElementaryTypeName","src":"3801:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3769,"initialValue":{"arguments":[{"id":3758,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"3849:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3759,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"3868:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3760,"name":"badgeURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"3889:8:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3761,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3912:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3912:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3763,"name":"claimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"3937:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":3766,"name":"_salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"3975:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3967:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3764,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3967:7:16","typeDescriptions":{}}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3967:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3756,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3824:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3757,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"3824:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3824:168:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3801:191:16"},{"assignments":[3771],"declarations":[{"constant":false,"id":3771,"mutability":"mutable","name":"messageId","nameLocation":"4014:9:16","nodeType":"VariableDeclaration","scope":3898,"src":"4006:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4006:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3781,"initialValue":{"arguments":[{"id":3774,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"4057:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"expression":{"baseExpression":{"id":3775,"name":"chains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"4089:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver storage ref)"}},"id":3777,"indexExpression":{"id":3776,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"4096:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage","typeString":"struct PromotionMain.Receiver storage ref"}},"id":3778,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"destinationReceiverAddress","nodeType":"MemberAccess","referencedDeclaration":3520,"src":"4089:52:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3779,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3755,"src":"4156:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3772,"name":"mailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"4026:7:16","typeDescriptions":{"typeIdentifier":"t_contract$_IMailbox_$4488","typeString":"contract IMailbox"}},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"dispatch","nodeType":"MemberAccess","referencedDeclaration":4480,"src":"4026:16:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint32_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint32,bytes32,bytes memory) external returns (bytes32)"}},"id":3780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4026:148:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4006:168:16"},{"assignments":[3783],"declarations":[{"constant":false,"id":3783,"mutability":"mutable","name":"_promotionAddress","nameLocation":"4193:17:16","nodeType":"VariableDeclaration","scope":3898,"src":"4185:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3782,"name":"address","nodeType":"ElementaryTypeName","src":"4185:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3792,"initialValue":{"arguments":[{"id":3785,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"4223:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3786,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"4228:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3787,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"4235:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":3788,"name":"claimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"4253:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3789,"name":"badgeURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"4269:8:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3790,"name":"_salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3743,"src":"4278:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3784,"name":"_getAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"4211:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint32_$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$returns$_t_address_$","typeString":"function (string memory,string memory,uint32,uint256,string memory,uint256) returns (address)"}},"id":3791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4211:73:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4185:99:16"},{"assignments":[3794],"declarations":[{"constant":false,"id":3794,"mutability":"mutable","name":"_promotionId","nameLocation":"4303:12:16","nodeType":"VariableDeclaration","scope":3898,"src":"4295:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4295:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3810,"initialValue":{"arguments":[{"arguments":[{"id":3798,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3733,"src":"4377:4:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3799,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3735,"src":"4400:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":3800,"name":"_promotionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"4425:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3801,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"4461:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":3802,"name":"claimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"4497:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3803,"name":"badgeURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"4531:8:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":3804,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4558:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"4558:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3806,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4587:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"4587:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3796,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4342:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3797,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"4342:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4342:275:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3795,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4318:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4318:310:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4295:333:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3812,"name":"promotions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"4647:10:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Promotion_$3538_storage_$","typeString":"mapping(bytes32 => struct PromotionMain.Promotion storage ref)"}},"id":3814,"indexExpression":{"id":3813,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"4658:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4647:24:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_storage","typeString":"struct PromotionMain.Promotion storage ref"}},"id":3815,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isExists","nodeType":"MemberAccess","referencedDeclaration":3537,"src":"4647:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":3816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4682:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"4647:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50726f6d6f74696f6e20657869737473","id":3818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4688:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ae9e3c5666d5ca47b45182ea29825923fa4f9977167406567efff75efd4f4ebd","typeString":"literal_string \"Promotion exists\""},"value":"Promotion exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ae9e3c5666d5ca47b45182ea29825923fa4f9977167406567efff75efd4f4ebd","typeString":"literal_string \"Promotion exists\""}],"id":3811,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4639:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4639:68:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3820,"nodeType":"ExpressionStatement","src":"4639:68:16"},{"assignments":[3822],"declarations":[{"constant":false,"id":3822,"mutability":"mutable","name":"quotedPayment","nameLocation":"4762:13:16","nodeType":"VariableDeclaration","scope":3898,"src":"4754:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3821,"name":"uint256","nodeType":"ElementaryTypeName","src":"4754:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3826,"initialValue":{"arguments":[{"id":3824,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"4795:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":3823,"name":"getQuotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"4778:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$returns$_t_uint256_$","typeString":"function (uint32) view returns (uint256)"}},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4778:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4754:59:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3828,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4832:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"4832:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3830,"name":"quotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"4845:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4832:26:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420676173","id":3832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4860:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c634a95a0c3be7dc2b531f1778120b691aa9c64ba93349380e714e28f6712829","typeString":"literal_string \"Insufficient gas\""},"value":"Insufficient gas"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c634a95a0c3be7dc2b531f1778120b691aa9c64ba93349380e714e28f6712829","typeString":"literal_string \"Insufficient gas\""}],"id":3827,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4824:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4824:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3834,"nodeType":"ExpressionStatement","src":"4824:55:16"},{"expression":{"id":3843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3835,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"4890:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3837,"indexExpression":{"id":3836,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"4898:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4890:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3838,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4916:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"4916:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3840,"name":"quotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"4926:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4916:23:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3842,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4915:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4890:50:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3844,"nodeType":"ExpressionStatement","src":"4890:50:16"},{"expression":{"arguments":[{"id":3850,"name":"messageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3771,"src":"5041:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3851,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"5065:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"3530303030","id":3852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5097:5:16","typeDescriptions":{"typeIdentifier":"t_rational_50000_by_1","typeString":"int_const 50000"},"value":"50000"},{"expression":{"id":3853,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5117:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5117:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_50000_by_1","typeString":"int_const 50000"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_50000_by_1","typeString":"int_const 50000"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3845,"name":"igp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"4991:3:16","typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainGasPaymaster_$4451","typeString":"contract IInterchainGasPaymaster"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"payForGas","nodeType":"MemberAccess","referencedDeclaration":4441,"src":"4991:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_uint32_$_t_uint256_$_t_address_$returns$__$","typeString":"function (bytes32,uint32,uint256,address) payable external"}},"id":3849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3848,"name":"quotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3822,"src":"5012:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"4991:35:16","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_uint32_$_t_uint256_$_t_address_$returns$__$value","typeString":"function (bytes32,uint32,uint256,address) payable external"}},"id":3855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4991:147:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3856,"nodeType":"ExpressionStatement","src":"4991:147:16"},{"expression":{"id":3870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3857,"name":"promotions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"5189:10:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Promotion_$3538_storage_$","typeString":"mapping(bytes32 => struct PromotionMain.Promotion storage ref)"}},"id":3859,"indexExpression":{"id":3858,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"5200:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5189:24:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_storage","typeString":"struct PromotionMain.Promotion storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3861,"name":"_promotionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"5224:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3862,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"5242:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"expression":{"id":3863,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5260:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5260:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3865,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5271:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"5271:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3867,"name":"claimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"5287:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":3868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5303:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3860,"name":"Promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3538,"src":"5214:9:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Promotion_$3538_storage_ptr_$","typeString":"type(struct PromotionMain.Promotion storage pointer)"}},"id":3869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5214:94:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_memory_ptr","typeString":"struct PromotionMain.Promotion memory"}},"src":"5189:119:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_storage","typeString":"struct PromotionMain.Promotion storage ref"}},"id":3871,"nodeType":"ExpressionStatement","src":"5189:119:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3872,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"5351:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3874,"indexExpression":{"id":3873,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"5359:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5351:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5373:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5351:23:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3885,"nodeType":"IfStatement","src":"5348:119:16","trueBody":{"id":3884,"nodeType":"Block","src":"5385:82:16","statements":[{"eventCall":{"arguments":[{"id":3878,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"5419:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":3879,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"5433:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":3881,"indexExpression":{"id":3880,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"5441:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5433:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3877,"name":"GasTankFilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"5405:13:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5405:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3883,"nodeType":"EmitStatement","src":"5400:55:16"}]}},{"eventCall":{"arguments":[{"id":3887,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3794,"src":"5499:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3888,"name":"_promotionAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"5513:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3889,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"5532:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"expression":{"id":3890,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5550:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"5550:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3892,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5561:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"5561:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3894,"name":"claimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"5578:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3895,"name":"badgeURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"5595:8:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3886,"name":"PromotionCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"5482:16:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint32_$_t_address_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,address,uint32,address,uint256,uint256,string memory)"}},"id":3896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5482:122:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3897,"nodeType":"EmitStatement","src":"5477:127:16"}]},"functionSelector":"9060cd4f","id":3899,"implemented":true,"kind":"function","modifiers":[],"name":"createPromotion","nameLocation":"3417:15:16","nodeType":"FunctionDefinition","parameters":{"id":3744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3733,"mutability":"mutable","name":"name","nameLocation":"3457:4:16","nodeType":"VariableDeclaration","scope":3899,"src":"3443:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3732,"name":"string","nodeType":"ElementaryTypeName","src":"3443:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3735,"mutability":"mutable","name":"symbol","nameLocation":"3486:6:16","nodeType":"VariableDeclaration","scope":3899,"src":"3472:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3734,"name":"string","nodeType":"ElementaryTypeName","src":"3472:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3737,"mutability":"mutable","name":"destinationDomain","nameLocation":"3510:17:16","nodeType":"VariableDeclaration","scope":3899,"src":"3503:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3736,"name":"uint32","nodeType":"ElementaryTypeName","src":"3503:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3739,"mutability":"mutable","name":"claimsPerPerson","nameLocation":"3543:15:16","nodeType":"VariableDeclaration","scope":3899,"src":"3538:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3738,"name":"uint","nodeType":"ElementaryTypeName","src":"3538:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3741,"mutability":"mutable","name":"badgeURI","nameLocation":"3583:8:16","nodeType":"VariableDeclaration","scope":3899,"src":"3569:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3740,"name":"string","nodeType":"ElementaryTypeName","src":"3569:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3743,"mutability":"mutable","name":"_salt","nameLocation":"3607:5:16","nodeType":"VariableDeclaration","scope":3899,"src":"3602:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3742,"name":"uint","nodeType":"ElementaryTypeName","src":"3602:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3432:187:16"},"returnParameters":{"id":3745,"nodeType":"ParameterList","parameters":[],"src":"3635:0:16"},"scope":4193,"src":"3408:2206:16","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":4059,"nodeType":"Block","src":"5787:1613:16","statements":[{"expression":{"arguments":[{"expression":{"baseExpression":{"id":3911,"name":"chains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"5806:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint32_$_t_struct$_Receiver_$3525_storage_$","typeString":"mapping(uint32 => struct PromotionMain.Receiver storage ref)"}},"id":3913,"indexExpression":{"id":3912,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"5813:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5806:25:16","typeDescriptions":{"typeIdentifier":"t_struct$_Receiver_$3525_storage","typeString":"struct PromotionMain.Receiver storage ref"}},"id":3914,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isExists","nodeType":"MemberAccess","referencedDeclaration":3524,"src":"5806:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642044657374696e6174696f6e","id":3915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5842:21:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2556b2f0738cda755e8236a64d7e89ba3fe6369211a88de912f9face6e2903e","typeString":"literal_string \"Invalid Destination\""},"value":"Invalid Destination"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2556b2f0738cda755e8236a64d7e89ba3fe6369211a88de912f9face6e2903e","typeString":"literal_string \"Invalid Destination\""}],"id":3910,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5798:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5798:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3917,"nodeType":"ExpressionStatement","src":"5798:66:16"},{"assignments":[3920],"declarations":[{"constant":false,"id":3920,"mutability":"mutable","name":"_promotion","nameLocation":"5892:10:16","nodeType":"VariableDeclaration","scope":4059,"src":"5875:27:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_memory_ptr","typeString":"struct PromotionMain.Promotion"},"typeName":{"id":3919,"nodeType":"UserDefinedTypeName","pathNode":{"id":3918,"name":"Promotion","nodeType":"IdentifierPath","referencedDeclaration":3538,"src":"5875:9:16"},"referencedDeclaration":3538,"src":"5875:9:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_storage_ptr","typeString":"struct PromotionMain.Promotion"}},"visibility":"internal"}],"id":3924,"initialValue":{"baseExpression":{"id":3921,"name":"promotions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"5903:10:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Promotion_$3538_storage_$","typeString":"mapping(bytes32 => struct PromotionMain.Promotion storage ref)"}},"id":3923,"indexExpression":{"id":3922,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"5914:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5903:24:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_storage","typeString":"struct PromotionMain.Promotion storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5875:52:16"},{"assignments":[3927],"declarations":[{"constant":false,"id":3927,"mutability":"mutable","name":"_claim","nameLocation":"5951:6:16","nodeType":"VariableDeclaration","scope":4059,"src":"5938:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_memory_ptr","typeString":"struct PromotionMain.Claim"},"typeName":{"id":3926,"nodeType":"UserDefinedTypeName","pathNode":{"id":3925,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":3547,"src":"5938:5:16"},"referencedDeclaration":3547,"src":"5938:5:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_storage_ptr","typeString":"struct PromotionMain.Claim"}},"visibility":"internal"}],"id":3933,"initialValue":{"baseExpression":{"baseExpression":{"id":3928,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"5958:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_struct$_Claim_$3547_storage_$_$","typeString":"mapping(bytes32 => mapping(address => struct PromotionMain.Claim storage ref))"}},"id":3930,"indexExpression":{"id":3929,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"5965:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5958:20:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Claim_$3547_storage_$","typeString":"mapping(address => struct PromotionMain.Claim storage ref)"}},"id":3932,"indexExpression":{"id":3931,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"5979:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5958:29:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_storage","typeString":"struct PromotionMain.Claim storage ref"}},"nodeType":"VariableDeclarationStatement","src":"5938:49:16"},{"assignments":[3935],"declarations":[{"constant":false,"id":3935,"mutability":"mutable","name":"_contractAddress","nameLocation":"6006:16:16","nodeType":"VariableDeclaration","scope":4059,"src":"5998:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3934,"name":"address","nodeType":"ElementaryTypeName","src":"5998:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3938,"initialValue":{"expression":{"id":3936,"name":"_promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"6023:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_memory_ptr","typeString":"struct PromotionMain.Promotion memory"}},"id":3937,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"promotionAddress","nodeType":"MemberAccess","referencedDeclaration":3527,"src":"6023:27:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5998:52:16"},{"assignments":[3940],"declarations":[{"constant":false,"id":3940,"mutability":"mutable","name":"hash","nameLocation":"6069:4:16","nodeType":"VariableDeclaration","scope":4059,"src":"6061:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6061:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3951,"initialValue":{"arguments":[{"arguments":[{"id":3944,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"6135:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3945,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"6166:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":3946,"name":"_contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3935,"src":"6202:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3947,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6237:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6237:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3942,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6100:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3943,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"6100:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6100:163:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3941,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6076:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6076:198:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6061:213:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3955,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3905,"src":"6306:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":3953,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"6293:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":2107,"src":"6293:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$bound_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":3956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6293:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3957,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"6320:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6293:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"756e617574686f72697a6564","id":3959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6329:14:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348","typeString":"literal_string \"unauthorized\""},"value":"unauthorized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348","typeString":"literal_string \"unauthorized\""}],"id":3952,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6285:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6285:59:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3961,"nodeType":"ExpressionStatement","src":"6285:59:16"},{"expression":{"arguments":[{"expression":{"id":3963,"name":"_promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"6363:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_memory_ptr","typeString":"struct PromotionMain.Promotion memory"}},"id":3964,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isExists","nodeType":"MemberAccess","referencedDeclaration":3537,"src":"6363:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642050726f6d6f74696f6e","id":3965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6384:19:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f40ae2896ad121a1cccc8ecbad485b8bf64b8051c59b33816d2ceafe3540118","typeString":"literal_string \"Invalid Promotion\""},"value":"Invalid Promotion"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6f40ae2896ad121a1cccc8ecbad485b8bf64b8051c59b33816d2ceafe3540118","typeString":"literal_string \"Invalid Promotion\""}],"id":3962,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6355:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6355:49:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3967,"nodeType":"ExpressionStatement","src":"6355:49:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6437:16:16","subExpression":{"expression":{"id":3969,"name":"_claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"6438:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_memory_ptr","typeString":"struct PromotionMain.Claim memory"}},"id":3970,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"isExists","nodeType":"MemberAccess","referencedDeclaration":3546,"src":"6438:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3972,"name":"_promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"6474:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_memory_ptr","typeString":"struct PromotionMain.Promotion memory"}},"id":3973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"claimsPerPerson","nodeType":"MemberAccess","referencedDeclaration":3535,"src":"6474:26:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3974,"name":"_claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"6520:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_memory_ptr","typeString":"struct PromotionMain.Claim memory"}},"id":3975,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"claimsCount","nodeType":"MemberAccess","referencedDeclaration":3544,"src":"6520:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6474:64:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6437:101:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f206d6f726520636c61696d73","id":3978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6553:16:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8","typeString":"literal_string \"No more claims\""},"value":"No more claims"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8","typeString":"literal_string \"No more claims\""}],"id":3968,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6415:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6415:165:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3980,"nodeType":"ExpressionStatement","src":"6415:165:16"},{"assignments":[3982],"declarations":[{"constant":false,"id":3982,"mutability":"mutable","name":"message","nameLocation":"6606:7:16","nodeType":"VariableDeclaration","scope":4059,"src":"6593:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3981,"name":"bytes","nodeType":"ElementaryTypeName","src":"6593:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3987,"initialValue":{"arguments":[{"id":3985,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"6627:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3983,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6616:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3984,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"6616:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6616:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"6593:42:16"},{"assignments":[3989],"declarations":[{"constant":false,"id":3989,"mutability":"mutable","name":"messageId","nameLocation":"6654:9:16","nodeType":"VariableDeclaration","scope":4059,"src":"6646:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3988,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6646:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3998,"initialValue":{"arguments":[{"id":3992,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"6697:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"id":3994,"name":"_contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3935,"src":"6746:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3993,"name":"addressToBytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4192,"src":"6729:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_bytes32_$","typeString":"function (address) pure returns (bytes32)"}},"id":3995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6729:34:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3996,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3982,"src":"6778:7:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3990,"name":"mailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"6666:7:16","typeDescriptions":{"typeIdentifier":"t_contract$_IMailbox_$4488","typeString":"contract IMailbox"}},"id":3991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"dispatch","nodeType":"MemberAccess","referencedDeclaration":4480,"src":"6666:16:16","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint32_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (uint32,bytes32,bytes memory) external returns (bytes32)"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6666:130:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6646:150:16"},{"assignments":[4000],"declarations":[{"constant":false,"id":4000,"mutability":"mutable","name":"quotedPayment","nameLocation":"6817:13:16","nodeType":"VariableDeclaration","scope":4059,"src":"6809:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3999,"name":"uint256","nodeType":"ElementaryTypeName","src":"6809:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4004,"initialValue":{"arguments":[{"id":4002,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"6850:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"id":4001,"name":"getQuotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4173,"src":"6833:16:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint32_$returns$_t_uint256_$","typeString":"function (uint32) view returns (uint256)"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6833:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6809:59:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4006,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"6887:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4008,"indexExpression":{"id":4007,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"6895:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6887:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4009,"name":"quotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"6912:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6887:38:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420676173","id":4011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6927:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c634a95a0c3be7dc2b531f1778120b691aa9c64ba93349380e714e28f6712829","typeString":"literal_string \"Insufficient gas\""},"value":"Insufficient gas"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c634a95a0c3be7dc2b531f1778120b691aa9c64ba93349380e714e28f6712829","typeString":"literal_string \"Insufficient gas\""}],"id":4005,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6879:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6879:67:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4013,"nodeType":"ExpressionStatement","src":"6879:67:16"},{"expression":{"arguments":[{"id":4019,"name":"messageId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"7007:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4020,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"7031:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"hexValue":"3530303030","id":4021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7063:5:16","typeDescriptions":{"typeIdentifier":"t_rational_50000_by_1","typeString":"int_const 50000"},"value":"50000"},{"expression":{"id":4022,"name":"_promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3920,"src":"7083:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_memory_ptr","typeString":"struct PromotionMain.Promotion memory"}},"id":4023,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":3531,"src":"7083:18:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_50000_by_1","typeString":"int_const 50000"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_rational_50000_by_1","typeString":"int_const 50000"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4014,"name":"igp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"6957:3:16","typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainGasPaymaster_$4451","typeString":"contract IInterchainGasPaymaster"}},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"payForGas","nodeType":"MemberAccess","referencedDeclaration":4441,"src":"6957:13:16","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_uint32_$_t_uint256_$_t_address_$returns$__$","typeString":"function (bytes32,uint32,uint256,address) payable external"}},"id":4018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4017,"name":"quotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4000,"src":"6978:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"6957:35:16","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_bytes32_$_t_uint32_$_t_uint256_$_t_address_$returns$__$value","typeString":"function (bytes32,uint32,uint256,address) payable external"}},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6957:155:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4025,"nodeType":"ExpressionStatement","src":"6957:155:16"},{"assignments":[4027],"declarations":[{"constant":false,"id":4027,"mutability":"mutable","name":"_currentClaims","nameLocation":"7128:14:16","nodeType":"VariableDeclaration","scope":4059,"src":"7123:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4026,"name":"uint","nodeType":"ElementaryTypeName","src":"7123:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4030,"initialValue":{"expression":{"id":4028,"name":"_claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3927,"src":"7143:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_memory_ptr","typeString":"struct PromotionMain.Claim memory"}},"id":4029,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"claimsCount","nodeType":"MemberAccess","referencedDeclaration":3544,"src":"7143:18:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7123:38:16"},{"expression":{"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":4031,"name":"claims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"7172:6:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_struct$_Claim_$3547_storage_$_$","typeString":"mapping(bytes32 => mapping(address => struct PromotionMain.Claim storage ref))"}},"id":4034,"indexExpression":{"id":4032,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"7179:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7172:20:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Claim_$3547_storage_$","typeString":"mapping(address => struct PromotionMain.Claim storage ref)"}},"id":4035,"indexExpression":{"id":4033,"name":"claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3907,"src":"7193:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7172:29:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_storage","typeString":"struct PromotionMain.Claim storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4037,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"7208:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":4038,"name":"_contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3935,"src":"7226:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4039,"name":"_currentClaims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"7243:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7258:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7243:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":4042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7260:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4036,"name":"Claim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"7202:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Claim_$3547_storage_ptr_$","typeString":"type(struct PromotionMain.Claim storage pointer)"}},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7202:63:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_memory_ptr","typeString":"struct PromotionMain.Claim memory"}},"src":"7172:93:16","typeDescriptions":{"typeIdentifier":"t_struct$_Claim_$3547_storage","typeString":"struct PromotionMain.Claim storage ref"}},"id":4045,"nodeType":"ExpressionStatement","src":"7172:93:16"},{"eventCall":{"arguments":[{"id":4047,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3901,"src":"7300:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4048,"name":"_contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3935,"src":"7313:16:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4049,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7330:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7330:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4051,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"7341:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4052,"name":"_currentClaims","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4027,"src":"7359:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7374:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7359:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4055,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7376:5:16","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"7376:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4046,"name":"ClaimedPromotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3632,"src":"7283:16:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint32,uint256,uint256)"}},"id":4057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7283:109:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4058,"nodeType":"EmitStatement","src":"7278:114:16"}]},"functionSelector":"59da575a","id":4060,"implemented":true,"kind":"function","modifiers":[],"name":"claimPromotion","nameLocation":"5631:14:16","nodeType":"FunctionDefinition","parameters":{"id":3908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3901,"mutability":"mutable","name":"_promotionId","nameLocation":"5664:12:16","nodeType":"VariableDeclaration","scope":4060,"src":"5656:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3900,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5656:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3903,"mutability":"mutable","name":"destinationDomain","nameLocation":"5694:17:16","nodeType":"VariableDeclaration","scope":4060,"src":"5687:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3902,"name":"uint32","nodeType":"ElementaryTypeName","src":"5687:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3905,"mutability":"mutable","name":"signature","nameLocation":"5737:9:16","nodeType":"VariableDeclaration","scope":4060,"src":"5722:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3904,"name":"bytes","nodeType":"ElementaryTypeName","src":"5722:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3907,"mutability":"mutable","name":"claimer","nameLocation":"5765:7:16","nodeType":"VariableDeclaration","scope":4060,"src":"5757:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3906,"name":"address","nodeType":"ElementaryTypeName","src":"5757:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5645:134:16"},"returnParameters":{"id":3909,"nodeType":"ParameterList","parameters":[],"src":"5787:0:16"},"scope":4193,"src":"5622:1778:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4079,"nodeType":"Block","src":"7462:119:16","statements":[{"expression":{"id":4070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4065,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"7473:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4067,"indexExpression":{"id":4066,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"7481:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7473:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":4068,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7498:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"7498:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7473:34:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4071,"nodeType":"ExpressionStatement","src":"7473:34:16"},{"eventCall":{"arguments":[{"id":4073,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"7537:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":4074,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"7551:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4076,"indexExpression":{"id":4075,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4062,"src":"7559:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7551:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4072,"name":"GasTankFilled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"7523:13:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7523:50:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4078,"nodeType":"EmitStatement","src":"7518:55:16"}]},"functionSelector":"d8b0857f","id":4080,"implemented":true,"kind":"function","modifiers":[],"name":"fillGas","nameLocation":"7417:7:16","nodeType":"FunctionDefinition","parameters":{"id":4063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4062,"mutability":"mutable","name":"_promotionId","nameLocation":"7433:12:16","nodeType":"VariableDeclaration","scope":4080,"src":"7425:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4061,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7425:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7424:22:16"},"returnParameters":{"id":4064,"nodeType":"ParameterList","parameters":[],"src":"7462:0:16"},"scope":4193,"src":"7408:173:16","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":4150,"nodeType":"Block","src":"7663:510:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4090,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7682:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"7682:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"baseExpression":{"id":4092,"name":"promotions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3552,"src":"7696:10:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_Promotion_$3538_storage_$","typeString":"mapping(bytes32 => struct PromotionMain.Promotion storage ref)"}},"id":4094,"indexExpression":{"id":4093,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7707:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7696:24:16","typeDescriptions":{"typeIdentifier":"t_struct$_Promotion_$3538_storage","typeString":"struct PromotionMain.Promotion storage ref"}},"id":4095,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":3531,"src":"7696:32:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7682:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"556e617574686f72697a6564","id":4097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7730:14:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5","typeString":"literal_string \"Unauthorized\""},"value":"Unauthorized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5","typeString":"literal_string \"Unauthorized\""}],"id":4089,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7674:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7674:71:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4099,"nodeType":"ExpressionStatement","src":"7674:71:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4101,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"7764:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4103,"indexExpression":{"id":4102,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7772:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7764:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7788:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7764:25:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f2062616c616e6365","id":4106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7791:12:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_397f20c9ee670e88dbc97000732216e0936c9de3d4dedf79ef5a506c8a043cf4","typeString":"literal_string \"No balance\""},"value":"No balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_397f20c9ee670e88dbc97000732216e0936c9de3d4dedf79ef5a506c8a043cf4","typeString":"literal_string \"No balance\""}],"id":4100,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7756:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7756:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4108,"nodeType":"ExpressionStatement","src":"7756:48:16"},{"assignments":[4110,4112],"declarations":[{"constant":false,"id":4110,"mutability":"mutable","name":"success","nameLocation":"7821:7:16","nodeType":"VariableDeclaration","scope":4150,"src":"7816:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4109,"name":"bool","nodeType":"ElementaryTypeName","src":"7816:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4112,"mutability":"mutable","name":"data","nameLocation":"7843:4:16","nodeType":"VariableDeclaration","scope":4150,"src":"7830:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4111,"name":"bytes","nodeType":"ElementaryTypeName","src":"7830:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4124,"initialValue":{"arguments":[{"hexValue":"","id":4122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7923:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"id":4115,"name":"_to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4084,"src":"7859:3:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7851:8:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4113,"name":"address","nodeType":"ElementaryTypeName","src":"7851:8:16","stateMutability":"payable","typeDescriptions":{}}},"id":4116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7851:12:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"7851:17:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"baseExpression":{"id":4118,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"7890:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4120,"indexExpression":{"id":4119,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7898:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7890:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"7851:71:16","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7851:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7815:111:16"},{"condition":{"id":4125,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4110,"src":"7941:7:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4148,"nodeType":"Block","src":"8123:43:16","statements":[{"expression":{"arguments":[{"hexValue":"4661696c6564","id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8145:8:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_329b6695cc078fec6f5eaa1763a4568ff856dfa63ebfa86719d6a43e911ffb23","typeString":"literal_string \"Failed\""},"value":"Failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_329b6695cc078fec6f5eaa1763a4568ff856dfa63ebfa86719d6a43e911ffb23","typeString":"literal_string \"Failed\""}],"id":4144,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8138:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8138:16:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4147,"nodeType":"ExpressionStatement","src":"8138:16:16"}]},"id":4149,"nodeType":"IfStatement","src":"7937:229:16","trueBody":{"id":4143,"nodeType":"Block","src":"7950:167:16","statements":[{"assignments":[4127],"declarations":[{"constant":false,"id":4127,"mutability":"mutable","name":"_gasAmount","nameLocation":"7970:10:16","nodeType":"VariableDeclaration","scope":4143,"src":"7965:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4126,"name":"uint","nodeType":"ElementaryTypeName","src":"7965:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4131,"initialValue":{"baseExpression":{"id":4128,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"7983:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4130,"indexExpression":{"id":4129,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7991:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7983:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7965:39:16"},{"expression":{"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4132,"name":"gasTank","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3563,"src":"8019:7:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":4134,"indexExpression":{"id":4133,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"8027:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8019:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8043:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8019:25:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4137,"nodeType":"ExpressionStatement","src":"8019:25:16"},{"eventCall":{"arguments":[{"id":4139,"name":"_promotionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"8080:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4140,"name":"_gasAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4127,"src":"8094:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4138,"name":"GasTankRefunded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3602,"src":"8064:15:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8064:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4142,"nodeType":"EmitStatement","src":"8059:46:16"}]}}]},"functionSelector":"cade147d","id":4151,"implemented":true,"kind":"function","modifiers":[{"id":4087,"kind":"modifierInvocation","modifierName":{"id":4086,"name":"nonReentrant","nodeType":"IdentifierPath","referencedDeclaration":142,"src":"7650:12:16"},"nodeType":"ModifierInvocation","src":"7650:12:16"}],"name":"refundGas","nameLocation":"7598:9:16","nodeType":"FunctionDefinition","parameters":{"id":4085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4082,"mutability":"mutable","name":"_promotionId","nameLocation":"7616:12:16","nodeType":"VariableDeclaration","scope":4151,"src":"7608:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7608:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4084,"mutability":"mutable","name":"_to","nameLocation":"7638:3:16","nodeType":"VariableDeclaration","scope":4151,"src":"7630:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4083,"name":"address","nodeType":"ElementaryTypeName","src":"7630:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7607:35:16"},"returnParameters":{"id":4088,"nodeType":"ParameterList","parameters":[],"src":"7663:0:16"},"scope":4193,"src":"7589:584:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4172,"nodeType":"Block","src":"8311:196:16","statements":[{"assignments":[4159],"declarations":[{"constant":false,"id":4159,"mutability":"mutable","name":"gasAmount","nameLocation":"8330:9:16","nodeType":"VariableDeclaration","scope":4172,"src":"8322:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4158,"name":"uint256","nodeType":"ElementaryTypeName","src":"8322:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4161,"initialValue":{"hexValue":"3530303030","id":4160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8342:5:16","typeDescriptions":{"typeIdentifier":"t_rational_50000_by_1","typeString":"int_const 50000"},"value":"50000"},"nodeType":"VariableDeclarationStatement","src":"8322:25:16"},{"assignments":[4163],"declarations":[{"constant":false,"id":4163,"mutability":"mutable","name":"quotedPayment","nameLocation":"8366:13:16","nodeType":"VariableDeclaration","scope":4172,"src":"8358:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4162,"name":"uint256","nodeType":"ElementaryTypeName","src":"8358:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4169,"initialValue":{"arguments":[{"id":4166,"name":"destinationDomain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4153,"src":"8416:17:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":4167,"name":"gasAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"8448:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4164,"name":"igp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3580,"src":"8382:3:16","typeDescriptions":{"typeIdentifier":"t_contract$_IInterchainGasPaymaster_$4451","typeString":"contract IInterchainGasPaymaster"}},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"quoteGasPayment","nodeType":"MemberAccess","referencedDeclaration":4450,"src":"8382:19:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint32_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint32,uint256) view external returns (uint256)"}},"id":4168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8382:86:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8358:110:16"},{"expression":{"id":4170,"name":"quotedPayment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4163,"src":"8486:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4157,"id":4171,"nodeType":"Return","src":"8479:20:16"}]},"functionSelector":"0ff96663","id":4173,"implemented":true,"kind":"function","modifiers":[],"name":"getQuotedPayment","nameLocation":"8206:16:16","nodeType":"FunctionDefinition","parameters":{"id":4154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4153,"mutability":"mutable","name":"destinationDomain","nameLocation":"8230:17:16","nodeType":"VariableDeclaration","scope":4173,"src":"8223:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4152,"name":"uint32","nodeType":"ElementaryTypeName","src":"8223:6:16","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"8222:26:16"},"returnParameters":{"id":4157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4173,"src":"8297:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4155,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8296:9:16"},"scope":4193,"src":"8197:310:16","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4191,"nodeType":"Block","src":"8616:58:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":4186,"name":"_addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4175,"src":"8658:5:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8650:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4184,"name":"uint160","nodeType":"ElementaryTypeName","src":"8650:7:16","typeDescriptions":{}}},"id":4187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8650:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8642:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4182,"name":"uint256","nodeType":"ElementaryTypeName","src":"8642:7:16","typeDescriptions":{}}},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8642:23:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8634:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8634:7:16","typeDescriptions":{}}},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8634:32:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4179,"id":4190,"nodeType":"Return","src":"8627:39:16"}]},"id":4192,"implemented":true,"kind":"function","modifiers":[],"name":"addressToBytes32","nameLocation":"8552:16:16","nodeType":"FunctionDefinition","parameters":{"id":4176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4175,"mutability":"mutable","name":"_addr","nameLocation":"8577:5:16","nodeType":"VariableDeclaration","scope":4192,"src":"8569:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4174,"name":"address","nodeType":"ElementaryTypeName","src":"8569:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8568:15:16"},"returnParameters":{"id":4179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4192,"src":"8607:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8607:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8606:9:16"},"scope":4193,"src":"8543:131:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4194,"src":"458:8219:16","usedErrors":[]}],"src":"33:8646:16"},"id":16},"contracts/Receiver.sol":{"ast":{"absolutePath":"contracts/Receiver.sol","exportedSymbols":{"Address":[1709],"Context":[1731],"Counters":[1805],"ERC165":[2365],"ERC721":[1093],"ERC721Promotion":[3501],"ERC721URIStorage":[1352],"IERC165":[2377],"IERC721":[1209],"IERC721Metadata":[1379],"IERC721Receiver":[1227],"IMessageRecipient":[4501],"Math":[3242],"Ownable":[112],"Receiver":[4418],"Strings":[1980]},"id":4419,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4195,"literals":["solidity","^","0.8",".14"],"nodeType":"PragmaDirective","src":"33:24:17"},{"absolutePath":"contracts/interfaces/IMessageRecipient.sol","file":"./interfaces/IMessageRecipient.sol","id":4196,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4419,"sourceUnit":4502,"src":"61:44:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ERC721Promotion.sol","file":"./ERC721Promotion.sol","id":4197,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4419,"sourceUnit":3502,"src":"107:31:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4198,"name":"IMessageRecipient","nodeType":"IdentifierPath","referencedDeclaration":4501,"src":"163:17:17"},"id":4199,"nodeType":"InheritanceSpecifier","src":"163:17:17"}],"canonicalName":"Receiver","contractDependencies":[3501],"contractKind":"contract","fullyImplemented":true,"id":4418,"linearizedBaseContracts":[4418,4501],"name":"Receiver","nameLocation":"151:8:17","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2b951aa3","id":4203,"mutability":"mutable","name":"latestPromotionDeployment","nameLocation":"223:25:17","nodeType":"VariableDeclaration","scope":4418,"src":"188:60:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":4202,"keyType":{"id":4200,"name":"address","nodeType":"ElementaryTypeName","src":"196:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"188:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":4201,"name":"address","nodeType":"ElementaryTypeName","src":"207:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"7d45933b","id":4207,"mutability":"mutable","name":"deploymentCreator","nameLocation":"290:17:17","nodeType":"VariableDeclaration","scope":4418,"src":"255:52:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"typeName":{"id":4206,"keyType":{"id":4204,"name":"address","nodeType":"ElementaryTypeName","src":"263:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"255:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"},"valueType":{"id":4205,"name":"address","nodeType":"ElementaryTypeName","src":"274:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"functionSelector":"d5438eae","id":4209,"mutability":"immutable","name":"mailbox","nameLocation":"339:7:17","nodeType":"VariableDeclaration","scope":4418,"src":"314:32:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4208,"name":"address","nodeType":"ElementaryTypeName","src":"314:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"body":{"id":4218,"nodeType":"Block","src":"392:44:17","statements":[{"expression":{"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4214,"name":"mailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4209,"src":"403:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4215,"name":"_mailboxAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4211,"src":"413:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"403:25:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4217,"nodeType":"ExpressionStatement","src":"403:25:17"}]},"id":4219,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4211,"mutability":"mutable","name":"_mailboxAddress","nameLocation":"375:15:17","nodeType":"VariableDeclaration","scope":4219,"src":"367:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4210,"name":"address","nodeType":"ElementaryTypeName","src":"367:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"366:25:17"},"returnParameters":{"id":4213,"nodeType":"ParameterList","parameters":[],"src":"392:0:17"},"scope":4418,"src":"355:81:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"anonymous":false,"eventSelector":"1b71783b8dedd09b09a23e4631acfd5d04520f7e3c3c9ff1a7fa55aa32834ed2","id":4223,"name":"PromotionNFTDeployed","nameLocation":"450:20:17","nodeType":"EventDefinition","parameters":{"id":4222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4221,"indexed":false,"mutability":"mutable","name":"promotionNFTAddress","nameLocation":"479:19:17","nodeType":"VariableDeclaration","scope":4223,"src":"471:27:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4220,"name":"address","nodeType":"ElementaryTypeName","src":"471:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"470:29:17"},"src":"444:56:17"},{"anonymous":false,"eventSelector":"4c76bac06cb8c6c3a184c7ca049a43e32e126ecccc406b612f103653d9cb0717","id":4231,"name":"TokenURIChanged","nameLocation":"512:15:17","nodeType":"EventDefinition","parameters":{"id":4230,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4225,"indexed":false,"mutability":"mutable","name":"contractAddress","nameLocation":"546:15:17","nodeType":"VariableDeclaration","scope":4231,"src":"538:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4224,"name":"address","nodeType":"ElementaryTypeName","src":"538:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4227,"indexed":false,"mutability":"mutable","name":"creator","nameLocation":"580:7:17","nodeType":"VariableDeclaration","scope":4231,"src":"572:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4226,"name":"address","nodeType":"ElementaryTypeName","src":"572:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4229,"indexed":false,"mutability":"mutable","name":"newURI","nameLocation":"605:6:17","nodeType":"VariableDeclaration","scope":4231,"src":"598:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4228,"name":"string","nodeType":"ElementaryTypeName","src":"598:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"527:91:17"},"src":"506:113:17"},{"body":{"id":4241,"nodeType":"Block","src":"650:61:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4234,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"669:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"669:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4236,"name":"mailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4209,"src":"683:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"669:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":4233,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"661:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"661:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4239,"nodeType":"ExpressionStatement","src":"661:30:17"},{"id":4240,"nodeType":"PlaceholderStatement","src":"702:1:17"}]},"id":4242,"name":"onlyMailbox","nameLocation":"636:11:17","nodeType":"ModifierDefinition","parameters":{"id":4232,"nodeType":"ParameterList","parameters":[],"src":"647:2:17"},"src":"627:84:17","virtual":false,"visibility":"internal"},{"baseFunctions":[4500],"body":{"id":4308,"nodeType":"Block","src":"845:595:17","statements":[{"assignments":[4254,4256,4258,4260,4262,4264],"declarations":[{"constant":false,"id":4254,"mutability":"mutable","name":"_name","nameLocation":"885:5:17","nodeType":"VariableDeclaration","scope":4308,"src":"871:19:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4253,"name":"string","nodeType":"ElementaryTypeName","src":"871:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4256,"mutability":"mutable","name":"_symbol","nameLocation":"919:7:17","nodeType":"VariableDeclaration","scope":4308,"src":"905:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4255,"name":"string","nodeType":"ElementaryTypeName","src":"905:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4258,"mutability":"mutable","name":"_badgeURI","nameLocation":"955:9:17","nodeType":"VariableDeclaration","scope":4308,"src":"941:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4257,"name":"string","nodeType":"ElementaryTypeName","src":"941:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4260,"mutability":"mutable","name":"_promoterAddress","nameLocation":"987:16:17","nodeType":"VariableDeclaration","scope":4308,"src":"979:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4259,"name":"address","nodeType":"ElementaryTypeName","src":"979:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4262,"mutability":"mutable","name":"_claimsPerPerson","nameLocation":"1023:16:17","nodeType":"VariableDeclaration","scope":4308,"src":"1018:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4261,"name":"uint","nodeType":"ElementaryTypeName","src":"1018:4:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4264,"mutability":"mutable","name":"_salt","nameLocation":"1062:5:17","nodeType":"VariableDeclaration","scope":4308,"src":"1054:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4263,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4282,"initialValue":{"arguments":[{"id":4267,"name":"_body","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"1092:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":4269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1100:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4268,"name":"string","nodeType":"ElementaryTypeName","src":"1100:6:17","typeDescriptions":{}}},{"id":4271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1108:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4270,"name":"string","nodeType":"ElementaryTypeName","src":"1108:6:17","typeDescriptions":{}}},{"id":4273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1116:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4272,"name":"string","nodeType":"ElementaryTypeName","src":"1116:6:17","typeDescriptions":{}}},{"id":4275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1124:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4274,"name":"address","nodeType":"ElementaryTypeName","src":"1124:7:17","typeDescriptions":{}}},{"id":4277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1133:4:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4276,"name":"uint","nodeType":"ElementaryTypeName","src":"1133:4:17","typeDescriptions":{}}},{"id":4279,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1139:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":4278,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1139:7:17","typeDescriptions":{}}}],"id":4280,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1099:48:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(string storage pointer),type(string storage pointer),type(string storage pointer),type(address),type(uint256),type(bytes32))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$_t_type$_t_string_storage_ptr_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$_t_type$_t_bytes32_$_$","typeString":"tuple(type(string storage pointer),type(string storage pointer),type(string storage pointer),type(address),type(uint256),type(bytes32))"}],"expression":{"id":4265,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1081:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4266,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"1081:10:17","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1081:67:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_address_payable_$_t_uint256_$_t_bytes32_$","typeString":"tuple(string memory,string memory,string memory,address payable,uint256,bytes32)"}},"nodeType":"VariableDeclarationStatement","src":"856:292:17"},{"assignments":[4285],"declarations":[{"constant":false,"id":4285,"mutability":"mutable","name":"promotion","nameLocation":"1175:9:17","nodeType":"VariableDeclaration","scope":4308,"src":"1159:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721Promotion_$3501","typeString":"contract ERC721Promotion"},"typeName":{"id":4284,"nodeType":"UserDefinedTypeName","pathNode":{"id":4283,"name":"ERC721Promotion","nodeType":"IdentifierPath","referencedDeclaration":3501,"src":"1159:15:17"},"referencedDeclaration":3501,"src":"1159:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721Promotion_$3501","typeString":"contract ERC721Promotion"}},"visibility":"internal"}],"id":4300,"initialValue":{"arguments":[{"id":4292,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4254,"src":"1236:5:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4293,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"1256:7:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4294,"name":"_badgeURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"1278:9:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"expression":{"id":4295,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1302:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1302:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4297,"name":"_claimsPerPerson","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4262,"src":"1327:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4298,"name":"mailbox","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4209,"src":"1358:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"components":[{"id":4288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1188:19:17","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_address_$_t_uint256_$_t_address_$returns$_t_contract$_ERC721Promotion_$3501_$","typeString":"function (string memory,string memory,string memory,address,uint256,address) returns (contract ERC721Promotion)"},"typeName":{"id":4287,"nodeType":"UserDefinedTypeName","pathNode":{"id":4286,"name":"ERC721Promotion","nodeType":"IdentifierPath","referencedDeclaration":3501,"src":"1192:15:17"},"referencedDeclaration":3501,"src":"1192:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721Promotion_$3501","typeString":"contract ERC721Promotion"}}}],"id":4289,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1187:21:17","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_address_$_t_uint256_$_t_address_$returns$_t_contract$_ERC721Promotion_$3501_$","typeString":"function (string memory,string memory,string memory,address,uint256,address) returns (contract ERC721Promotion)"}},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["salt"],"nodeType":"FunctionCallOptions","options":[{"id":4290,"name":"_salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4264,"src":"1215:5:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"src":"1187:34:17","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_address_$_t_uint256_$_t_address_$returns$_t_contract$_ERC721Promotion_$3501_$salt","typeString":"function (string memory,string memory,string memory,address,uint256,address) returns (contract ERC721Promotion)"}},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1187:189:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC721Promotion_$3501","typeString":"contract ERC721Promotion"}},"nodeType":"VariableDeclarationStatement","src":"1159:217:17"},{"eventCall":{"arguments":[{"arguments":[{"id":4304,"name":"promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4285,"src":"1421:9:17","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721Promotion_$3501","typeString":"contract ERC721Promotion"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC721Promotion_$3501","typeString":"contract ERC721Promotion"}],"id":4303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1413:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4302,"name":"address","nodeType":"ElementaryTypeName","src":"1413:7:17","typeDescriptions":{}}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1413:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4301,"name":"PromotionNFTDeployed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"1392:20:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1392:40:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4307,"nodeType":"EmitStatement","src":"1387:45:17"}]},"functionSelector":"56d5d475","id":4309,"implemented":true,"kind":"function","modifiers":[{"id":4251,"kind":"modifierInvocation","modifierName":{"id":4250,"name":"onlyMailbox","nodeType":"IdentifierPath","referencedDeclaration":4242,"src":"833:11:17"},"nodeType":"ModifierInvocation","src":"833:11:17"}],"name":"handle","nameLocation":"728:6:17","nodeType":"FunctionDefinition","parameters":{"id":4249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4244,"mutability":"mutable","name":"_origin","nameLocation":"752:7:17","nodeType":"VariableDeclaration","scope":4309,"src":"745:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4243,"name":"uint32","nodeType":"ElementaryTypeName","src":"745:6:17","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4246,"mutability":"mutable","name":"_sender","nameLocation":"778:7:17","nodeType":"VariableDeclaration","scope":4309,"src":"770:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4245,"name":"bytes32","nodeType":"ElementaryTypeName","src":"770:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4248,"mutability":"mutable","name":"_body","nameLocation":"811:5:17","nodeType":"VariableDeclaration","scope":4309,"src":"796:20:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4247,"name":"bytes","nodeType":"ElementaryTypeName","src":"796:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"734:89:17"},"returnParameters":{"id":4252,"nodeType":"ParameterList","parameters":[],"src":"845:0:17"},"scope":4418,"src":"719:721:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4340,"nodeType":"Block","src":"1542:222:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4317,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1561:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1561:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"baseExpression":{"id":4319,"name":"deploymentCreator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"1575:17:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":4321,"indexExpression":{"id":4320,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"1593:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1575:34:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1561:48:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f74206f776e6564","id":4323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1611:11:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_4e11588b0a1333cd48a2228bc3aa6c8ac69ad064528c33cc670f307bae0cb216","typeString":"literal_string \"Not owned\""},"value":"Not owned"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4e11588b0a1333cd48a2228bc3aa6c8ac69ad064528c33cc670f307bae0cb216","typeString":"literal_string \"Not owned\""}],"id":4316,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1553:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1553:70:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4325,"nodeType":"ExpressionStatement","src":"1553:70:17"},{"expression":{"arguments":[{"id":4330,"name":"newURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"1679:6:17","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"arguments":[{"id":4327,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"1650:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4326,"name":"ERC721Promotion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3501,"src":"1634:15:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Promotion_$3501_$","typeString":"type(contract ERC721Promotion)"}},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1634:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC721Promotion_$3501","typeString":"contract ERC721Promotion"}},"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"setTokenURI","nodeType":"MemberAccess","referencedDeclaration":3454,"src":"1634:44:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) external"}},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1634:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4332,"nodeType":"ExpressionStatement","src":"1634:52:17"},{"eventCall":{"arguments":[{"id":4334,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"1720:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4335,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1737:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1737:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4337,"name":"newURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4313,"src":"1749:6:17","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4333,"name":"TokenURIChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4231,"src":"1704:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,address,string memory)"}},"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1704:52:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4339,"nodeType":"EmitStatement","src":"1699:57:17"}]},"functionSelector":"c1c253a9","id":4341,"implemented":true,"kind":"function","modifiers":[],"name":"changeTokenURI","nameLocation":"1457:14:17","nodeType":"FunctionDefinition","parameters":{"id":4314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4311,"mutability":"mutable","name":"contractAddress","nameLocation":"1480:15:17","nodeType":"VariableDeclaration","scope":4341,"src":"1472:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4310,"name":"address","nodeType":"ElementaryTypeName","src":"1472:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4313,"mutability":"mutable","name":"newURI","nameLocation":"1513:6:17","nodeType":"VariableDeclaration","scope":4341,"src":"1497:22:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4312,"name":"string","nodeType":"ElementaryTypeName","src":"1497:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1471:49:17"},"returnParameters":{"id":4315,"nodeType":"ParameterList","parameters":[],"src":"1542:0:17"},"scope":4418,"src":"1448:316:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4352,"nodeType":"Block","src":"1890:61:17","statements":[{"expression":{"baseExpression":{"id":4348,"name":"latestPromotionDeployment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"1908:25:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_address_$","typeString":"mapping(address => address)"}},"id":4350,"indexExpression":{"id":4349,"name":"promoter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4343,"src":"1934:8:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1908:35:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4347,"id":4351,"nodeType":"Return","src":"1901:42:17"}]},"functionSelector":"97eb0113","id":4353,"implemented":true,"kind":"function","modifiers":[],"name":"getLatestPromotionDeployment","nameLocation":"1781:28:17","nodeType":"FunctionDefinition","parameters":{"id":4344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4343,"mutability":"mutable","name":"promoter","nameLocation":"1818:8:17","nodeType":"VariableDeclaration","scope":4353,"src":"1810:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4342,"name":"address","nodeType":"ElementaryTypeName","src":"1810:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1809:18:17"},"returnParameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4353,"src":"1876:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4345,"name":"address","nodeType":"ElementaryTypeName","src":"1876:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1875:9:17"},"scope":4418,"src":"1772:179:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4416,"nodeType":"Block","src":"2070:299:17","statements":[{"assignments":[4361],"declarations":[{"constant":false,"id":4361,"mutability":"mutable","name":"i","nameLocation":"2087:1:17","nodeType":"VariableDeclaration","scope":4416,"src":"2081:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4360,"name":"uint8","nodeType":"ElementaryTypeName","src":"2081:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4363,"initialValue":{"hexValue":"30","id":4362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2091:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2081:11:17"},{"body":{"id":4376,"nodeType":"Block","src":"2138:30:17","statements":[{"expression":{"id":4374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2153:3:17","subExpression":{"id":4373,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2153:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4375,"nodeType":"ExpressionStatement","src":"2153:3:17"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4364,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2110:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":4365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2114:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2110:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4367,"name":"_bytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"2120:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4369,"indexExpression":{"id":4368,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2129:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2120:11:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2135:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2120:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2110:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4377,"nodeType":"WhileStatement","src":"2103:65:17"},{"assignments":[4379],"declarations":[{"constant":false,"id":4379,"mutability":"mutable","name":"bytesArray","nameLocation":"2191:10:17","nodeType":"VariableDeclaration","scope":4416,"src":"2178:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4378,"name":"bytes","nodeType":"ElementaryTypeName","src":"2178:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4384,"initialValue":{"arguments":[{"id":4382,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2214:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":4381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2204:9:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":4380,"name":"bytes","nodeType":"ElementaryTypeName","src":"2208:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2204:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"2178:38:17"},{"body":{"id":4409,"nodeType":"Block","src":"2272:54:17","statements":[{"expression":{"id":4407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4401,"name":"bytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"2287:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4403,"indexExpression":{"id":4402,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2298:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2287:13:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4404,"name":"_bytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"2303:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4406,"indexExpression":{"id":4405,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2312:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2303:11:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2287:27:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":4408,"nodeType":"ExpressionStatement","src":"2287:27:17"}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":4391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4389,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2239:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3332","id":4390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2243:2:17","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"2239:6:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_bytes1","typeString":"bytes1"},"id":4396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4392,"name":"_bytes32","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4355,"src":"2249:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4394,"indexExpression":{"id":4393,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2258:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2249:11:17","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":4395,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2264:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2249:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2239:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4410,"initializationExpression":{"expression":{"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4385,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2232:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":4386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2236:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2232:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4388,"nodeType":"ExpressionStatement","src":"2232:5:17"},"loopExpression":{"expression":{"id":4399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2267:3:17","subExpression":{"id":4398,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4361,"src":"2267:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4400,"nodeType":"ExpressionStatement","src":"2267:3:17"},"nodeType":"ForStatement","src":"2227:99:17"},{"expression":{"arguments":[{"id":4413,"name":"bytesArray","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4379,"src":"2350:10:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2343:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":4411,"name":"string","nodeType":"ElementaryTypeName","src":"2343:6:17","typeDescriptions":{}}},"id":4414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2343:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":4359,"id":4415,"nodeType":"Return","src":"2336:25:17"}]},"functionSelector":"9201de55","id":4417,"implemented":true,"kind":"function","modifiers":[],"name":"bytes32ToString","nameLocation":"1968:15:17","nodeType":"FunctionDefinition","parameters":{"id":4356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4355,"mutability":"mutable","name":"_bytes32","nameLocation":"1992:8:17","nodeType":"VariableDeclaration","scope":4417,"src":"1984:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1984:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1983:18:17"},"returnParameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4417,"src":"2050:13:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4357,"name":"string","nodeType":"ElementaryTypeName","src":"2050:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2049:15:17"},"scope":4418,"src":"1959:410:17","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":4419,"src":"142:2230:17","usedErrors":[]}],"src":"33:2341:17"},"id":17},"contracts/interfaces/IInterchainGasPaymaster.sol":{"ast":{"absolutePath":"contracts/interfaces/IInterchainGasPaymaster.sol","exportedSymbols":{"IInterchainGasPaymaster":[4451]},"id":4452,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4420,"literals":["solidity",">=","0.6",".11"],"nodeType":"PragmaDirective","src":"33:25:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IInterchainGasPaymaster","contractDependencies":[],"contractKind":"interface","documentation":{"id":4421,"nodeType":"StructuredDocumentation","src":"62:157:18","text":" @title IInterchainGasPaymaster\n @notice Manages payments on a source chain to cover gas costs of relaying\n messages to destination chains."},"fullyImplemented":false,"id":4451,"linearizedBaseContracts":[4451],"name":"IInterchainGasPaymaster","nameLocation":"231:23:18","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":4422,"nodeType":"StructuredDocumentation","src":"262:267:18","text":" @notice Emitted when a payment is made for a message's gas costs.\n @param messageId The ID of the message to pay for.\n @param gasAmount The amount of destination gas paid for.\n @param payment The amount of native tokens paid."},"eventSelector":"f715e66d2cd2a0179069dcda2a41a4da36a30e1aad12187fbb7c5d100afd621c","id":4430,"name":"GasPayment","nameLocation":"541:10:18","nodeType":"EventDefinition","parameters":{"id":4429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4424,"indexed":true,"mutability":"mutable","name":"messageId","nameLocation":"578:9:18","nodeType":"VariableDeclaration","scope":4430,"src":"562:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4423,"name":"bytes32","nodeType":"ElementaryTypeName","src":"562:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4426,"indexed":false,"mutability":"mutable","name":"gasAmount","nameLocation":"606:9:18","nodeType":"VariableDeclaration","scope":4430,"src":"598:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4425,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4428,"indexed":false,"mutability":"mutable","name":"payment","nameLocation":"634:7:18","nodeType":"VariableDeclaration","scope":4430,"src":"626:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4427,"name":"uint256","nodeType":"ElementaryTypeName","src":"626:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"551:97:18"},"src":"535:114:18"},{"functionSelector":"11bf2c18","id":4441,"implemented":false,"kind":"function","modifiers":[],"name":"payForGas","nameLocation":"666:9:18","nodeType":"FunctionDefinition","parameters":{"id":4439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4432,"mutability":"mutable","name":"_messageId","nameLocation":"694:10:18","nodeType":"VariableDeclaration","scope":4441,"src":"686:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4431,"name":"bytes32","nodeType":"ElementaryTypeName","src":"686:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4434,"mutability":"mutable","name":"_destinationDomain","nameLocation":"722:18:18","nodeType":"VariableDeclaration","scope":4441,"src":"715:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4433,"name":"uint32","nodeType":"ElementaryTypeName","src":"715:6:18","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4436,"mutability":"mutable","name":"_gasAmount","nameLocation":"759:10:18","nodeType":"VariableDeclaration","scope":4441,"src":"751:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4435,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4438,"mutability":"mutable","name":"_refundAddress","nameLocation":"788:14:18","nodeType":"VariableDeclaration","scope":4441,"src":"780:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4437,"name":"address","nodeType":"ElementaryTypeName","src":"780:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"675:134:18"},"returnParameters":{"id":4440,"nodeType":"ParameterList","parameters":[],"src":"826:0:18"},"scope":4451,"src":"657:170:18","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"a6929793","id":4450,"implemented":false,"kind":"function","modifiers":[],"name":"quoteGasPayment","nameLocation":"844:15:18","nodeType":"FunctionDefinition","parameters":{"id":4446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4443,"mutability":"mutable","name":"_destinationDomain","nameLocation":"867:18:18","nodeType":"VariableDeclaration","scope":4450,"src":"860:25:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4442,"name":"uint32","nodeType":"ElementaryTypeName","src":"860:6:18","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4445,"mutability":"mutable","name":"_gasAmount","nameLocation":"895:10:18","nodeType":"VariableDeclaration","scope":4450,"src":"887:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4444,"name":"uint256","nodeType":"ElementaryTypeName","src":"887:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"859:47:18"},"returnParameters":{"id":4449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4450,"src":"957:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4447,"name":"uint256","nodeType":"ElementaryTypeName","src":"957:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"956:9:18"},"scope":4451,"src":"835:131:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4452,"src":"221:748:18","usedErrors":[]}],"src":"33:938:18"},"id":18},"contracts/interfaces/IInterchainQueryRouter.sol":{"ast":{"absolutePath":"contracts/interfaces/IInterchainQueryRouter.sol","exportedSymbols":{"IInterchainQueryRouter":[4467]},"id":4468,"nodeType":"SourceUnit","nodes":[{"abstract":false,"baseContracts":[],"canonicalName":"IInterchainQueryRouter","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4467,"linearizedBaseContracts":[4467],"name":"IInterchainQueryRouter","nameLocation":"10:22:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4453,"nodeType":"StructuredDocumentation","src":"40:450:19","text":" @param _destinationDomain Domain of destination chain\n @param target The address of the contract to query on destination chain.\n @param queryData The calldata of the view call to make on the destination\n chain.\n @param callback Callback function selector on `msg.sender` and optionally\n abi-encoded prefix arguments.\n @return messageId The ID of the Hyperlane message encoding the query."},"functionSelector":"2222b452","id":4466,"implemented":false,"kind":"function","modifiers":[],"name":"query","nameLocation":"505:5:19","nodeType":"FunctionDefinition","parameters":{"id":4462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4455,"mutability":"mutable","name":"_destinationDomain","nameLocation":"528:18:19","nodeType":"VariableDeclaration","scope":4466,"src":"521:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4454,"name":"uint32","nodeType":"ElementaryTypeName","src":"521:6:19","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4457,"mutability":"mutable","name":"target","nameLocation":"565:6:19","nodeType":"VariableDeclaration","scope":4466,"src":"557:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4456,"name":"address","nodeType":"ElementaryTypeName","src":"557:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4459,"mutability":"mutable","name":"queryData","nameLocation":"597:9:19","nodeType":"VariableDeclaration","scope":4466,"src":"582:24:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4458,"name":"bytes","nodeType":"ElementaryTypeName","src":"582:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4461,"mutability":"mutable","name":"callback","nameLocation":"632:8:19","nodeType":"VariableDeclaration","scope":4466,"src":"617:23:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4460,"name":"bytes","nodeType":"ElementaryTypeName","src":"617:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"510:137:19"},"returnParameters":{"id":4465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4466,"src":"666:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4463,"name":"bytes32","nodeType":"ElementaryTypeName","src":"666:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"665:9:19"},"scope":4467,"src":"496:179:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4468,"src":"0:678:19","usedErrors":[]}],"src":"0:680:19"},"id":19},"contracts/interfaces/IMailbox.sol":{"ast":{"absolutePath":"contracts/interfaces/IMailbox.sol","exportedSymbols":{"IMailbox":[4488]},"id":4489,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4469,"literals":["solidity",">=","0.8",".0"],"nodeType":"PragmaDirective","src":"33:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IMailbox","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4488,"linearizedBaseContracts":[4488],"name":"IMailbox","nameLocation":"71:8:20","nodeType":"ContractDefinition","nodes":[{"functionSelector":"fa31de01","id":4480,"implemented":false,"kind":"function","modifiers":[],"name":"dispatch","nameLocation":"96:8:20","nodeType":"FunctionDefinition","parameters":{"id":4476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4471,"mutability":"mutable","name":"_destinationDomain","nameLocation":"122:18:20","nodeType":"VariableDeclaration","scope":4480,"src":"115:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4470,"name":"uint32","nodeType":"ElementaryTypeName","src":"115:6:20","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4473,"mutability":"mutable","name":"_recipientAddress","nameLocation":"159:17:20","nodeType":"VariableDeclaration","scope":4480,"src":"151:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4472,"name":"bytes32","nodeType":"ElementaryTypeName","src":"151:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4475,"mutability":"mutable","name":"_messageBody","nameLocation":"202:12:20","nodeType":"VariableDeclaration","scope":4480,"src":"187:27:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4474,"name":"bytes","nodeType":"ElementaryTypeName","src":"187:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"104:117:20"},"returnParameters":{"id":4479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4480,"src":"240:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4477,"name":"bytes32","nodeType":"ElementaryTypeName","src":"240:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"239:9:20"},"scope":4488,"src":"87:162:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"7c39d130","id":4487,"implemented":false,"kind":"function","modifiers":[],"name":"process","nameLocation":"266:7:20","nodeType":"FunctionDefinition","parameters":{"id":4485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4482,"mutability":"mutable","name":"_metadata","nameLocation":"289:9:20","nodeType":"VariableDeclaration","scope":4487,"src":"274:24:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4481,"name":"bytes","nodeType":"ElementaryTypeName","src":"274:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4484,"mutability":"mutable","name":"_message","nameLocation":"315:8:20","nodeType":"VariableDeclaration","scope":4487,"src":"300:23:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4483,"name":"bytes","nodeType":"ElementaryTypeName","src":"300:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"273:51:20"},"returnParameters":{"id":4486,"nodeType":"ParameterList","parameters":[],"src":"342:0:20"},"scope":4488,"src":"257:86:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4489,"src":"61:285:20","usedErrors":[]}],"src":"33:315:20"},"id":20},"contracts/interfaces/IMessageRecipient.sol":{"ast":{"absolutePath":"contracts/interfaces/IMessageRecipient.sol","exportedSymbols":{"IMessageRecipient":[4501]},"id":4502,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":4490,"literals":["solidity",">=","0.6",".11"],"nodeType":"PragmaDirective","src":"47:25:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IMessageRecipient","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4501,"linearizedBaseContracts":[4501],"name":"IMessageRecipient","nameLocation":"86:17:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":4491,"nodeType":"StructuredDocumentation","src":"111:270:21","text":" @notice Handle an interchain message\n @param _origin Domain ID of the chain from which the message came\n @param _sender Address of the message sender on the origin chain as bytes32\n @param _body Raw bytes content of message body"},"functionSelector":"56d5d475","id":4500,"implemented":false,"kind":"function","modifiers":[],"name":"handle","nameLocation":"396:6:21","nodeType":"FunctionDefinition","parameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4493,"mutability":"mutable","name":"_origin","nameLocation":"420:7:21","nodeType":"VariableDeclaration","scope":4500,"src":"413:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":4492,"name":"uint32","nodeType":"ElementaryTypeName","src":"413:6:21","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":4495,"mutability":"mutable","name":"_sender","nameLocation":"446:7:21","nodeType":"VariableDeclaration","scope":4500,"src":"438:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"438:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4497,"mutability":"mutable","name":"_body","nameLocation":"479:5:21","nodeType":"VariableDeclaration","scope":4500,"src":"464:20:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4496,"name":"bytes","nodeType":"ElementaryTypeName","src":"464:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"402:89:21"},"returnParameters":{"id":4499,"nodeType":"ParameterList","parameters":[],"src":"500:0:21"},"scope":4501,"src":"387:114:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4502,"src":"76:428:21","usedErrors":[]}],"src":"47:459:21"},"id":21},"contracts/interfaces/IReceiver.sol":{"ast":{"absolutePath":"contracts/interfaces/IReceiver.sol","exportedSymbols":{"IReceiver":[4510]},"id":4511,"nodeType":"SourceUnit","nodes":[{"abstract":false,"baseContracts":[],"canonicalName":"IReceiver","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4510,"linearizedBaseContracts":[4510],"name":"IReceiver","nameLocation":"10:9:22","nodeType":"ContractDefinition","nodes":[{"functionSelector":"97eb0113","id":4509,"implemented":false,"kind":"function","modifiers":[],"name":"getLatestPromotionDeployment","nameLocation":"36:28:22","nodeType":"FunctionDefinition","parameters":{"id":4505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4504,"mutability":"mutable","name":"claimer","nameLocation":"73:7:22","nodeType":"VariableDeclaration","scope":4509,"src":"65:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4503,"name":"address","nodeType":"ElementaryTypeName","src":"65:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"64:17:22"},"returnParameters":{"id":4508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4509,"src":"132:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4506,"name":"address","nodeType":"ElementaryTypeName","src":"132:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"131:9:22"},"scope":4510,"src":"27:114:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4511,"src":"0:144:22","usedErrors":[]}],"src":"0:146:22"},"id":22}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":123,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_229":{"entryPoint":null,"id":229,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":292,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":475,"id":null,"parameterSlots":2,"returnSlots":2},"extract_byte_array_length":{"entryPoint":581,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":270,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1985:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:23"},"nodeType":"YulFunctionCall","src":"66:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:23"},"nodeType":"YulFunctionCall","src":"56:31:23"},"nodeType":"YulExpressionStatement","src":"56:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:23"},"nodeType":"YulFunctionCall","src":"96:15:23"},"nodeType":"YulExpressionStatement","src":"96:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:23"},"nodeType":"YulFunctionCall","src":"120:15:23"},"nodeType":"YulExpressionStatement","src":"120:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:23"},{"body":{"nodeType":"YulBlock","src":"210:821:23","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:23"},"nodeType":"YulFunctionCall","src":"261:12:23"},"nodeType":"YulExpressionStatement","src":"261:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:23"},"nodeType":"YulFunctionCall","src":"234:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:23"},"nodeType":"YulFunctionCall","src":"230:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:23"},"nodeType":"YulFunctionCall","src":"223:35:23"},"nodeType":"YulIf","src":"220:55:23"},{"nodeType":"YulVariableDeclaration","src":"284:23:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:23"},"nodeType":"YulFunctionCall","src":"294:13:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:23","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:23"},"nodeType":"YulFunctionCall","src":"330:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:23"},"nodeType":"YulFunctionCall","src":"326:18:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:23"},"nodeType":"YulFunctionCall","src":"369:18:23"},"nodeType":"YulExpressionStatement","src":"369:18:23"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:23"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:23"},"nodeType":"YulFunctionCall","src":"356:10:23"},"nodeType":"YulIf","src":"353:36:23"},{"nodeType":"YulVariableDeclaration","src":"398:17:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:23"},"nodeType":"YulFunctionCall","src":"408:7:23"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:23"},"nodeType":"YulFunctionCall","src":"438:9:23"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:23"},"nodeType":"YulFunctionCall","src":"498:13:23"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:23"},"nodeType":"YulFunctionCall","src":"494:22:23"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:23","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:23"},"nodeType":"YulFunctionCall","src":"490:31:23"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:23"},"nodeType":"YulFunctionCall","src":"486:40:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:23"},"nodeType":"YulFunctionCall","src":"474:53:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:23"},"nodeType":"YulFunctionCall","src":"588:18:23"},"nodeType":"YulExpressionStatement","src":"588:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:23"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:23"},"nodeType":"YulFunctionCall","src":"542:18:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:23"},"nodeType":"YulFunctionCall","src":"562:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:23"},"nodeType":"YulFunctionCall","src":"539:46:23"},"nodeType":"YulIf","src":"536:72:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:23"},"nodeType":"YulFunctionCall","src":"617:22:23"},"nodeType":"YulExpressionStatement","src":"617:22:23"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:23"},"nodeType":"YulFunctionCall","src":"648:18:23"},"nodeType":"YulExpressionStatement","src":"648:18:23"},{"nodeType":"YulVariableDeclaration","src":"675:14:23","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:23","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:23"},"nodeType":"YulFunctionCall","src":"737:12:23"},"nodeType":"YulExpressionStatement","src":"737:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:23"},"nodeType":"YulFunctionCall","src":"708:15:23"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:23"},"nodeType":"YulFunctionCall","src":"704:24:23"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:23"},"nodeType":"YulFunctionCall","src":"701:33:23"},"nodeType":"YulIf","src":"698:53:23"},{"nodeType":"YulVariableDeclaration","src":"760:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:23","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:23"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:23"},"nodeType":"YulFunctionCall","src":"850:14:23"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:23"},"nodeType":"YulFunctionCall","src":"846:23:23"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:23"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:23"},"nodeType":"YulFunctionCall","src":"881:14:23"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:23"},"nodeType":"YulFunctionCall","src":"877:23:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:23"},"nodeType":"YulFunctionCall","src":"871:30:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:23"},"nodeType":"YulFunctionCall","src":"839:63:23"},"nodeType":"YulExpressionStatement","src":"839:63:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:23"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:23"},"nodeType":"YulFunctionCall","src":"787:9:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:23","statements":[{"nodeType":"YulAssignment","src":"799:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:23"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:23"},"nodeType":"YulFunctionCall","src":"804:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:23","statements":[]},"src":"779:133:23"},{"body":{"nodeType":"YulBlock","src":"942:59:23","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"971:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"979:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:23"},"nodeType":"YulFunctionCall","src":"967:15:23"},{"name":"_4","nodeType":"YulIdentifier","src":"984:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:23"},"nodeType":"YulFunctionCall","src":"963:24:23"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:23"},"nodeType":"YulFunctionCall","src":"956:35:23"},"nodeType":"YulExpressionStatement","src":"956:35:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"927:1:23"},{"name":"_1","nodeType":"YulIdentifier","src":"930:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"924:2:23"},"nodeType":"YulFunctionCall","src":"924:9:23"},"nodeType":"YulIf","src":"921:80:23"},{"nodeType":"YulAssignment","src":"1010:15:23","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1019:6:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1010:5:23"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:23","type":""}],"src":"146:885:23"},{"body":{"nodeType":"YulBlock","src":"1154:444:23","statements":[{"body":{"nodeType":"YulBlock","src":"1200:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1209:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1212:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1202:6:23"},"nodeType":"YulFunctionCall","src":"1202:12:23"},"nodeType":"YulExpressionStatement","src":"1202:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1175:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1184:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1171:3:23"},"nodeType":"YulFunctionCall","src":"1171:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1196:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1167:3:23"},"nodeType":"YulFunctionCall","src":"1167:32:23"},"nodeType":"YulIf","src":"1164:52:23"},{"nodeType":"YulVariableDeclaration","src":"1225:30:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1245:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1239:5:23"},"nodeType":"YulFunctionCall","src":"1239:16:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1229:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1264:28:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1282:2:23","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1278:3:23"},"nodeType":"YulFunctionCall","src":"1278:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"1290:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1274:3:23"},"nodeType":"YulFunctionCall","src":"1274:18:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1268:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1319:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1328:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1331:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1321:6:23"},"nodeType":"YulFunctionCall","src":"1321:12:23"},"nodeType":"YulExpressionStatement","src":"1321:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1307:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1315:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1304:2:23"},"nodeType":"YulFunctionCall","src":"1304:14:23"},"nodeType":"YulIf","src":"1301:34:23"},{"nodeType":"YulAssignment","src":"1344:71:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1387:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"1398:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1383:3:23"},"nodeType":"YulFunctionCall","src":"1383:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1407:7:23"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1354:28:23"},"nodeType":"YulFunctionCall","src":"1354:61:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1344:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"1424:41:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1450:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1461:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1446:3:23"},"nodeType":"YulFunctionCall","src":"1446:18:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1440:5:23"},"nodeType":"YulFunctionCall","src":"1440:25:23"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1428:8:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1494:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1503:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1506:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1496:6:23"},"nodeType":"YulFunctionCall","src":"1496:12:23"},"nodeType":"YulExpressionStatement","src":"1496:12:23"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1480:8:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1490:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1477:2:23"},"nodeType":"YulFunctionCall","src":"1477:16:23"},"nodeType":"YulIf","src":"1474:36:23"},{"nodeType":"YulAssignment","src":"1519:73:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1562:9:23"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1573:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1558:3:23"},"nodeType":"YulFunctionCall","src":"1558:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1584:7:23"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1529:28:23"},"nodeType":"YulFunctionCall","src":"1529:63:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1519:6:23"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1112:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1123:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1135:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1143:6:23","type":""}],"src":"1036:562:23"},{"body":{"nodeType":"YulBlock","src":"1658:325:23","statements":[{"nodeType":"YulAssignment","src":"1668:22:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1682:1:23","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1685:4:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1678:3:23"},"nodeType":"YulFunctionCall","src":"1678:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1668:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"1699:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1729:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"1735:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1725:3:23"},"nodeType":"YulFunctionCall","src":"1725:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1703:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1776:31:23","statements":[{"nodeType":"YulAssignment","src":"1778:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1792:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1800:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1788:3:23"},"nodeType":"YulFunctionCall","src":"1788:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1778:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1756:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1749:6:23"},"nodeType":"YulFunctionCall","src":"1749:26:23"},"nodeType":"YulIf","src":"1746:61:23"},{"body":{"nodeType":"YulBlock","src":"1866:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1887:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1894:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1899:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1890:3:23"},"nodeType":"YulFunctionCall","src":"1890:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1880:6:23"},"nodeType":"YulFunctionCall","src":"1880:31:23"},"nodeType":"YulExpressionStatement","src":"1880:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1931:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1934:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1924:6:23"},"nodeType":"YulFunctionCall","src":"1924:15:23"},"nodeType":"YulExpressionStatement","src":"1924:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1959:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1962:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1952:6:23"},"nodeType":"YulFunctionCall","src":"1952:15:23"},"nodeType":"YulExpressionStatement","src":"1952:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1822:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1845:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1853:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1842:2:23"},"nodeType":"YulFunctionCall","src":"1842:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1819:2:23"},"nodeType":"YulFunctionCall","src":"1819:38:23"},"nodeType":"YulIf","src":"1816:161:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1638:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1647:6:23","type":""}],"src":"1603:380:23"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x138C CODESIZE SUB DUP1 PUSH3 0x138C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1DB JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x281 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x245 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x136 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x153 JUMPI PUSH3 0x153 PUSH3 0x10E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x17E JUMPI PUSH3 0x17E PUSH3 0x10E JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x19B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1BF JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A0 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D1 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x215 DUP7 DUP4 DUP8 ADD PUSH3 0x124 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x22C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x23B DUP6 DUP3 DUP7 ADD PUSH3 0x124 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x10FB DUP1 PUSH3 0x291 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xCF4 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xD3C JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xD66 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xD66 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA2 JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x259 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x274 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF1E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B5 SWAP1 PUSH2 0xF1E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x302 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x302 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317 DUP3 PUSH2 0x649 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP3 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3CC JUMPI POP PUSH2 0x3CC DUP2 CALLER PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x43E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 PUSH2 0x6AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x457 CALLER DUP3 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x473 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF58 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x274 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x599 CALLER DUP4 DUP4 PUSH2 0x8FC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5A7 CALLER DUP4 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF58 JUMP JUMPDEST PUSH2 0x5CF DUP5 DUP5 DUP5 DUP5 PUSH2 0x9CA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E0 DUP3 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F7 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x642 JUMP JUMPDEST DUP1 PUSH2 0x621 DUP5 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x632 SWAP3 SWAP2 SWAP1 PUSH2 0xFA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E0 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x725 DUP4 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x76C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x790 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x785 DUP5 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AB DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x833 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x846 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x95D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9D5 DUP5 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x9E1 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA0A DUP4 PUSH2 0xB91 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2A JUMPI PUSH2 0xA2A PUSH2 0xDF9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA5E JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xB86 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xAD4 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x106B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB0F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB0C SWAP2 DUP2 ADD SWAP1 PUSH2 0x10A8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB6C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1019 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x790 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xBD0 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xBFC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC1A JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC32 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC46 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC58 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x274 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCB7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC9F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5CF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xCE0 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x642 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD58 DUP4 PUSH2 0xD20 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD84 DUP5 PUSH2 0xD20 JUMP JUMPDEST SWAP3 POP PUSH2 0xD92 PUSH1 0x20 DUP6 ADD PUSH2 0xD20 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x642 DUP3 PUSH2 0xD20 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD9 DUP4 PUSH2 0xD20 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE2E DUP6 PUSH2 0xD20 JUMP JUMPDEST SWAP4 POP PUSH2 0xE3C PUSH1 0x20 DUP7 ADD PUSH2 0xD20 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE86 JUMPI PUSH2 0xE86 PUSH2 0xDF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEAE JUMPI PUSH2 0xEAE PUSH2 0xDF9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF07 DUP4 PUSH2 0xD20 JUMP JUMPDEST SWAP2 POP PUSH2 0xF15 PUSH1 0x20 DUP5 ADD PUSH2 0xD20 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF32 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF52 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xFB7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xFCB DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x109E SWAP1 DUP4 ADD DUP5 PUSH2 0xCC8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB SLT 0xFC 0xE6 BALANCE 0xBE PUSH32 0xF0DC52E0220CEC90BEC58A67D1C6DC3FD615BE6C1F7854EE1B64736F6C634300 ADDMOD 0xE STOP CALLER ","sourceMap":"628:16679:2:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1479:17:2;;;;:7;;:17;;;;;:::i;:::-;;1390:113;;628:16679;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;628:16679:2;;;-1:-1:-1;628:16679:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:23;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:23;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:23;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:23:o;1036:562::-;1135:6;1143;1196:2;1184:9;1175:7;1171:23;1167:32;1164:52;;;1212:1;1209;1202:12;1164:52;1239:16;;-1:-1:-1;;;;;1304:14:23;;;1301:34;;;1331:1;1328;1321:12;1301:34;1354:61;1407:7;1398:6;1387:9;1383:22;1354:61;:::i;:::-;1344:71;;1461:2;1450:9;1446:18;1440:25;1424:41;;1490:2;1480:8;1477:16;1474:36;;;1506:1;1503;1496:12;1474:36;;1529:63;1584:7;1573:8;1562:9;1558:24;1529:63;:::i;:::-;1519:73;;;1036:562;;;;;:::o;1603:380::-;1682:1;1678:12;;;;1725;;;1746:61;;1800:4;1792:6;1788:17;1778:27;;1746:61;1853:2;1845:6;1842:14;1822:18;1819:38;1816:161;;1899:10;1894:3;1890:20;1887:1;1880:31;1934:4;1931:1;1924:15;1962:4;1959:1;1952:15;1816:161;;1603:380;;;:::o;:::-;628:16679:2;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1077":{"entryPoint":null,"id":1077,"parameterSlots":4,"returnSlots":0},"@_approve_943":{"entryPoint":1707,"id":943,"parameterSlots":2,"returnSlots":0},"@_baseURI_380":{"entryPoint":null,"id":380,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1064":{"entryPoint":null,"id":1064,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1051":{"entryPoint":2704,"id":1051,"parameterSlots":4,"returnSlots":1},"@_exists_612":{"entryPoint":null,"id":612,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_646":{"entryPoint":1817,"id":646,"parameterSlots":2,"returnSlots":1},"@_msgSender_1721":{"entryPoint":null,"id":1721,"parameterSlots":0,"returnSlots":1},"@_ownerOf_594":{"entryPoint":null,"id":594,"parameterSlots":1,"returnSlots":1},"@_requireMinted_989":{"entryPoint":1609,"id":989,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_581":{"entryPoint":2506,"id":581,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_975":{"entryPoint":2300,"id":975,"parameterSlots":3,"returnSlots":0},"@_transfer_919":{"entryPoint":1944,"id":919,"parameterSlots":3,"returnSlots":0},"@approve_423":{"entryPoint":819,"id":423,"parameterSlots":2,"returnSlots":0},"@balanceOf_284":{"entryPoint":1273,"id":284,"parameterSlots":1,"returnSlots":1},"@getApproved_441":{"entryPoint":780,"id":441,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_476":{"entryPoint":null,"id":476,"parameterSlots":2,"returnSlots":1},"@isContract_1397":{"entryPoint":null,"id":1397,"parameterSlots":1,"returnSlots":1},"@log10_3079":{"entryPoint":2961,"id":3079,"parameterSlots":1,"returnSlots":1},"@name_322":{"entryPoint":634,"id":322,"parameterSlots":0,"returnSlots":1},"@ownerOf_312":{"entryPoint":1177,"id":312,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_522":{"entryPoint":1150,"id":522,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_552":{"entryPoint":1437,"id":552,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_458":{"entryPoint":1422,"id":458,"parameterSlots":2,"returnSlots":0},"@supportsInterface_2364":{"entryPoint":null,"id":2364,"parameterSlots":1,"returnSlots":1},"@supportsInterface_260":{"entryPoint":552,"id":260,"parameterSlots":1,"returnSlots":1},"@symbol_332":{"entryPoint":1407,"id":332,"parameterSlots":0,"returnSlots":1},"@toString_1863":{"entryPoint":2557,"id":1863,"parameterSlots":1,"returnSlots":1},"@tokenURI_371":{"entryPoint":1493,"id":371,"parameterSlots":1,"returnSlots":1},"@transferFrom_503":{"entryPoint":1101,"id":503,"parameterSlots":3,"returnSlots":0},"abi_decode_address":{"entryPoint":3360,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3490,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":3819,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":3430,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":3599,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":3517,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":3388,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3199,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":4264,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3335,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":3272,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4005,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4203,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3316,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3928,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4121,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4052,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":3228,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":3870,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3577,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":3177,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10101:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:23","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:23"},"nodeType":"YulFunctionCall","src":"125:12:23"},"nodeType":"YulExpressionStatement","src":"125:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:23"},"nodeType":"YulFunctionCall","src":"99:20:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:23"},"nodeType":"YulFunctionCall","src":"88:32:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:23"},"nodeType":"YulFunctionCall","src":"78:43:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:23"},"nodeType":"YulFunctionCall","src":"71:51:23"},"nodeType":"YulIf","src":"68:71:23"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:23","type":""}],"src":"14:131:23"},{"body":{"nodeType":"YulBlock","src":"219:176:23","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:23"},"nodeType":"YulFunctionCall","src":"267:12:23"},"nodeType":"YulExpressionStatement","src":"267:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:23"},"nodeType":"YulFunctionCall","src":"236:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:23"},"nodeType":"YulFunctionCall","src":"232:32:23"},"nodeType":"YulIf","src":"229:52:23"},{"nodeType":"YulVariableDeclaration","src":"290:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:23"},"nodeType":"YulFunctionCall","src":"303:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:23"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:23"},"nodeType":"YulFunctionCall","src":"335:30:23"},"nodeType":"YulExpressionStatement","src":"335:30:23"},{"nodeType":"YulAssignment","src":"374:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:23","type":""}],"src":"150:245:23"},{"body":{"nodeType":"YulBlock","src":"495:92:23","statements":[{"nodeType":"YulAssignment","src":"505:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:23"},"nodeType":"YulFunctionCall","src":"513:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:23"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:23"},"nodeType":"YulFunctionCall","src":"565:14:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:23"},"nodeType":"YulFunctionCall","src":"558:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:23"},"nodeType":"YulFunctionCall","src":"540:41:23"},"nodeType":"YulExpressionStatement","src":"540:41:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:23","type":""}],"src":"400:187:23"},{"body":{"nodeType":"YulBlock","src":"645:205:23","statements":[{"nodeType":"YulVariableDeclaration","src":"655:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"664:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"659:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"724:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"749:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"754:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:23"},"nodeType":"YulFunctionCall","src":"745:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"768:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"773:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"764:3:23"},"nodeType":"YulFunctionCall","src":"764:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"758:5:23"},"nodeType":"YulFunctionCall","src":"758:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"738:6:23"},"nodeType":"YulFunctionCall","src":"738:39:23"},"nodeType":"YulExpressionStatement","src":"738:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"685:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"688:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"682:2:23"},"nodeType":"YulFunctionCall","src":"682:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"696:19:23","statements":[{"nodeType":"YulAssignment","src":"698:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"707:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"710:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"703:3:23"},"nodeType":"YulFunctionCall","src":"703:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"678:3:23","statements":[]},"src":"674:113:23"},{"body":{"nodeType":"YulBlock","src":"813:31:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"826:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"831:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"822:3:23"},"nodeType":"YulFunctionCall","src":"822:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"840:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"815:6:23"},"nodeType":"YulFunctionCall","src":"815:27:23"},"nodeType":"YulExpressionStatement","src":"815:27:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"802:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"805:6:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"799:2:23"},"nodeType":"YulFunctionCall","src":"799:13:23"},"nodeType":"YulIf","src":"796:48:23"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"623:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"628:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"633:6:23","type":""}],"src":"592:258:23"},{"body":{"nodeType":"YulBlock","src":"905:208:23","statements":[{"nodeType":"YulVariableDeclaration","src":"915:26:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"935:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"929:5:23"},"nodeType":"YulFunctionCall","src":"929:12:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"919:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"957:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"962:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"950:6:23"},"nodeType":"YulFunctionCall","src":"950:19:23"},"nodeType":"YulExpressionStatement","src":"950:19:23"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1004:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1011:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:23"},"nodeType":"YulFunctionCall","src":"1000:16:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1022:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"1027:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1018:3:23"},"nodeType":"YulFunctionCall","src":"1018:14:23"},{"name":"length","nodeType":"YulIdentifier","src":"1034:6:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"978:21:23"},"nodeType":"YulFunctionCall","src":"978:63:23"},"nodeType":"YulExpressionStatement","src":"978:63:23"},{"nodeType":"YulAssignment","src":"1050:57:23","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1065:3:23"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1078:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1086:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1074:3:23"},"nodeType":"YulFunctionCall","src":"1074:15:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1095:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1091:3:23"},"nodeType":"YulFunctionCall","src":"1091:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1070:3:23"},"nodeType":"YulFunctionCall","src":"1070:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1061:3:23"},"nodeType":"YulFunctionCall","src":"1061:39:23"},{"kind":"number","nodeType":"YulLiteral","src":"1102:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1057:3:23"},"nodeType":"YulFunctionCall","src":"1057:50:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1050:3:23"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"882:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"889:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"897:3:23","type":""}],"src":"855:258:23"},{"body":{"nodeType":"YulBlock","src":"1239:99:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1256:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1267:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1249:6:23"},"nodeType":"YulFunctionCall","src":"1249:21:23"},"nodeType":"YulExpressionStatement","src":"1249:21:23"},{"nodeType":"YulAssignment","src":"1279:53:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1305:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1317:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1328:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1313:3:23"},"nodeType":"YulFunctionCall","src":"1313:18:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1287:17:23"},"nodeType":"YulFunctionCall","src":"1287:45:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1279:4:23"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1208:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1219:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1230:4:23","type":""}],"src":"1118:220:23"},{"body":{"nodeType":"YulBlock","src":"1413:110:23","statements":[{"body":{"nodeType":"YulBlock","src":"1459:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1471:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1461:6:23"},"nodeType":"YulFunctionCall","src":"1461:12:23"},"nodeType":"YulExpressionStatement","src":"1461:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1434:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1430:3:23"},"nodeType":"YulFunctionCall","src":"1430:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1455:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1426:3:23"},"nodeType":"YulFunctionCall","src":"1426:32:23"},"nodeType":"YulIf","src":"1423:52:23"},{"nodeType":"YulAssignment","src":"1484:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1494:12:23"},"nodeType":"YulFunctionCall","src":"1494:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1484:6:23"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1379:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1390:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1402:6:23","type":""}],"src":"1343:180:23"},{"body":{"nodeType":"YulBlock","src":"1629:102:23","statements":[{"nodeType":"YulAssignment","src":"1639:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1651:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1662:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1647:3:23"},"nodeType":"YulFunctionCall","src":"1647:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1639:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1681:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1696:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1712:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1717:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1708:3:23"},"nodeType":"YulFunctionCall","src":"1708:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1721:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1704:3:23"},"nodeType":"YulFunctionCall","src":"1704:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1692:3:23"},"nodeType":"YulFunctionCall","src":"1692:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1674:6:23"},"nodeType":"YulFunctionCall","src":"1674:51:23"},"nodeType":"YulExpressionStatement","src":"1674:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1598:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1609:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1620:4:23","type":""}],"src":"1528:203:23"},{"body":{"nodeType":"YulBlock","src":"1785:124:23","statements":[{"nodeType":"YulAssignment","src":"1795:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1817:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1804:12:23"},"nodeType":"YulFunctionCall","src":"1804:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1795:5:23"}]},{"body":{"nodeType":"YulBlock","src":"1887:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1896:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1899:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1889:6:23"},"nodeType":"YulFunctionCall","src":"1889:12:23"},"nodeType":"YulExpressionStatement","src":"1889:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1846:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1857:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1872:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1877:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1868:3:23"},"nodeType":"YulFunctionCall","src":"1868:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1881:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1864:3:23"},"nodeType":"YulFunctionCall","src":"1864:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1853:3:23"},"nodeType":"YulFunctionCall","src":"1853:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1843:2:23"},"nodeType":"YulFunctionCall","src":"1843:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1836:6:23"},"nodeType":"YulFunctionCall","src":"1836:50:23"},"nodeType":"YulIf","src":"1833:70:23"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1764:6:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1775:5:23","type":""}],"src":"1736:173:23"},{"body":{"nodeType":"YulBlock","src":"2001:167:23","statements":[{"body":{"nodeType":"YulBlock","src":"2047:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2056:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2059:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2049:6:23"},"nodeType":"YulFunctionCall","src":"2049:12:23"},"nodeType":"YulExpressionStatement","src":"2049:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2022:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2031:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2018:3:23"},"nodeType":"YulFunctionCall","src":"2018:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2043:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2014:3:23"},"nodeType":"YulFunctionCall","src":"2014:32:23"},"nodeType":"YulIf","src":"2011:52:23"},{"nodeType":"YulAssignment","src":"2072:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2101:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2082:18:23"},"nodeType":"YulFunctionCall","src":"2082:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2072:6:23"}]},{"nodeType":"YulAssignment","src":"2120:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2147:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2158:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2143:3:23"},"nodeType":"YulFunctionCall","src":"2143:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2130:12:23"},"nodeType":"YulFunctionCall","src":"2130:32:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2120:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1990:6:23","type":""}],"src":"1914:254:23"},{"body":{"nodeType":"YulBlock","src":"2277:224:23","statements":[{"body":{"nodeType":"YulBlock","src":"2323:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2332:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2335:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2325:6:23"},"nodeType":"YulFunctionCall","src":"2325:12:23"},"nodeType":"YulExpressionStatement","src":"2325:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2298:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2307:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2294:3:23"},"nodeType":"YulFunctionCall","src":"2294:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2319:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2290:3:23"},"nodeType":"YulFunctionCall","src":"2290:32:23"},"nodeType":"YulIf","src":"2287:52:23"},{"nodeType":"YulAssignment","src":"2348:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2377:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2358:18:23"},"nodeType":"YulFunctionCall","src":"2358:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2348:6:23"}]},{"nodeType":"YulAssignment","src":"2396:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2429:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2440:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2425:3:23"},"nodeType":"YulFunctionCall","src":"2425:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2406:18:23"},"nodeType":"YulFunctionCall","src":"2406:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2396:6:23"}]},{"nodeType":"YulAssignment","src":"2453:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2480:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2491:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2476:3:23"},"nodeType":"YulFunctionCall","src":"2476:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2463:12:23"},"nodeType":"YulFunctionCall","src":"2463:32:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2453:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2227:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2238:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2250:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2258:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2266:6:23","type":""}],"src":"2173:328:23"},{"body":{"nodeType":"YulBlock","src":"2576:116:23","statements":[{"body":{"nodeType":"YulBlock","src":"2622:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2631:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2634:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2624:6:23"},"nodeType":"YulFunctionCall","src":"2624:12:23"},"nodeType":"YulExpressionStatement","src":"2624:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2597:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2606:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2593:3:23"},"nodeType":"YulFunctionCall","src":"2593:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2618:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2589:3:23"},"nodeType":"YulFunctionCall","src":"2589:32:23"},"nodeType":"YulIf","src":"2586:52:23"},{"nodeType":"YulAssignment","src":"2647:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2676:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2657:18:23"},"nodeType":"YulFunctionCall","src":"2657:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2647:6:23"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2542:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2553:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2565:6:23","type":""}],"src":"2506:186:23"},{"body":{"nodeType":"YulBlock","src":"2798:76:23","statements":[{"nodeType":"YulAssignment","src":"2808:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2820:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2831:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2816:3:23"},"nodeType":"YulFunctionCall","src":"2816:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2808:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2850:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"2861:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2843:6:23"},"nodeType":"YulFunctionCall","src":"2843:25:23"},"nodeType":"YulExpressionStatement","src":"2843:25:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2767:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2778:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2789:4:23","type":""}],"src":"2697:177:23"},{"body":{"nodeType":"YulBlock","src":"2963:263:23","statements":[{"body":{"nodeType":"YulBlock","src":"3009:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3018:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3021:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3011:6:23"},"nodeType":"YulFunctionCall","src":"3011:12:23"},"nodeType":"YulExpressionStatement","src":"3011:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2984:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2993:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2980:3:23"},"nodeType":"YulFunctionCall","src":"2980:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"3005:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2976:3:23"},"nodeType":"YulFunctionCall","src":"2976:32:23"},"nodeType":"YulIf","src":"2973:52:23"},{"nodeType":"YulAssignment","src":"3034:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3063:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3044:18:23"},"nodeType":"YulFunctionCall","src":"3044:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3034:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"3082:45:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3112:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3123:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3108:3:23"},"nodeType":"YulFunctionCall","src":"3108:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3095:12:23"},"nodeType":"YulFunctionCall","src":"3095:32:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3086:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3180:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3189:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3192:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3182:6:23"},"nodeType":"YulFunctionCall","src":"3182:12:23"},"nodeType":"YulExpressionStatement","src":"3182:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3149:5:23"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3170:5:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3163:6:23"},"nodeType":"YulFunctionCall","src":"3163:13:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3156:6:23"},"nodeType":"YulFunctionCall","src":"3156:21:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3146:2:23"},"nodeType":"YulFunctionCall","src":"3146:32:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3139:6:23"},"nodeType":"YulFunctionCall","src":"3139:40:23"},"nodeType":"YulIf","src":"3136:60:23"},{"nodeType":"YulAssignment","src":"3205:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"3215:5:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3205:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2921:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2932:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2944:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2952:6:23","type":""}],"src":"2879:347:23"},{"body":{"nodeType":"YulBlock","src":"3263:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3280:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3287:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3292:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3283:3:23"},"nodeType":"YulFunctionCall","src":"3283:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3273:6:23"},"nodeType":"YulFunctionCall","src":"3273:31:23"},"nodeType":"YulExpressionStatement","src":"3273:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3320:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3323:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3313:6:23"},"nodeType":"YulFunctionCall","src":"3313:15:23"},"nodeType":"YulExpressionStatement","src":"3313:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3344:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3347:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3337:6:23"},"nodeType":"YulFunctionCall","src":"3337:15:23"},"nodeType":"YulExpressionStatement","src":"3337:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3231:127:23"},{"body":{"nodeType":"YulBlock","src":"3493:1008:23","statements":[{"body":{"nodeType":"YulBlock","src":"3540:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3549:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3552:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3542:6:23"},"nodeType":"YulFunctionCall","src":"3542:12:23"},"nodeType":"YulExpressionStatement","src":"3542:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3514:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"3523:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:23"},"nodeType":"YulFunctionCall","src":"3510:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"3535:3:23","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3506:3:23"},"nodeType":"YulFunctionCall","src":"3506:33:23"},"nodeType":"YulIf","src":"3503:53:23"},{"nodeType":"YulAssignment","src":"3565:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3594:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3575:18:23"},"nodeType":"YulFunctionCall","src":"3575:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3565:6:23"}]},{"nodeType":"YulAssignment","src":"3613:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3646:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3657:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3642:3:23"},"nodeType":"YulFunctionCall","src":"3642:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3623:18:23"},"nodeType":"YulFunctionCall","src":"3623:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3613:6:23"}]},{"nodeType":"YulAssignment","src":"3670:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3697:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3708:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3693:3:23"},"nodeType":"YulFunctionCall","src":"3693:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3680:12:23"},"nodeType":"YulFunctionCall","src":"3680:32:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3670:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"3721:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3752:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3763:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3748:3:23"},"nodeType":"YulFunctionCall","src":"3748:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3735:12:23"},"nodeType":"YulFunctionCall","src":"3735:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3725:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3776:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"3786:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3780:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3831:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3840:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3843:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3833:6:23"},"nodeType":"YulFunctionCall","src":"3833:12:23"},"nodeType":"YulExpressionStatement","src":"3833:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3819:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3827:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3816:2:23"},"nodeType":"YulFunctionCall","src":"3816:14:23"},"nodeType":"YulIf","src":"3813:34:23"},{"nodeType":"YulVariableDeclaration","src":"3856:32:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3870:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"3881:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3866:3:23"},"nodeType":"YulFunctionCall","src":"3866:22:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3860:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3936:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3945:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3948:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3938:6:23"},"nodeType":"YulFunctionCall","src":"3938:12:23"},"nodeType":"YulExpressionStatement","src":"3938:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3915:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"3919:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3911:3:23"},"nodeType":"YulFunctionCall","src":"3911:13:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3926:7:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3907:3:23"},"nodeType":"YulFunctionCall","src":"3907:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3900:6:23"},"nodeType":"YulFunctionCall","src":"3900:35:23"},"nodeType":"YulIf","src":"3897:55:23"},{"nodeType":"YulVariableDeclaration","src":"3961:26:23","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3984:2:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3971:12:23"},"nodeType":"YulFunctionCall","src":"3971:16:23"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3965:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4010:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4012:16:23"},"nodeType":"YulFunctionCall","src":"4012:18:23"},"nodeType":"YulExpressionStatement","src":"4012:18:23"}]},"condition":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4002:2:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4006:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3999:2:23"},"nodeType":"YulFunctionCall","src":"3999:10:23"},"nodeType":"YulIf","src":"3996:36:23"},{"nodeType":"YulVariableDeclaration","src":"4041:17:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4055:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4051:3:23"},"nodeType":"YulFunctionCall","src":"4051:7:23"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"4045:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4067:23:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4087:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4081:5:23"},"nodeType":"YulFunctionCall","src":"4081:9:23"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4071:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4099:71:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4121:6:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"4145:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"4149:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4141:3:23"},"nodeType":"YulFunctionCall","src":"4141:13:23"},{"name":"_4","nodeType":"YulIdentifier","src":"4156:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4137:3:23"},"nodeType":"YulFunctionCall","src":"4137:22:23"},{"kind":"number","nodeType":"YulLiteral","src":"4161:2:23","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:23"},"nodeType":"YulFunctionCall","src":"4133:31:23"},{"name":"_4","nodeType":"YulIdentifier","src":"4166:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4129:3:23"},"nodeType":"YulFunctionCall","src":"4129:40:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4117:3:23"},"nodeType":"YulFunctionCall","src":"4117:53:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4103:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4229:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4231:16:23"},"nodeType":"YulFunctionCall","src":"4231:18:23"},"nodeType":"YulExpressionStatement","src":"4231:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4188:10:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4200:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4185:2:23"},"nodeType":"YulFunctionCall","src":"4185:18:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4208:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4220:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4205:2:23"},"nodeType":"YulFunctionCall","src":"4205:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4182:2:23"},"nodeType":"YulFunctionCall","src":"4182:46:23"},"nodeType":"YulIf","src":"4179:72:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4267:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4271:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4260:6:23"},"nodeType":"YulFunctionCall","src":"4260:22:23"},"nodeType":"YulExpressionStatement","src":"4260:22:23"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4298:6:23"},{"name":"_3","nodeType":"YulIdentifier","src":"4306:2:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4291:6:23"},"nodeType":"YulFunctionCall","src":"4291:18:23"},"nodeType":"YulExpressionStatement","src":"4291:18:23"},{"body":{"nodeType":"YulBlock","src":"4355:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4364:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4367:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4357:6:23"},"nodeType":"YulFunctionCall","src":"4357:12:23"},"nodeType":"YulExpressionStatement","src":"4357:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4332:2:23"},{"name":"_3","nodeType":"YulIdentifier","src":"4336:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4328:3:23"},"nodeType":"YulFunctionCall","src":"4328:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"4341:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4324:3:23"},"nodeType":"YulFunctionCall","src":"4324:20:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4346:7:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4321:2:23"},"nodeType":"YulFunctionCall","src":"4321:33:23"},"nodeType":"YulIf","src":"4318:53:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4397:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4405:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4393:3:23"},"nodeType":"YulFunctionCall","src":"4393:15:23"},{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"4414:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"4418:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4410:3:23"},"nodeType":"YulFunctionCall","src":"4410:11:23"},{"name":"_3","nodeType":"YulIdentifier","src":"4423:2:23"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4380:12:23"},"nodeType":"YulFunctionCall","src":"4380:46:23"},"nodeType":"YulExpressionStatement","src":"4380:46:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4450:6:23"},{"name":"_3","nodeType":"YulIdentifier","src":"4458:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4446:3:23"},"nodeType":"YulFunctionCall","src":"4446:15:23"},{"kind":"number","nodeType":"YulLiteral","src":"4463:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4442:3:23"},"nodeType":"YulFunctionCall","src":"4442:24:23"},{"kind":"number","nodeType":"YulLiteral","src":"4468:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4435:6:23"},"nodeType":"YulFunctionCall","src":"4435:35:23"},"nodeType":"YulExpressionStatement","src":"4435:35:23"},{"nodeType":"YulAssignment","src":"4479:16:23","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4489:6:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4479:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3435:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3446:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3458:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3466:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3474:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3482:6:23","type":""}],"src":"3363:1138:23"},{"body":{"nodeType":"YulBlock","src":"4593:173:23","statements":[{"body":{"nodeType":"YulBlock","src":"4639:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4648:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4651:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4641:6:23"},"nodeType":"YulFunctionCall","src":"4641:12:23"},"nodeType":"YulExpressionStatement","src":"4641:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4614:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4623:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4610:3:23"},"nodeType":"YulFunctionCall","src":"4610:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4635:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4606:3:23"},"nodeType":"YulFunctionCall","src":"4606:32:23"},"nodeType":"YulIf","src":"4603:52:23"},{"nodeType":"YulAssignment","src":"4664:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4693:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4674:18:23"},"nodeType":"YulFunctionCall","src":"4674:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4664:6:23"}]},{"nodeType":"YulAssignment","src":"4712:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4745:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4756:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4741:3:23"},"nodeType":"YulFunctionCall","src":"4741:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4722:18:23"},"nodeType":"YulFunctionCall","src":"4722:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4712:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4551:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4562:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4574:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4582:6:23","type":""}],"src":"4506:260:23"},{"body":{"nodeType":"YulBlock","src":"4826:325:23","statements":[{"nodeType":"YulAssignment","src":"4836:22:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4850:1:23","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"4853:4:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"4846:3:23"},"nodeType":"YulFunctionCall","src":"4846:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4836:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"4867:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"4897:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"4903:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4893:3:23"},"nodeType":"YulFunctionCall","src":"4893:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"4871:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4944:31:23","statements":[{"nodeType":"YulAssignment","src":"4946:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4960:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4968:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4956:3:23"},"nodeType":"YulFunctionCall","src":"4956:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4946:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4924:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4917:6:23"},"nodeType":"YulFunctionCall","src":"4917:26:23"},"nodeType":"YulIf","src":"4914:61:23"},{"body":{"nodeType":"YulBlock","src":"5034:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5055:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5062:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5067:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5058:3:23"},"nodeType":"YulFunctionCall","src":"5058:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5048:6:23"},"nodeType":"YulFunctionCall","src":"5048:31:23"},"nodeType":"YulExpressionStatement","src":"5048:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5099:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5102:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5092:6:23"},"nodeType":"YulFunctionCall","src":"5092:15:23"},"nodeType":"YulExpressionStatement","src":"5092:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5127:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5130:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5120:6:23"},"nodeType":"YulFunctionCall","src":"5120:15:23"},"nodeType":"YulExpressionStatement","src":"5120:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4990:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5013:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"5021:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5010:2:23"},"nodeType":"YulFunctionCall","src":"5010:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4987:2:23"},"nodeType":"YulFunctionCall","src":"4987:38:23"},"nodeType":"YulIf","src":"4984:161:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"4806:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"4815:6:23","type":""}],"src":"4771:380:23"},{"body":{"nodeType":"YulBlock","src":"5330:223:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5347:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5358:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5340:6:23"},"nodeType":"YulFunctionCall","src":"5340:21:23"},"nodeType":"YulExpressionStatement","src":"5340:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5381:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5392:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5377:3:23"},"nodeType":"YulFunctionCall","src":"5377:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"5397:2:23","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5370:6:23"},"nodeType":"YulFunctionCall","src":"5370:30:23"},"nodeType":"YulExpressionStatement","src":"5370:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5420:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5431:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5416:3:23"},"nodeType":"YulFunctionCall","src":"5416:18:23"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"5436:34:23","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5409:6:23"},"nodeType":"YulFunctionCall","src":"5409:62:23"},"nodeType":"YulExpressionStatement","src":"5409:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5491:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5502:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5487:3:23"},"nodeType":"YulFunctionCall","src":"5487:18:23"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"5507:3:23","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5480:6:23"},"nodeType":"YulFunctionCall","src":"5480:31:23"},"nodeType":"YulExpressionStatement","src":"5480:31:23"},{"nodeType":"YulAssignment","src":"5520:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5532:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5543:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5528:3:23"},"nodeType":"YulFunctionCall","src":"5528:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5520:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5307:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5321:4:23","type":""}],"src":"5156:397:23"},{"body":{"nodeType":"YulBlock","src":"5732:251:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5749:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5760:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5742:6:23"},"nodeType":"YulFunctionCall","src":"5742:21:23"},"nodeType":"YulExpressionStatement","src":"5742:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5783:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5794:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5779:3:23"},"nodeType":"YulFunctionCall","src":"5779:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"5799:2:23","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5772:6:23"},"nodeType":"YulFunctionCall","src":"5772:30:23"},"nodeType":"YulExpressionStatement","src":"5772:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5822:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5833:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5818:3:23"},"nodeType":"YulFunctionCall","src":"5818:18:23"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"5838:34:23","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5811:6:23"},"nodeType":"YulFunctionCall","src":"5811:62:23"},"nodeType":"YulExpressionStatement","src":"5811:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5893:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5904:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5889:3:23"},"nodeType":"YulFunctionCall","src":"5889:18:23"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"5909:31:23","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5882:6:23"},"nodeType":"YulFunctionCall","src":"5882:59:23"},"nodeType":"YulExpressionStatement","src":"5882:59:23"},{"nodeType":"YulAssignment","src":"5950:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5962:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5973:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5958:3:23"},"nodeType":"YulFunctionCall","src":"5958:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5950:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5709:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5723:4:23","type":""}],"src":"5558:425:23"},{"body":{"nodeType":"YulBlock","src":"6162:235:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6179:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6190:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6172:6:23"},"nodeType":"YulFunctionCall","src":"6172:21:23"},"nodeType":"YulExpressionStatement","src":"6172:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6213:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6224:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6209:3:23"},"nodeType":"YulFunctionCall","src":"6209:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"6229:2:23","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6202:6:23"},"nodeType":"YulFunctionCall","src":"6202:30:23"},"nodeType":"YulExpressionStatement","src":"6202:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6252:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6263:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6248:3:23"},"nodeType":"YulFunctionCall","src":"6248:18:23"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"6268:34:23","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6241:6:23"},"nodeType":"YulFunctionCall","src":"6241:62:23"},"nodeType":"YulExpressionStatement","src":"6241:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6323:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6334:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6319:3:23"},"nodeType":"YulFunctionCall","src":"6319:18:23"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"6339:15:23","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6312:6:23"},"nodeType":"YulFunctionCall","src":"6312:43:23"},"nodeType":"YulExpressionStatement","src":"6312:43:23"},{"nodeType":"YulAssignment","src":"6364:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6376:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6387:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6372:3:23"},"nodeType":"YulFunctionCall","src":"6372:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6364:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6139:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6153:4:23","type":""}],"src":"5988:409:23"},{"body":{"nodeType":"YulBlock","src":"6576:174:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6593:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6604:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6586:6:23"},"nodeType":"YulFunctionCall","src":"6586:21:23"},"nodeType":"YulExpressionStatement","src":"6586:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6627:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6638:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6623:3:23"},"nodeType":"YulFunctionCall","src":"6623:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"6643:2:23","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6616:6:23"},"nodeType":"YulFunctionCall","src":"6616:30:23"},"nodeType":"YulExpressionStatement","src":"6616:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6666:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6677:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6662:3:23"},"nodeType":"YulFunctionCall","src":"6662:18:23"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"6682:26:23","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6655:6:23"},"nodeType":"YulFunctionCall","src":"6655:54:23"},"nodeType":"YulExpressionStatement","src":"6655:54:23"},{"nodeType":"YulAssignment","src":"6718:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6730:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6741:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6726:3:23"},"nodeType":"YulFunctionCall","src":"6726:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6718:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6553:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6567:4:23","type":""}],"src":"6402:348:23"},{"body":{"nodeType":"YulBlock","src":"6929:231:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6946:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6957:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6939:6:23"},"nodeType":"YulFunctionCall","src":"6939:21:23"},"nodeType":"YulExpressionStatement","src":"6939:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6980:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6991:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6976:3:23"},"nodeType":"YulFunctionCall","src":"6976:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"6996:2:23","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6969:6:23"},"nodeType":"YulFunctionCall","src":"6969:30:23"},"nodeType":"YulExpressionStatement","src":"6969:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7019:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7030:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7015:3:23"},"nodeType":"YulFunctionCall","src":"7015:18:23"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"7035:34:23","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7008:6:23"},"nodeType":"YulFunctionCall","src":"7008:62:23"},"nodeType":"YulExpressionStatement","src":"7008:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7090:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7101:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7086:3:23"},"nodeType":"YulFunctionCall","src":"7086:18:23"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7106:11:23","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7079:6:23"},"nodeType":"YulFunctionCall","src":"7079:39:23"},"nodeType":"YulExpressionStatement","src":"7079:39:23"},{"nodeType":"YulAssignment","src":"7127:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7139:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7150:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7135:3:23"},"nodeType":"YulFunctionCall","src":"7135:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7127:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6906:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6920:4:23","type":""}],"src":"6755:405:23"},{"body":{"nodeType":"YulBlock","src":"7352:283:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7362:27:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7382:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7376:5:23"},"nodeType":"YulFunctionCall","src":"7376:13:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7366:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7424:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7432:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7420:3:23"},"nodeType":"YulFunctionCall","src":"7420:17:23"},{"name":"pos","nodeType":"YulIdentifier","src":"7439:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"7444:6:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7398:21:23"},"nodeType":"YulFunctionCall","src":"7398:53:23"},"nodeType":"YulExpressionStatement","src":"7398:53:23"},{"nodeType":"YulVariableDeclaration","src":"7460:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7477:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"7482:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7473:3:23"},"nodeType":"YulFunctionCall","src":"7473:16:23"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"7464:5:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7498:29:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7520:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7514:5:23"},"nodeType":"YulFunctionCall","src":"7514:13:23"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"7502:8:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7562:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7570:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7558:3:23"},"nodeType":"YulFunctionCall","src":"7558:17:23"},{"name":"end_1","nodeType":"YulIdentifier","src":"7577:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"7584:8:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"7536:21:23"},"nodeType":"YulFunctionCall","src":"7536:57:23"},"nodeType":"YulExpressionStatement","src":"7536:57:23"},{"nodeType":"YulAssignment","src":"7602:27:23","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"7613:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"7620:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7609:3:23"},"nodeType":"YulFunctionCall","src":"7609:20:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7602:3:23"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7320:3:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7325:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7333:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7344:3:23","type":""}],"src":"7165:470:23"},{"body":{"nodeType":"YulBlock","src":"7814:227:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7831:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7842:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7824:6:23"},"nodeType":"YulFunctionCall","src":"7824:21:23"},"nodeType":"YulExpressionStatement","src":"7824:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7865:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7876:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7861:3:23"},"nodeType":"YulFunctionCall","src":"7861:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"7881:2:23","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7854:6:23"},"nodeType":"YulFunctionCall","src":"7854:30:23"},"nodeType":"YulExpressionStatement","src":"7854:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7904:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7915:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7900:3:23"},"nodeType":"YulFunctionCall","src":"7900:18:23"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"7920:34:23","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7893:6:23"},"nodeType":"YulFunctionCall","src":"7893:62:23"},"nodeType":"YulExpressionStatement","src":"7893:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7975:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7986:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7971:3:23"},"nodeType":"YulFunctionCall","src":"7971:18:23"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"7991:7:23","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7964:6:23"},"nodeType":"YulFunctionCall","src":"7964:35:23"},"nodeType":"YulExpressionStatement","src":"7964:35:23"},{"nodeType":"YulAssignment","src":"8008:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8020:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8031:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8016:3:23"},"nodeType":"YulFunctionCall","src":"8016:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8008:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7791:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7805:4:23","type":""}],"src":"7640:401:23"},{"body":{"nodeType":"YulBlock","src":"8220:226:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8237:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8248:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8230:6:23"},"nodeType":"YulFunctionCall","src":"8230:21:23"},"nodeType":"YulExpressionStatement","src":"8230:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8271:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8282:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8267:3:23"},"nodeType":"YulFunctionCall","src":"8267:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8287:2:23","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8260:6:23"},"nodeType":"YulFunctionCall","src":"8260:30:23"},"nodeType":"YulExpressionStatement","src":"8260:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8310:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8321:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8306:3:23"},"nodeType":"YulFunctionCall","src":"8306:18:23"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"8326:34:23","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8299:6:23"},"nodeType":"YulFunctionCall","src":"8299:62:23"},"nodeType":"YulExpressionStatement","src":"8299:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8381:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8392:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8377:3:23"},"nodeType":"YulFunctionCall","src":"8377:18:23"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"8397:6:23","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8370:6:23"},"nodeType":"YulFunctionCall","src":"8370:34:23"},"nodeType":"YulExpressionStatement","src":"8370:34:23"},{"nodeType":"YulAssignment","src":"8413:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8425:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8436:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8421:3:23"},"nodeType":"YulFunctionCall","src":"8421:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8413:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8197:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8211:4:23","type":""}],"src":"8046:400:23"},{"body":{"nodeType":"YulBlock","src":"8625:175:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8642:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8653:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8635:6:23"},"nodeType":"YulFunctionCall","src":"8635:21:23"},"nodeType":"YulExpressionStatement","src":"8635:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8676:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8687:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8672:3:23"},"nodeType":"YulFunctionCall","src":"8672:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8692:2:23","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8665:6:23"},"nodeType":"YulFunctionCall","src":"8665:30:23"},"nodeType":"YulExpressionStatement","src":"8665:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8715:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8726:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8711:3:23"},"nodeType":"YulFunctionCall","src":"8711:18:23"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"8731:27:23","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8704:6:23"},"nodeType":"YulFunctionCall","src":"8704:55:23"},"nodeType":"YulExpressionStatement","src":"8704:55:23"},{"nodeType":"YulAssignment","src":"8768:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8780:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8791:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8776:3:23"},"nodeType":"YulFunctionCall","src":"8776:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8768:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8602:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8616:4:23","type":""}],"src":"8451:349:23"},{"body":{"nodeType":"YulBlock","src":"8979:240:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8996:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9007:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8989:6:23"},"nodeType":"YulFunctionCall","src":"8989:21:23"},"nodeType":"YulExpressionStatement","src":"8989:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9030:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9041:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9026:3:23"},"nodeType":"YulFunctionCall","src":"9026:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9046:2:23","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9019:6:23"},"nodeType":"YulFunctionCall","src":"9019:30:23"},"nodeType":"YulExpressionStatement","src":"9019:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9069:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9080:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9065:3:23"},"nodeType":"YulFunctionCall","src":"9065:18:23"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"9085:34:23","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9058:6:23"},"nodeType":"YulFunctionCall","src":"9058:62:23"},"nodeType":"YulExpressionStatement","src":"9058:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9140:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9151:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9136:3:23"},"nodeType":"YulFunctionCall","src":"9136:18:23"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"9156:20:23","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9129:6:23"},"nodeType":"YulFunctionCall","src":"9129:48:23"},"nodeType":"YulExpressionStatement","src":"9129:48:23"},{"nodeType":"YulAssignment","src":"9186:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9209:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9194:3:23"},"nodeType":"YulFunctionCall","src":"9194:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9186:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8956:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8970:4:23","type":""}],"src":"8805:414:23"},{"body":{"nodeType":"YulBlock","src":"9256:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9273:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9280:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"9285:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9276:3:23"},"nodeType":"YulFunctionCall","src":"9276:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9266:6:23"},"nodeType":"YulFunctionCall","src":"9266:31:23"},"nodeType":"YulExpressionStatement","src":"9266:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9313:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9316:4:23","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9306:6:23"},"nodeType":"YulFunctionCall","src":"9306:15:23"},"nodeType":"YulExpressionStatement","src":"9306:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9337:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9340:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9330:6:23"},"nodeType":"YulFunctionCall","src":"9330:15:23"},"nodeType":"YulExpressionStatement","src":"9330:15:23"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"9224:127:23"},{"body":{"nodeType":"YulBlock","src":"9559:286:23","statements":[{"nodeType":"YulVariableDeclaration","src":"9569:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9587:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"9592:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9583:3:23"},"nodeType":"YulFunctionCall","src":"9583:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"9596:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9579:3:23"},"nodeType":"YulFunctionCall","src":"9579:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9573:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9614:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9629:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"9637:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9625:3:23"},"nodeType":"YulFunctionCall","src":"9625:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9607:6:23"},"nodeType":"YulFunctionCall","src":"9607:34:23"},"nodeType":"YulExpressionStatement","src":"9607:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9661:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9672:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9657:3:23"},"nodeType":"YulFunctionCall","src":"9657:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9681:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"9689:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9677:3:23"},"nodeType":"YulFunctionCall","src":"9677:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9650:6:23"},"nodeType":"YulFunctionCall","src":"9650:43:23"},"nodeType":"YulExpressionStatement","src":"9650:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9713:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9724:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9709:3:23"},"nodeType":"YulFunctionCall","src":"9709:18:23"},{"name":"value2","nodeType":"YulIdentifier","src":"9729:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9702:6:23"},"nodeType":"YulFunctionCall","src":"9702:34:23"},"nodeType":"YulExpressionStatement","src":"9702:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9756:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9767:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9752:3:23"},"nodeType":"YulFunctionCall","src":"9752:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9772:3:23","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9745:6:23"},"nodeType":"YulFunctionCall","src":"9745:31:23"},"nodeType":"YulExpressionStatement","src":"9745:31:23"},{"nodeType":"YulAssignment","src":"9785:54:23","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"9811:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9823:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9834:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9819:3:23"},"nodeType":"YulFunctionCall","src":"9819:19:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"9793:17:23"},"nodeType":"YulFunctionCall","src":"9793:46:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9785:4:23"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9504:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9515:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9523:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9531:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9539:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9550:4:23","type":""}],"src":"9356:489:23"},{"body":{"nodeType":"YulBlock","src":"9930:169:23","statements":[{"body":{"nodeType":"YulBlock","src":"9976:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9985:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9988:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9978:6:23"},"nodeType":"YulFunctionCall","src":"9978:12:23"},"nodeType":"YulExpressionStatement","src":"9978:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9951:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"9960:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9947:3:23"},"nodeType":"YulFunctionCall","src":"9947:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"9972:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9943:3:23"},"nodeType":"YulFunctionCall","src":"9943:32:23"},"nodeType":"YulIf","src":"9940:52:23"},{"nodeType":"YulVariableDeclaration","src":"10001:29:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10020:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10014:5:23"},"nodeType":"YulFunctionCall","src":"10014:16:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"10005:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10063:5:23"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"10039:23:23"},"nodeType":"YulFunctionCall","src":"10039:30:23"},"nodeType":"YulExpressionStatement","src":"10039:30:23"},{"nodeType":"YulAssignment","src":"10078:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"10088:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10078:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9896:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9907:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9919:6:23","type":""}],"src":"9850:249:23"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x1EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xFC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x151 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x164 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE7 PUSH2 0xE2 CALLDATASIZE PUSH1 0x4 PUSH2 0xC7F JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x104 PUSH2 0x27A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0xCF4 JUMP JUMPDEST PUSH2 0x124 PUSH2 0x11F CALLDATASIZE PUSH1 0x4 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x30C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x14F PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0xD3C JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x14F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0xD66 JUMP JUMPDEST PUSH2 0x44D JUMP JUMPDEST PUSH2 0x14F PUSH2 0x172 CALLDATASIZE PUSH1 0x4 PUSH2 0xD66 JUMP JUMPDEST PUSH2 0x47E JUMP JUMPDEST PUSH2 0x124 PUSH2 0x185 CALLDATASIZE PUSH1 0x4 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x499 JUMP JUMPDEST PUSH2 0x19D PUSH2 0x198 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA2 JUMP JUMPDEST PUSH2 0x4F9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF3 JUMP JUMPDEST PUSH2 0x104 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0xDBD JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x14F PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0F JUMP JUMPDEST PUSH2 0x59D JUMP JUMPDEST PUSH2 0x104 PUSH2 0x1E7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x5D5 JUMP JUMPDEST PUSH2 0xE7 PUSH2 0x1FA CALLDATASIZE PUSH1 0x4 PUSH2 0xEEB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x259 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x274 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF1E JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2B5 SWAP1 PUSH2 0xF1E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x302 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2D7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x302 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x317 DUP3 PUSH2 0x649 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33E DUP3 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x3B0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x3CC JUMPI POP PUSH2 0x3CC DUP2 CALLER PUSH2 0x1FA JUMP JUMPDEST PUSH2 0x43E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 PUSH2 0x6AB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x457 CALLER DUP3 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x473 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF58 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x448 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x59D JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x274 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x563 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x289 SWAP1 PUSH2 0xF1E JUMP JUMPDEST PUSH2 0x599 CALLER DUP4 DUP4 PUSH2 0x8FC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5A7 CALLER DUP4 PUSH2 0x719 JUMP JUMPDEST PUSH2 0x5C3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xF58 JUMP JUMPDEST PUSH2 0x5CF DUP5 DUP5 DUP5 DUP5 PUSH2 0x9CA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E0 DUP3 PUSH2 0x649 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F7 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x617 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x642 JUMP JUMPDEST DUP1 PUSH2 0x621 DUP5 PUSH2 0x9FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x632 SWAP3 SWAP2 SWAP1 PUSH2 0xFA5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x6E0 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x725 DUP4 PUSH2 0x499 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x76C JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0x790 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x785 DUP5 PUSH2 0x30C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7AB DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x833 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x3A7 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x846 DUP3 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x86C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0xFD4 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x95D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x3A7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x9D5 DUP5 DUP5 DUP5 PUSH2 0x798 JUMP JUMPDEST PUSH2 0x9E1 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x5CF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1019 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0xA0A DUP4 PUSH2 0xB91 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA2A JUMPI PUSH2 0xA2A PUSH2 0xDF9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA54 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xA5E JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0xB86 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xAD4 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x106B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xB0F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xB0C SWAP2 DUP2 ADD SWAP1 PUSH2 0x10A8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB6C JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB3D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB42 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0xB64 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A7 SWAP1 PUSH2 0x1019 JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0x790 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xBD0 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xBFC JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xC1A JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xC32 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xC46 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xC58 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x274 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xCB7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC9F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x5CF JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xCE0 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC9C JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x642 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCC8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD58 DUP4 PUSH2 0xD20 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD84 DUP5 PUSH2 0xD20 JUMP JUMPDEST SWAP3 POP PUSH2 0xD92 PUSH1 0x20 DUP6 ADD PUSH2 0xD20 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x642 DUP3 PUSH2 0xD20 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDD9 DUP4 PUSH2 0xD20 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xDEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE2E DUP6 PUSH2 0xD20 JUMP JUMPDEST SWAP4 POP PUSH2 0xE3C PUSH1 0x20 DUP7 ADD PUSH2 0xD20 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE86 JUMPI PUSH2 0xE86 PUSH2 0xDF9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xEAE JUMPI PUSH2 0xEAE PUSH2 0xDF9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF07 DUP4 PUSH2 0xD20 JUMP JUMPDEST SWAP2 POP PUSH2 0xF15 PUSH1 0x20 DUP5 ADD PUSH2 0xD20 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xF32 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF52 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0xFB7 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0xFCB DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xC9C JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x109E SWAP1 DUP4 ADD DUP5 PUSH2 0xCC8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x642 DUP2 PUSH2 0xC69 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB SLT 0xFC 0xE6 BALANCE 0xBE PUSH32 0xF0DC52E0220CEC90BEC58A67D1C6DC3FD615BE6C1F7854EE1B64736F6C634300 ADDMOD 0xE STOP CALLER ","sourceMap":"628:16679:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;:::i;:::-;;:::i;:::-;;;565:14:23;;558:22;540:41;;528:2;513:18;1570:300:2;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:23;;;1674:51;;1662:2;1647:18;3935:167:2;1528:203:23;3468:406:2;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;:::i;:::-;;:::i;5004:179::-;;;;;;:::i;:::-;;:::i;2190:219::-;;;;;;:::i;:::-;;:::i;1929:204::-;;;;;;:::i;:::-;;:::i;:::-;;;2843:25:23;;;2831:2;2816:18;1929:204:2;2697:177:23;2633:102:2;;;:::i;4169:153::-;;;;;;:::i;:::-;;:::i;5249:314::-;;;;;;:::i;:::-;;:::i;2801:276::-;;;;;;:::i;:::-;;:::i;4388:162::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4508:25:2;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;1570:300;1672:4;-1:-1:-1;;;;;;1707:40:2;;-1:-1:-1;;;1707:40:2;;:104;;-1:-1:-1;;;;;;;1763:48:2;;-1:-1:-1;;;1763:48:2;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:12;;;1827:36:2;1688:175;1570:300;-1:-1:-1;;1570:300:2:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:2;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:2;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:2;:2;-1:-1:-1;;;;;3605:11:2;;3597:57;;;;-1:-1:-1;;;3597:57:2;;5358:2:23;3597:57:2;;;5340:21:23;5397:2;5377:18;;;5370:30;5436:34;5416:18;;;5409:62;-1:-1:-1;;;5487:18:23;;;5480:31;5528:19;;3597:57:2;;;;;;;;;719:10:8;-1:-1:-1;;;;;3686:21:2;;;;:62;;-1:-1:-1;3711:37:2;3728:5;719:10:8;4388:162:2;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:2;;5760:2:23;3665:170:2;;;5742:21:23;5799:2;5779:18;;;5772:30;5838:34;5818:18;;;5811:62;5909:31;5889:18;;;5882:59;5958:19;;3665:170:2;5558:425:23;3665:170:2;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;719:10:8;4834:7:2;4801:18;:41::i;:::-;4793:99;;;;-1:-1:-1;;;4793:99:2;;;;;;;:::i;:::-;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;2190:219::-;2262:7;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;;2324:56;;;;-1:-1:-1;;;2324:56:2;;6604:2:23;2324:56:2;;;6586:21:23;6643:2;6623:18;;;6616:30;-1:-1:-1;;;6662:18:23;;;6655:54;6726:18;;2324:56:2;6402:348:23;1929:204:2;2001:7;-1:-1:-1;;;;;2028:19:2;;2020:73;;;;-1:-1:-1;;;2020:73:2;;6957:2:23;2020:73:2;;;6939:21:23;6996:2;6976:18;;;6969:30;7035:34;7015:18;;;7008:62;-1:-1:-1;;;7086:18:23;;;7079:39;7135:19;;2020:73:2;6755:405:23;2020:73:2;-1:-1:-1;;;;;;2110:16:2;;;;;:9;:16;;;;;;;1929:204::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:8;4296:8:2;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;719:10:8;5450:7:2;5417:18;:41::i;:::-;5409:99;;;;-1:-1:-1;;;5409:99:2;;;;;;;:::i;:::-;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:2;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:2:o;13466:133::-;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;13539:53;;;;-1:-1:-1;;;13539:53:2;;6604:2:23;13539:53:2;;;6586:21:23;6643:2;6623:18;;;6616:30;-1:-1:-1;;;6662:18:23;;;6655:54;6726:18;;13539:53:2;6402:348:23;13539:53:2;13466:133;:::o;12768:171::-;12842:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12842:29:2;-1:-1:-1;;;;;12842:29:2;;;;;;;;:24;;12895:23;12842:24;12895:14;:23::i;:::-;-1:-1:-1;;;;;12886:46:2;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;-1:-1:-1;;;;;7706:16:2;:7;-1:-1:-1;;;;;7706:16:2;;:52;;;-1:-1:-1;;;;;;4508:25:2;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7726:32;7706:87;;;;7786:7;-1:-1:-1;;;;;7762:31:2;:20;7774:7;7762:11;:20::i;:::-;-1:-1:-1;;;;;7762:31:2;;7706:87;7698:96;7540:261;-1:-1:-1;;;;7540:261:2:o;11423:1233::-;11577:4;-1:-1:-1;;;;;11550:31:2;:23;11565:7;11550:14;:23::i;:::-;-1:-1:-1;;;;;11550:31:2;;11542:81;;;;-1:-1:-1;;;11542:81:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;11641:16:2;;11633:65;;;;-1:-1:-1;;;11633:65:2;;8248:2:23;11633:65:2;;;8230:21:23;8287:2;8267:18;;;8260:30;8326:34;8306:18;;;8299:62;-1:-1:-1;;;8377:18:23;;;8370:34;8421:19;;11633:65:2;8046:400:23;11633:65:2;11878:4;-1:-1:-1;;;;;11851:31:2;:23;11866:7;11851:14;:23::i;:::-;-1:-1:-1;;;;;11851:31:2;;11843:81;;;;-1:-1:-1;;;11843:81:2;;;;;;;:::i;:::-;11993:24;;;;:15;:24;;;;;;;;11986:31;;-1:-1:-1;;;;;;11986:31:2;;;;;;-1:-1:-1;;;;;12461:15:2;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12461:20:2;;;12495:13;;;;;;;;;:18;;11986:31;12495:18;;;12533:16;;;:7;:16;;;;;;:21;;;;;;;;;;12570:27;;12009:7;;12570:27;;;3538:336;3468:406;;:::o;13075:307::-;13225:8;-1:-1:-1;;;;;13216:17:2;:5;-1:-1:-1;;;;;13216:17:2;;13208:55;;;;-1:-1:-1;;;13208:55:2;;8653:2:23;13208:55:2;;;8635:21:23;8692:2;8672:18;;;8665:30;8731:27;8711:18;;;8704:55;8776:18;;13208:55:2;8451:349:23;13208:55:2;-1:-1:-1;;;;;13273:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13273:46:2;;;;;;;;;;13334:41;;540::23;;;13334::2;;513:18:23;13334:41:2;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;-1:-1:-1;;;6612:110:2;;;;;;;:::i;415:696:10:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:10;-1:-1:-1;572:41:10;-1:-1:-1;733:28:10;;;749:2;733:28;788:280;-1:-1:-1;;819:5:10;-1:-1:-1;;;953:2:10;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:10;788:280;1032:21;-1:-1:-1;1088:6:10;415:696;-1:-1:-1;;;415:696:10:o;14151:831:2:-;14300:4;-1:-1:-1;;;;;14320:13:2;;1465:19:7;:23;14316:660:2;;14355:71;;-1:-1:-1;;;14355:71:2;;-1:-1:-1;;;;;14355:36:2;;;;;:71;;719:10:8;;14406:4:2;;14412:7;;14421:4;;14355:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14355:71:2;;;;;;;;-1:-1:-1;;14355:71:2;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14593:6;:13;14610:1;14593:18;14589:321;;14635:60;;-1:-1:-1;;;14635:60:2;;;;;;;:::i;14589:321::-;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;-1:-1:-1;;;;;;14476:51:2;-1:-1:-1;;;14476:51:2;;-1:-1:-1;14469:58:2;;14316:660;-1:-1:-1;14961:4:2;14151:831;;;;;;:::o;9889:890:14:-;9942:7;;-1:-1:-1;;;10017:15:14;;10013:99;;-1:-1:-1;;;10052:15:14;;;-1:-1:-1;10095:2:14;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:14;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:14;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:14;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:14;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:14;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:14:o;14:131:23:-;-1:-1:-1;;;;;;88:32:23;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:23;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:23;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:23:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:23;;1343:180;-1:-1:-1;1343:180:23:o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:23;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:23:o;2173:328::-;2250:6;2258;2266;2319:2;2307:9;2298:7;2294:23;2290:32;2287:52;;;2335:1;2332;2325:12;2287:52;2358:29;2377:9;2358:29;:::i;:::-;2348:39;;2406:38;2440:2;2429:9;2425:18;2406:38;:::i;:::-;2396:48;;2491:2;2480:9;2476:18;2463:32;2453:42;;2173:328;;;;;:::o;2506:186::-;2565:6;2618:2;2606:9;2597:7;2593:23;2589:32;2586:52;;;2634:1;2631;2624:12;2586:52;2657:29;2676:9;2657:29;:::i;2879:347::-;2944:6;2952;3005:2;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3044:29;3063:9;3044:29;:::i;:::-;3034:39;;3123:2;3112:9;3108:18;3095:32;3170:5;3163:13;3156:21;3149:5;3146:32;3136:60;;3192:1;3189;3182:12;3136:60;3215:5;3205:15;;;2879:347;;;;;:::o;3231:127::-;3292:10;3287:3;3283:20;3280:1;3273:31;3323:4;3320:1;3313:15;3347:4;3344:1;3337:15;3363:1138;3458:6;3466;3474;3482;3535:3;3523:9;3514:7;3510:23;3506:33;3503:53;;;3552:1;3549;3542:12;3503:53;3575:29;3594:9;3575:29;:::i;:::-;3565:39;;3623:38;3657:2;3646:9;3642:18;3623:38;:::i;:::-;3613:48;;3708:2;3697:9;3693:18;3680:32;3670:42;;3763:2;3752:9;3748:18;3735:32;3786:18;3827:2;3819:6;3816:14;3813:34;;;3843:1;3840;3833:12;3813:34;3881:6;3870:9;3866:22;3856:32;;3926:7;3919:4;3915:2;3911:13;3907:27;3897:55;;3948:1;3945;3938:12;3897:55;3984:2;3971:16;4006:2;4002;3999:10;3996:36;;;4012:18;;:::i;:::-;4087:2;4081:9;4055:2;4141:13;;-1:-1:-1;;4137:22:23;;;4161:2;4133:31;4129:40;4117:53;;;4185:18;;;4205:22;;;4182:46;4179:72;;;4231:18;;:::i;:::-;4271:10;4267:2;4260:22;4306:2;4298:6;4291:18;4346:7;4341:2;4336;4332;4328:11;4324:20;4321:33;4318:53;;;4367:1;4364;4357:12;4318:53;4423:2;4418;4414;4410:11;4405:2;4397:6;4393:15;4380:46;4468:1;4463:2;4458;4450:6;4446:15;4442:24;4435:35;4489:6;4479:16;;;;;;;3363:1138;;;;;;;:::o;4506:260::-;4574:6;4582;4635:2;4623:9;4614:7;4610:23;4606:32;4603:52;;;4651:1;4648;4641:12;4603:52;4674:29;4693:9;4674:29;:::i;:::-;4664:39;;4722:38;4756:2;4745:9;4741:18;4722:38;:::i;:::-;4712:48;;4506:260;;;;;:::o;4771:380::-;4850:1;4846:12;;;;4893;;;4914:61;;4968:4;4960:6;4956:17;4946:27;;4914:61;5021:2;5013:6;5010:14;4990:18;4987:38;4984:161;;5067:10;5062:3;5058:20;5055:1;5048:31;5102:4;5099:1;5092:15;5130:4;5127:1;5120:15;4984:161;;4771:380;;;:::o;5988:409::-;6190:2;6172:21;;;6229:2;6209:18;;;6202:30;6268:34;6263:2;6248:18;;6241:62;-1:-1:-1;;;6334:2:23;6319:18;;6312:43;6387:3;6372:19;;5988:409::o;7165:470::-;7344:3;7382:6;7376:13;7398:53;7444:6;7439:3;7432:4;7424:6;7420:17;7398:53;:::i;:::-;7514:13;;7473:16;;;;7536:57;7514:13;7473:16;7570:4;7558:17;;7536:57;:::i;:::-;7609:20;;7165:470;-1:-1:-1;;;;7165:470:23:o;7640:401::-;7842:2;7824:21;;;7881:2;7861:18;;;7854:30;7920:34;7915:2;7900:18;;7893:62;-1:-1:-1;;;7986:2:23;7971:18;;7964:35;8031:3;8016:19;;7640:401::o;8805:414::-;9007:2;8989:21;;;9046:2;9026:18;;;9019:30;9085:34;9080:2;9065:18;;9058:62;-1:-1:-1;;;9151:2:23;9136:18;;9129:48;9209:3;9194:19;;8805:414::o;9356:489::-;-1:-1:-1;;;;;9625:15:23;;;9607:34;;9677:15;;9672:2;9657:18;;9650:43;9724:2;9709:18;;9702:34;;;9772:3;9767:2;9752:18;;9745:31;;;9550:4;;9793:46;;9819:19;;9811:6;9793:46;:::i;:::-;9785:54;9356:489;-1:-1:-1;;;;;;9356:489:23:o;9850:249::-;9919:6;9972:2;9960:9;9951:7;9947:23;9943:32;9940:52;;;9988:1;9985;9978:12;9940:52;10020:9;10014:16;10039:30;10063:5;10039:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"869400","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2634","getApproved(uint256)":"4769","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"2561","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26705","supportsInterface(bytes4)":"511","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"},"internal":{"__unsafe_increaseBalance(address,uint256)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"infinite","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"infinite","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"infinite","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":192,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":194,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":198,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":202,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":206,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":212,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":192,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":194,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":198,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":202,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":206,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":212,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1240,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e0026b1bcebb7df6c094e0300a308d730a175b6a1692109b765d2645c0c6720b64736f6c634300080e0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 MUL PUSH12 0x1BCEBB7DF6C094E0300A308D PUSH20 0xA175B6A1692109B765D2645C0C6720B64736F6C PUSH4 0x4300080E STOP CALLER ","sourceMap":"194:8964:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e0026b1bcebb7df6c094e0300a308d730a175b6a1692109b765d2645c0c6720b64736f6c634300080e0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 MUL PUSH12 0x1BCEBB7DF6C094E0300A308D PUSH20 0xA175B6A1692109B765D2645C0C6720B64736F6C PUSH4 0x4300080E STOP CALLER ","sourceMap":"194:8964:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f655f89322ce1b7c7f9163f9a61a9994f1f2f363faee7f91b37bfeb85793f4c664736f6c634300080e0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 SSTORE 0xF8 SWAP4 0x22 0xCE SHL PUSH29 0x7F9163F9A61A9994F1F2F363FAEE7F91B37BFEB85793F4C664736F6C63 NUMBER STOP ADDMOD 0xE STOP CALLER ","sourceMap":"424:971:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f655f89322ce1b7c7f9163f9a61a9994f1f2f363faee7f91b37bfeb85793f4c664736f6c634300080e0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 SSTORE 0xF8 SWAP4 0x22 0xCE SHL PUSH29 0x7F9163F9A61A9994F1F2F363FAEE7F91B37BFEB85793F4C664736F6C63 NUMBER STOP ADDMOD 0xE STOP CALLER ","sourceMap":"424:971:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e03633c0b1ee8ca7d6ffdf0068a91233ec98262e590cfc8db6b8f0ebf1598de64736f6c634300080e0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x3633C0B1EE8CA7D6FFDF0068A91233EC98262E590CFC8DB6B8F0EBF1598DE PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER ","sourceMap":"188:2065:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e03633c0b1ee8ca7d6ffdf0068a91233ec98262e590cfc8db6b8f0ebf1598de64736f6c634300080e0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x3633C0B1EE8CA7D6FFDF0068A91233EC98262E590CFC8DB6B8F0EBF1598DE PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER ","sourceMap":"188:2065:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f8e9743af484b84fdc64f4b53e5641c43008a60f5488d7c97a27a1f9d5c4cc264736f6c634300080e0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x8E9743AF484B84FDC64F4B53E5641C43 STOP DUP11 PUSH1 0xF5 BASEFEE DUP14 PUSH29 0x97A27A1F9D5C4CC264736F6C634300080E003300000000000000000000 ","sourceMap":"369:8168:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8168:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206f8e9743af484b84fdc64f4b53e5641c43008a60f5488d7c97a27a1f9d5c4cc264736f6c634300080e0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0x8E9743AF484B84FDC64F4B53E5641C43 STOP DUP11 PUSH1 0xF5 BASEFEE DUP14 PUSH29 0x97A27A1F9D5C4CC264736F6C634300080E003300000000000000000000 ","sourceMap":"369:8168:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200c1a556746d9efad5e291a3661bbd0a7cf9b46b13817948b035ff5268ffd08e264736f6c634300080e0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC BYTE SSTORE PUSH8 0x46D9EFAD5E291A36 PUSH2 0xBBD0 0xA7 0xCF SWAP12 CHAINID 0xB1 CODESIZE OR SWAP5 DUP12 SUB 0x5F CREATE2 0x26 DUP16 REVERT ADDMOD 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER ","sourceMap":"202:12302:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:14;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200c1a556746d9efad5e291a3661bbd0a7cf9b46b13817948b035ff5268ffd08e264736f6c634300080e0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC BYTE SSTORE PUSH8 0x46D9EFAD5E291A36 PUSH2 0xBBD0 0xA7 0xCF SWAP12 CHAINID 0xB1 CODESIZE OR SWAP5 DUP12 SUB 0x5F CREATE2 0x26 DUP16 REVERT ADDMOD 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER ","sourceMap":"202:12302:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ERC721Promotion.sol":{"ERC721Promotion":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"string","name":"_tokenURI","type":"string"},{"internalType":"address","name":"_promoterAddress","type":"address"},{"internalType":"uint256","name":"_amountOfClaimsPerPerson","type":"uint256"},{"internalType":"address","name":"_mailboxAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint256","name":"claimCount","type":"uint256"}],"name":"ClaimedPromotion","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"amountOfClaimsPerPerson","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"badgeTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"bytes","name":"_body","type":"bytes"}],"name":"handle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mailbox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"promoter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"_tokenURI","type":"string"}],"name":"setTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"handle(uint32,bytes32,bytes)":{"params":{"_body":"Raw bytes content of message body","_origin":"Domain ID of the chain from which the message came","_sender":"Address of the message sender on the origin chain as bytes32"}},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_229":{"entryPoint":null,"id":229,"parameterSlots":2,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_3318":{"entryPoint":null,"id":3318,"parameterSlots":6,"returnSlots":0},"@_checkOwner_54":{"entryPoint":314,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_1721":{"entryPoint":193,"id":1721,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":197,"id":111,"parameterSlots":1,"returnSlots":0},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@setTokenURI_3454":{"entryPoint":279,"id":3454,"parameterSlots":1,"returnSlots":0},"abi_decode_address_fromMemory":{"entryPoint":782,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string_fromMemory":{"entryPoint":599,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256t_address_fromMemory":{"entryPoint":811,"id":null,"parameterSlots":2,"returnSlots":6},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":1002,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x41":{"entryPoint":577,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2966:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:23"},"nodeType":"YulFunctionCall","src":"66:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:23"},"nodeType":"YulFunctionCall","src":"56:31:23"},"nodeType":"YulExpressionStatement","src":"56:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:23"},"nodeType":"YulFunctionCall","src":"96:15:23"},"nodeType":"YulExpressionStatement","src":"96:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:23"},"nodeType":"YulFunctionCall","src":"120:15:23"},"nodeType":"YulExpressionStatement","src":"120:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:23"},{"body":{"nodeType":"YulBlock","src":"210:821:23","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:23"},"nodeType":"YulFunctionCall","src":"261:12:23"},"nodeType":"YulExpressionStatement","src":"261:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:23"},"nodeType":"YulFunctionCall","src":"234:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:23"},"nodeType":"YulFunctionCall","src":"230:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:23"},"nodeType":"YulFunctionCall","src":"223:35:23"},"nodeType":"YulIf","src":"220:55:23"},{"nodeType":"YulVariableDeclaration","src":"284:23:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:23"},"nodeType":"YulFunctionCall","src":"294:13:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:23","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:23"},"nodeType":"YulFunctionCall","src":"330:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:23"},"nodeType":"YulFunctionCall","src":"326:18:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:23"},"nodeType":"YulFunctionCall","src":"369:18:23"},"nodeType":"YulExpressionStatement","src":"369:18:23"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:23"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:23"},"nodeType":"YulFunctionCall","src":"356:10:23"},"nodeType":"YulIf","src":"353:36:23"},{"nodeType":"YulVariableDeclaration","src":"398:17:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:23"},"nodeType":"YulFunctionCall","src":"408:7:23"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:23"},"nodeType":"YulFunctionCall","src":"438:9:23"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:23"},"nodeType":"YulFunctionCall","src":"498:13:23"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:23"},"nodeType":"YulFunctionCall","src":"494:22:23"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:23","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:23"},"nodeType":"YulFunctionCall","src":"490:31:23"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:23"},"nodeType":"YulFunctionCall","src":"486:40:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:23"},"nodeType":"YulFunctionCall","src":"474:53:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:23"},"nodeType":"YulFunctionCall","src":"588:18:23"},"nodeType":"YulExpressionStatement","src":"588:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:23"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:23"},"nodeType":"YulFunctionCall","src":"542:18:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:23"},"nodeType":"YulFunctionCall","src":"562:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:23"},"nodeType":"YulFunctionCall","src":"539:46:23"},"nodeType":"YulIf","src":"536:72:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:23"},"nodeType":"YulFunctionCall","src":"617:22:23"},"nodeType":"YulExpressionStatement","src":"617:22:23"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:23"},"nodeType":"YulFunctionCall","src":"648:18:23"},"nodeType":"YulExpressionStatement","src":"648:18:23"},{"nodeType":"YulVariableDeclaration","src":"675:14:23","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:23","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:23"},"nodeType":"YulFunctionCall","src":"737:12:23"},"nodeType":"YulExpressionStatement","src":"737:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:23"},"nodeType":"YulFunctionCall","src":"708:15:23"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:23"},"nodeType":"YulFunctionCall","src":"704:24:23"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:23"},"nodeType":"YulFunctionCall","src":"701:33:23"},"nodeType":"YulIf","src":"698:53:23"},{"nodeType":"YulVariableDeclaration","src":"760:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:23","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:23"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:23"},"nodeType":"YulFunctionCall","src":"850:14:23"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:23"},"nodeType":"YulFunctionCall","src":"846:23:23"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:23"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:23"},"nodeType":"YulFunctionCall","src":"881:14:23"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:23"},"nodeType":"YulFunctionCall","src":"877:23:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:23"},"nodeType":"YulFunctionCall","src":"871:30:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:23"},"nodeType":"YulFunctionCall","src":"839:63:23"},"nodeType":"YulExpressionStatement","src":"839:63:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:23"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:23"},"nodeType":"YulFunctionCall","src":"787:9:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:23","statements":[{"nodeType":"YulAssignment","src":"799:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:23"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:23"},"nodeType":"YulFunctionCall","src":"804:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:23","statements":[]},"src":"779:133:23"},{"body":{"nodeType":"YulBlock","src":"942:59:23","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"971:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"979:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"967:3:23"},"nodeType":"YulFunctionCall","src":"967:15:23"},{"name":"_4","nodeType":"YulIdentifier","src":"984:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"963:3:23"},"nodeType":"YulFunctionCall","src":"963:24:23"},{"kind":"number","nodeType":"YulLiteral","src":"989:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:23"},"nodeType":"YulFunctionCall","src":"956:35:23"},"nodeType":"YulExpressionStatement","src":"956:35:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"927:1:23"},{"name":"_1","nodeType":"YulIdentifier","src":"930:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"924:2:23"},"nodeType":"YulFunctionCall","src":"924:9:23"},"nodeType":"YulIf","src":"921:80:23"},{"nodeType":"YulAssignment","src":"1010:15:23","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1019:6:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1010:5:23"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:23","type":""}],"src":"146:885:23"},{"body":{"nodeType":"YulBlock","src":"1096:117:23","statements":[{"nodeType":"YulAssignment","src":"1106:22:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1121:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1115:5:23"},"nodeType":"YulFunctionCall","src":"1115:13:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1106:5:23"}]},{"body":{"nodeType":"YulBlock","src":"1191:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1200:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1203:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1193:6:23"},"nodeType":"YulFunctionCall","src":"1193:12:23"},"nodeType":"YulExpressionStatement","src":"1193:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1150:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1161:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1176:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1181:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1172:3:23"},"nodeType":"YulFunctionCall","src":"1172:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1185:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1168:3:23"},"nodeType":"YulFunctionCall","src":"1168:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1157:3:23"},"nodeType":"YulFunctionCall","src":"1157:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1147:2:23"},"nodeType":"YulFunctionCall","src":"1147:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1140:6:23"},"nodeType":"YulFunctionCall","src":"1140:50:23"},"nodeType":"YulIf","src":"1137:70:23"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1075:6:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1086:5:23","type":""}],"src":"1036:177:23"},{"body":{"nodeType":"YulBlock","src":"1414:804:23","statements":[{"body":{"nodeType":"YulBlock","src":"1461:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1470:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1473:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1463:6:23"},"nodeType":"YulFunctionCall","src":"1463:12:23"},"nodeType":"YulExpressionStatement","src":"1463:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1435:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1444:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1431:3:23"},"nodeType":"YulFunctionCall","src":"1431:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1456:3:23","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1427:3:23"},"nodeType":"YulFunctionCall","src":"1427:33:23"},"nodeType":"YulIf","src":"1424:53:23"},{"nodeType":"YulVariableDeclaration","src":"1486:30:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1506:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1500:5:23"},"nodeType":"YulFunctionCall","src":"1500:16:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1490:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1525:28:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1543:2:23","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1547:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1539:3:23"},"nodeType":"YulFunctionCall","src":"1539:10:23"},{"kind":"number","nodeType":"YulLiteral","src":"1551:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1535:3:23"},"nodeType":"YulFunctionCall","src":"1535:18:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1529:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1580:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1589:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1592:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1582:6:23"},"nodeType":"YulFunctionCall","src":"1582:12:23"},"nodeType":"YulExpressionStatement","src":"1582:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1568:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1576:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1565:2:23"},"nodeType":"YulFunctionCall","src":"1565:14:23"},"nodeType":"YulIf","src":"1562:34:23"},{"nodeType":"YulAssignment","src":"1605:71:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1648:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"1659:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1644:3:23"},"nodeType":"YulFunctionCall","src":"1644:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1668:7:23"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1615:28:23"},"nodeType":"YulFunctionCall","src":"1615:61:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1605:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"1685:41:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1711:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1722:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1707:3:23"},"nodeType":"YulFunctionCall","src":"1707:18:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1701:5:23"},"nodeType":"YulFunctionCall","src":"1701:25:23"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1689:8:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1755:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1764:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1767:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1757:6:23"},"nodeType":"YulFunctionCall","src":"1757:12:23"},"nodeType":"YulExpressionStatement","src":"1757:12:23"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1741:8:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1751:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1738:2:23"},"nodeType":"YulFunctionCall","src":"1738:16:23"},"nodeType":"YulIf","src":"1735:36:23"},{"nodeType":"YulAssignment","src":"1780:73:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1823:9:23"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1834:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1819:3:23"},"nodeType":"YulFunctionCall","src":"1819:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1845:7:23"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1790:28:23"},"nodeType":"YulFunctionCall","src":"1790:63:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1780:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"1862:41:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1888:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1899:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1884:3:23"},"nodeType":"YulFunctionCall","src":"1884:18:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1878:5:23"},"nodeType":"YulFunctionCall","src":"1878:25:23"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"1866:8:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1932:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1941:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1944:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1934:6:23"},"nodeType":"YulFunctionCall","src":"1934:12:23"},"nodeType":"YulExpressionStatement","src":"1934:12:23"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"1918:8:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1928:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1915:2:23"},"nodeType":"YulFunctionCall","src":"1915:16:23"},"nodeType":"YulIf","src":"1912:36:23"},{"nodeType":"YulAssignment","src":"1957:73:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2000:9:23"},{"name":"offset_2","nodeType":"YulIdentifier","src":"2011:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1996:3:23"},"nodeType":"YulFunctionCall","src":"1996:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2022:7:23"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1967:28:23"},"nodeType":"YulFunctionCall","src":"1967:63:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1957:6:23"}]},{"nodeType":"YulAssignment","src":"2039:59:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2083:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2094:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2079:3:23"},"nodeType":"YulFunctionCall","src":"2079:18:23"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2049:29:23"},"nodeType":"YulFunctionCall","src":"2049:49:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2039:6:23"}]},{"nodeType":"YulAssignment","src":"2107:36:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2127:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2138:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:23"},"nodeType":"YulFunctionCall","src":"2123:19:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2117:5:23"},"nodeType":"YulFunctionCall","src":"2117:26:23"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2107:6:23"}]},{"nodeType":"YulAssignment","src":"2152:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2196:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2207:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2192:3:23"},"nodeType":"YulFunctionCall","src":"2192:19:23"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"2162:29:23"},"nodeType":"YulFunctionCall","src":"2162:50:23"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2152:6:23"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1340:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1351:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1363:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1371:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1379:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1387:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1395:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1403:6:23","type":""}],"src":"1218:1000:23"},{"body":{"nodeType":"YulBlock","src":"2397:182:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2414:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2425:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2407:6:23"},"nodeType":"YulFunctionCall","src":"2407:21:23"},"nodeType":"YulExpressionStatement","src":"2407:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2448:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2459:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:23"},"nodeType":"YulFunctionCall","src":"2444:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"2464:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2437:6:23"},"nodeType":"YulFunctionCall","src":"2437:30:23"},"nodeType":"YulExpressionStatement","src":"2437:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2487:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2498:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2483:3:23"},"nodeType":"YulFunctionCall","src":"2483:18:23"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"2503:34:23","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2476:6:23"},"nodeType":"YulFunctionCall","src":"2476:62:23"},"nodeType":"YulExpressionStatement","src":"2476:62:23"},{"nodeType":"YulAssignment","src":"2547:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2559:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2570:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2555:3:23"},"nodeType":"YulFunctionCall","src":"2555:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2547:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2374:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2388:4:23","type":""}],"src":"2223:356:23"},{"body":{"nodeType":"YulBlock","src":"2639:325:23","statements":[{"nodeType":"YulAssignment","src":"2649:22:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2663:1:23","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2666:4:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2659:3:23"},"nodeType":"YulFunctionCall","src":"2659:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2649:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"2680:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2710:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"2716:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2706:3:23"},"nodeType":"YulFunctionCall","src":"2706:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2684:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2757:31:23","statements":[{"nodeType":"YulAssignment","src":"2759:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2773:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2781:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2769:3:23"},"nodeType":"YulFunctionCall","src":"2769:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2759:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2737:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2730:6:23"},"nodeType":"YulFunctionCall","src":"2730:26:23"},"nodeType":"YulIf","src":"2727:61:23"},{"body":{"nodeType":"YulBlock","src":"2847:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2868:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2875:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2880:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2871:3:23"},"nodeType":"YulFunctionCall","src":"2871:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2861:6:23"},"nodeType":"YulFunctionCall","src":"2861:31:23"},"nodeType":"YulExpressionStatement","src":"2861:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2912:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2915:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2905:6:23"},"nodeType":"YulFunctionCall","src":"2905:15:23"},"nodeType":"YulExpressionStatement","src":"2905:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2940:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2943:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2933:6:23"},"nodeType":"YulFunctionCall","src":"2933:15:23"},"nodeType":"YulExpressionStatement","src":"2933:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2803:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2826:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2834:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2823:2:23"},"nodeType":"YulFunctionCall","src":"2823:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2800:2:23"},"nodeType":"YulFunctionCall","src":"2800:38:23"},"nodeType":"YulIf","src":"2797:161:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2619:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2628:6:23","type":""}],"src":"2584:380:23"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_uint256t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let offset_2 := mload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_string_fromMemory(add(headStart, offset_2), dataEnd)\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n        value5 := abi_decode_address_fromMemory(add(headStart, 160))\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b50604051620020983803806200209883398101604081905262000034916200032b565b8551869086906200004d9060009060208501906200019b565b508051620000639060019060208401906200019b565b505050620000806200007a620000c160201b60201c565b620000c5565b6200008b8462000117565b600a919091556001600160a01b03908116608052600c80546001600160a01b031916929091169190911790555062000426915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001216200013a565b8051620001369060099060208401906200019b565b5050565b6007546001600160a01b03163314620001995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b828054620001a990620003ea565b90600052602060002090601f016020900481019282620001cd576000855562000218565b82601f10620001e857805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000218578251825591602001919060010190620001fb565b50620002269291506200022a565b5090565b5b808211156200022657600081556001016200022b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026957600080fd5b81516001600160401b038082111562000286576200028662000241565b604051601f8301601f19908116603f01168101908282118183101715620002b157620002b162000241565b81604052838152602092508683858801011115620002ce57600080fd5b600091505b83821015620002f25785820183015181830184015290820190620002d3565b83821115620003045760008385830101525b9695505050505050565b80516001600160a01b03811681146200032657600080fd5b919050565b60008060008060008060c087890312156200034557600080fd5b86516001600160401b03808211156200035d57600080fd5b6200036b8a838b0162000257565b975060208901519150808211156200038257600080fd5b620003908a838b0162000257565b96506040890151915080821115620003a757600080fd5b50620003b689828a0162000257565b945050620003c7606088016200030e565b925060808701519150620003de60a088016200030e565b90509295509295509295565b600181811c90821680620003ff57607f821691505b6020821081036200042057634e487b7160e01b600052602260045260246000fd5b50919050565b608051611c4f62000449600039600081816102b401526106420152611c4f6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116b9565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061172e565b610197610192366004611741565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461176f565b610443565b005b6101c26101d236600461179b565b61055d565b6101c26101e536600461179b565b61058e565b6101776105a9565b6101c26102003660046117dc565b610637565b610197610213366004611741565b610713565b600c54610197906001600160a01b031681565b61023e61023936600461186e565b610773565b604051908152602001610166565b6101c26107f9565b6007546001600160a01b0316610197565b61017761080d565b6101c261027b36600461188b565b61081c565b61023e600a5481565b6101c2610297366004611955565b61082b565b6101776102aa366004611741565b610863565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119d5565b61086e565b61015a6102f7366004611a1e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461186e565b610889565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a4c565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610902565b506000908152600460205260409020546001600160a01b031690565b600061044e82610713565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b6105588383610961565b505050565b61056733826109cf565b6105835760405162461bcd60e51b81526004016104b790611a86565b610558838383610a4e565b6105588383836040518060200160405280600081525061082b565b600980546105b690611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611a4c565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066c57600080fd5b600061067a8284018461186e565b6001600160a01b0381166000908152600b6020526040812054919250036106a9576106a481610bbf565b61070c565b600a546001600160a01b0382166000908152600b6020526040902054106107035760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61070c81610d2b565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107dd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b610801610dad565b61080b6000610e07565b565b60606001805461039990611a4c565b610827338383610e59565b5050565b61083533836109cf565b6108515760405162461bcd60e51b81526004016104b790611a86565b61085d84848484610f27565b50505050565b606061038482610f5a565b610876610dad565b805161082790600990602084019061160a565b610891610dad565b6001600160a01b0381166108f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b6108ff81610e07565b50565b6000818152600260205260409020546001600160a01b03166108ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061099682610713565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109db83610713565b9050806001600160a01b0316846001600160a01b03161480610a2257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a465750836001600160a01b0316610a3b8461041c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a6182610713565b6001600160a01b031614610a875760405162461bcd60e51b81526004016104b790611ad3565b6001600160a01b038216610ae95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b610af68383836001611062565b826001600160a01b0316610b0982610713565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016104b790611ad3565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600b602052604090205415610c185760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610c2360085490565b9050610c33600880546001019055565b610c3d82826110aa565b610cd18160098054610c4e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90611a4c565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b50505050506110c4565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610d54908490611b18565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b0316331461080b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610eba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f32848484610a4e565b610f3e8484848461115e565b61085d5760405162461bcd60e51b81526004016104b790611b3e565b6060610f6582610902565b60008281526006602052604081208054610f7e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90611a4c565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050509050600061101560408051602081019091526000815290565b90508051600003611027575092915050565b815115611059578082604051602001611041929190611b90565b60405160208183030381529060405292505050919050565b610a468461125f565b60405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74207472616e73666572207468697320746f6b656e00000000000060448201526064016104b7565b6108278282604051806020016040528060008152506112d3565b6000828152600260205260409020546001600160a01b031661113f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b600082815260066020908152604090912082516105589284019061160a565b60006001600160a01b0384163b1561125457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a2903390899088908890600401611bbf565b6020604051808303816000875af19250505080156111dd575060408051601f3d908101601f191682019092526111da91810190611bfc565b60015b61123a573d80801561120b576040519150601f19603f3d011682016040523d82523d6000602084013e611210565b606091505b5080516000036112325760405162461bcd60e51b81526004016104b790611b3e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a46565b506001949350505050565b606061126a82610902565b600061128160408051602081019091526000815290565b905060008151116112a157604051806020016040528060008152506112cc565b806112ab84611306565b6040516020016112bc929190611b90565b6040516020818303038152906040525b9392505050565b6112dd8383611399565b6112ea600084848461115e565b6105585760405162461bcd60e51b81526004016104b790611b3e565b6060600061131383611532565b600101905060008167ffffffffffffffff811115611333576113336118c9565b6040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136757509392505050565b6001600160a01b0382166113ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114545760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b611462600083836001611062565b6000818152600260205260409020546001600160a01b0316156114c75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106115715772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061159d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115bb57662386f26fc10000830492506010015b6305f5e10083106115d3576305f5e100830492506008015b61271083106115e757612710830492506004015b606483106115f9576064830492506002015b600a83106103845760010192915050565b82805461161690611a4c565b90600052602060002090601f016020900481019282611638576000855561167e565b82601f1061165157805160ff191683800117855561167e565b8280016001018555821561167e579182015b8281111561167e578251825591602001919060010190611663565b5061168a92915061168e565b5090565b5b8082111561168a576000815560010161168f565b6001600160e01b0319811681146108ff57600080fd5b6000602082840312156116cb57600080fd5b81356112cc816116a3565b60005b838110156116f15781810151838201526020016116d9565b8381111561085d5750506000910152565b6000815180845261171a8160208601602086016116d6565b601f01601f19169290920160200192915050565b6020815260006112cc6020830184611702565b60006020828403121561175357600080fd5b5035919050565b6001600160a01b03811681146108ff57600080fd5b6000806040838503121561178257600080fd5b823561178d8161175a565b946020939093013593505050565b6000806000606084860312156117b057600080fd5b83356117bb8161175a565b925060208401356117cb8161175a565b929592945050506040919091013590565b600080600080606085870312156117f257600080fd5b843563ffffffff8116811461180657600080fd5b935060208501359250604085013567ffffffffffffffff8082111561182a57600080fd5b818701915087601f83011261183e57600080fd5b81358181111561184d57600080fd5b88602082850101111561185f57600080fd5b95989497505060200194505050565b60006020828403121561188057600080fd5b81356112cc8161175a565b6000806040838503121561189e57600080fd5b82356118a98161175a565b9150602083013580151581146118be57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118fa576118fa6118c9565b604051601f8501601f19908116603f01168101908282118183101715611922576119226118c9565b8160405280935085815286868601111561193b57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561196b57600080fd5b84356119768161175a565b935060208501356119868161175a565b925060408501359150606085013567ffffffffffffffff8111156119a957600080fd5b8501601f810187136119ba57600080fd5b6119c9878235602084016118df565b91505092959194509250565b6000602082840312156119e757600080fd5b813567ffffffffffffffff8111156119fe57600080fd5b8201601f81018413611a0f57600080fd5b610a46848235602084016118df565b60008060408385031215611a3157600080fd5b8235611a3c8161175a565b915060208301356118be8161175a565b600181811c90821680611a6057607f821691505b602082108103611a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60008219821115611b3957634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611ba28184602088016116d6565b835190830190611bb68183602088016116d6565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf290830184611702565b9695505050505050565b600060208284031215611c0e57600080fd5b81516112cc816116a356fea26469706673582212208d47f1edfdaced66a3bde214a4d9a4f299526bd5fa060c7c58c18d45ae5a80d164736f6c634300080e0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2098 CODESIZE SUB DUP1 PUSH3 0x2098 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x32B JUMP JUMPDEST DUP6 MLOAD DUP7 SWAP1 DUP7 SWAP1 PUSH3 0x4D SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x63 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP POP PUSH3 0x80 PUSH3 0x7A PUSH3 0xC1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xC5 JUMP JUMPDEST PUSH3 0x8B DUP5 PUSH3 0x117 JUMP JUMPDEST PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x426 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x121 PUSH3 0x13A JUMP JUMPDEST DUP1 MLOAD PUSH3 0x136 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x199 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1A9 SWAP1 PUSH3 0x3EA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1CD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1E8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x218 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x218 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1FB JUMP JUMPDEST POP PUSH3 0x226 SWAP3 SWAP2 POP PUSH3 0x22A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x226 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x22B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2B1 JUMPI PUSH3 0x2B1 PUSH3 0x241 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x2F2 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x304 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x36B DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x390 DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3B6 DUP10 DUP3 DUP11 ADD PUSH3 0x257 JUMP JUMPDEST SWAP5 POP POP PUSH3 0x3C7 PUSH1 0x60 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD SWAP2 POP PUSH3 0x3DE PUSH1 0xA0 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x3FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x420 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1C4F PUSH3 0x449 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B4 ADD MSTORE PUSH2 0x642 ADD MSTORE PUSH2 0x1C4F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xB212BA9F EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4F8AAAC6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6769A0C4 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST PUSH2 0x197 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x443 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x55D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x177 PUSH2 0x5A9 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DC JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x197 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x7F9 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x197 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH2 0x23E PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x82B JUMP JUMPDEST PUSH2 0x177 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x197 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D5 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x369 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x384 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3C5 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x412 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x412 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x427 DUP3 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E DUP3 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x4C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4DC JUMPI POP PUSH2 0x4DC DUP2 CALLER PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 PUSH2 0x961 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x567 CALLER DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x82B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x5B6 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5E2 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x62F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x604 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x62F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x612 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x67A DUP3 DUP5 ADD DUP5 PUSH2 0x186E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SUB PUSH2 0x6A9 JUMPI PUSH2 0x6A4 DUP2 PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x70C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x70C DUP2 PUSH2 0xD2B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x801 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x80B PUSH1 0x0 PUSH2 0xE07 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST PUSH2 0x827 CALLER DUP4 DUP4 PUSH2 0xE59 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x835 CALLER DUP4 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x85D DUP5 DUP5 DUP5 DUP5 PUSH2 0xF27 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x384 DUP3 PUSH2 0xF5A JUMP JUMPDEST PUSH2 0x876 PUSH2 0xDAD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x827 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH2 0x891 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x8FF DUP2 PUSH2 0xE07 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x996 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9DB DUP4 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xA22 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA46 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA3B DUP5 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA61 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0xAF6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB09 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xC18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x105B1C9958591E481BDDDB9CC8139195 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xC33 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC3D DUP3 DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH1 0x9 DUP1 SLOAD PUSH2 0xC4E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC7A SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCC7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC9C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCAA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xD54 SWAP1 DUP5 SWAP1 PUSH2 0x1B18 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF32 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0xF3E DUP5 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF65 DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF7E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFAA SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFF7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFCC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFF7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFDA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1015 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1027 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1059 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1041 SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA46 DUP5 PUSH2 0x125F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E73666572207468697320746F6B656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x827 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12D3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x113F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x558 SWAP3 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x11A2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11DD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11DA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x123A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1232 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA46 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x126A DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12CC JUMP JUMPDEST DUP1 PUSH2 0x12AB DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12BC SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x12DD DUP4 DUP4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x12EA PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1313 DUP4 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH2 0x1333 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1367 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1454 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x1462 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1571 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x159D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15BB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x15D3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x15E7 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x15F9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x384 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1616 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1638 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1651 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x167E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x167E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1663 JUMP JUMPDEST POP PUSH2 0x168A SWAP3 SWAP2 POP PUSH2 0x168E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x168A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x168F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16F1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x85D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x171A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x178D DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x17BB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x17CB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x185F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x18A9 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x18C9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1976 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1986 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C9 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A3C DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x18BE DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A60 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A80 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B39 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1BA2 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BB6 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SELFBALANCE CALL 0xED REVERT 0xAC 0xED PUSH7 0xA3BDE214A4D9A4 CALLCODE SWAP10 MSTORE PUSH12 0xD5FA060C7C58C18D45AE5A80 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER ","sourceMap":"356:2819:15:-:0;;;825:419;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1456:13:2;;1054:4:15;;1060:6;;1456:13:2;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1479:17:2;;;;:7;;:17;;;;;:::i;:::-;;1390:113;;936:32:0;955:12;:10;;;:12;;:::i;:::-;936:18;:32::i;:::-;1079:22:15::1;1091:9:::0;1079:11:::1;:22::i;:::-;1112:23;:50:::0;;;;-1:-1:-1;;;;;1173:25:15;;::::1;;::::0;1209:8:::1;:27:::0;;-1:-1:-1;;;;;;1209:27:15::1;::::0;;;::::1;::::0;;;::::1;::::0;;-1:-1:-1;356:2819:15;;-1:-1:-1;;356:2819:15;640:96:8;719:10;;640:96::o;2433:187:0:-;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;2368:107:15:-;1094:13:0;:11;:13::i;:::-;2442:25:15;;::::1;::::0;:13:::1;::::0;:25:::1;::::0;::::1;::::0;::::1;:::i;:::-;;2368:107:::0;:::o;1359:130:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;2425:2:23;1414:68:0;;;2407:21:23;;;2444:18;;;2437:30;2503:34;2483:18;;;2476:62;2555:18;;1414:68:0;;;;;;;;1359:130::o;356:2819:15:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;356:2819:15;;;-1:-1:-1;356:2819:15;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:23;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:23;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:23;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:23:o;1036:177::-;1115:13;;-1:-1:-1;;;;;1157:31:23;;1147:42;;1137:70;;1203:1;1200;1193:12;1137:70;1036:177;;;:::o;1218:1000::-;1363:6;1371;1379;1387;1395;1403;1456:3;1444:9;1435:7;1431:23;1427:33;1424:53;;;1473:1;1470;1463:12;1424:53;1500:16;;-1:-1:-1;;;;;1565:14:23;;;1562:34;;;1592:1;1589;1582:12;1562:34;1615:61;1668:7;1659:6;1648:9;1644:22;1615:61;:::i;:::-;1605:71;;1722:2;1711:9;1707:18;1701:25;1685:41;;1751:2;1741:8;1738:16;1735:36;;;1767:1;1764;1757:12;1735:36;1790:63;1845:7;1834:8;1823:9;1819:24;1790:63;:::i;:::-;1780:73;;1899:2;1888:9;1884:18;1878:25;1862:41;;1928:2;1918:8;1915:16;1912:36;;;1944:1;1941;1934:12;1912:36;;1967:63;2022:7;2011:8;2000:9;1996:24;1967:63;:::i;:::-;1957:73;;;2049:49;2094:2;2083:9;2079:18;2049:49;:::i;:::-;2039:59;;2138:3;2127:9;2123:19;2117:26;2107:36;;2162:50;2207:3;2196:9;2192:19;2162:50;:::i;:::-;2152:60;;1218:1000;;;;;;;;:::o;2584:380::-;2663:1;2659:12;;;;2706;;;2727:61;;2781:4;2773:6;2769:17;2759:27;;2727:61;2834:2;2826:6;2823:14;2803:18;2800:38;2797:161;;2880:10;2875:3;2871:20;2868:1;2861:31;2915:4;2912:1;2905:15;2943:4;2940:1;2933:15;2797:161;;2584:380;;;:::o;:::-;356:2819:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_1077":{"entryPoint":null,"id":1077,"parameterSlots":4,"returnSlots":0},"@_approve_943":{"entryPoint":2401,"id":943,"parameterSlots":2,"returnSlots":0},"@_baseURI_380":{"entryPoint":null,"id":380,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_3471":{"entryPoint":4194,"id":3471,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1051":{"entryPoint":4446,"id":1051,"parameterSlots":4,"returnSlots":1},"@_checkOwner_54":{"entryPoint":3501,"id":54,"parameterSlots":0,"returnSlots":0},"@_exists_612":{"entryPoint":null,"id":612,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_646":{"entryPoint":2511,"id":646,"parameterSlots":2,"returnSlots":1},"@_mint_767":{"entryPoint":5017,"id":767,"parameterSlots":2,"returnSlots":0},"@_msgSender_1721":{"entryPoint":null,"id":1721,"parameterSlots":0,"returnSlots":1},"@_ownerOf_594":{"entryPoint":null,"id":594,"parameterSlots":1,"returnSlots":1},"@_requireMinted_989":{"entryPoint":2306,"id":989,"parameterSlots":1,"returnSlots":0},"@_safeMint_661":{"entryPoint":4266,"id":661,"parameterSlots":2,"returnSlots":0},"@_safeMint_690":{"entryPoint":4819,"id":690,"parameterSlots":3,"returnSlots":0},"@_safeTransfer_581":{"entryPoint":3879,"id":581,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_975":{"entryPoint":3673,"id":975,"parameterSlots":3,"returnSlots":0},"@_setTokenURI_1321":{"entryPoint":4292,"id":1321,"parameterSlots":2,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":3591,"id":111,"parameterSlots":1,"returnSlots":0},"@_transfer_919":{"entryPoint":2638,"id":919,"parameterSlots":3,"returnSlots":0},"@addClaim_3442":{"entryPoint":3371,"id":3442,"parameterSlots":1,"returnSlots":0},"@amountOfClaimsPerPerson_3268":{"entryPoint":null,"id":3268,"parameterSlots":0,"returnSlots":0},"@approve_423":{"entryPoint":1091,"id":423,"parameterSlots":2,"returnSlots":0},"@badgeTokenURI_3266":{"entryPoint":1449,"id":3266,"parameterSlots":0,"returnSlots":0},"@balanceOf_284":{"entryPoint":1907,"id":284,"parameterSlots":1,"returnSlots":1},"@current_1749":{"entryPoint":null,"id":1749,"parameterSlots":1,"returnSlots":1},"@getApproved_441":{"entryPoint":1052,"id":441,"parameterSlots":1,"returnSlots":1},"@handle_3376":{"entryPoint":1591,"id":3376,"parameterSlots":4,"returnSlots":0},"@increment_1763":{"entryPoint":null,"id":1763,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_476":{"entryPoint":null,"id":476,"parameterSlots":2,"returnSlots":1},"@isContract_1397":{"entryPoint":null,"id":1397,"parameterSlots":1,"returnSlots":1},"@log10_3079":{"entryPoint":5426,"id":3079,"parameterSlots":1,"returnSlots":1},"@mailbox_3274":{"entryPoint":null,"id":3274,"parameterSlots":0,"returnSlots":0},"@name_322":{"entryPoint":906,"id":322,"parameterSlots":0,"returnSlots":1},"@ownerOf_312":{"entryPoint":1811,"id":312,"parameterSlots":1,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@promoter_3276":{"entryPoint":null,"id":3276,"parameterSlots":0,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":2041,"id":68,"parameterSlots":0,"returnSlots":0},"@safeMint_3423":{"entryPoint":3007,"id":3423,"parameterSlots":1,"returnSlots":0},"@safeTransferFrom_522":{"entryPoint":1422,"id":522,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_552":{"entryPoint":2091,"id":552,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_458":{"entryPoint":2076,"id":458,"parameterSlots":2,"returnSlots":0},"@setTokenURI_3454":{"entryPoint":2158,"id":3454,"parameterSlots":1,"returnSlots":0},"@supportsInterface_2364":{"entryPoint":null,"id":2364,"parameterSlots":1,"returnSlots":1},"@supportsInterface_260":{"entryPoint":824,"id":260,"parameterSlots":1,"returnSlots":1},"@symbol_332":{"entryPoint":2061,"id":332,"parameterSlots":0,"returnSlots":1},"@toString_1863":{"entryPoint":4870,"id":1863,"parameterSlots":1,"returnSlots":1},"@tokenURI_1299":{"entryPoint":3930,"id":1299,"parameterSlots":1,"returnSlots":1},"@tokenURI_3500":{"entryPoint":2147,"id":3500,"parameterSlots":1,"returnSlots":1},"@tokenURI_371":{"entryPoint":4703,"id":371,"parameterSlots":1,"returnSlots":1},"@transferFrom_503":{"entryPoint":1373,"id":503,"parameterSlots":3,"returnSlots":0},"@transferOwnership_91":{"entryPoint":2185,"id":91,"parameterSlots":1,"returnSlots":0},"abi_decode_available_length_bytes":{"entryPoint":6367,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6254,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6686,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6043,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6485,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6283,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5999,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5817,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":7164,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr":{"entryPoint":6613,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5953,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint32t_bytes32t_bytes_calldata_ptr":{"entryPoint":6108,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_string":{"entryPoint":5890,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7056,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7103,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_rational_1_by_1__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5934,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6790,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6974,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6867,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9be9078bc2dcbc6c3629b9da278d490ac9d795e9ec5876f150ca46dc0fcec847__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_da787f2021bdec5d8797a44acf6cf4c1edf6db8e95008f35f806a7547b513141__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":6936,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":5846,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6732,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x12":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6345,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":5978,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":5795,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:16081:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"58:87:23","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:23"},"nodeType":"YulFunctionCall","src":"125:12:23"},"nodeType":"YulExpressionStatement","src":"125:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"81:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"92:5:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"108:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"99:3:23"},"nodeType":"YulFunctionCall","src":"99:20:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"88:3:23"},"nodeType":"YulFunctionCall","src":"88:32:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"78:2:23"},"nodeType":"YulFunctionCall","src":"78:43:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"71:6:23"},"nodeType":"YulFunctionCall","src":"71:51:23"},"nodeType":"YulIf","src":"68:71:23"}]},"name":"validator_revert_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"47:5:23","type":""}],"src":"14:131:23"},{"body":{"nodeType":"YulBlock","src":"219:176:23","statements":[{"body":{"nodeType":"YulBlock","src":"265:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"274:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"277:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"267:6:23"},"nodeType":"YulFunctionCall","src":"267:12:23"},"nodeType":"YulExpressionStatement","src":"267:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"240:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"249:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"236:3:23"},"nodeType":"YulFunctionCall","src":"236:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"261:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"232:3:23"},"nodeType":"YulFunctionCall","src":"232:32:23"},"nodeType":"YulIf","src":"229:52:23"},{"nodeType":"YulVariableDeclaration","src":"290:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"316:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"303:12:23"},"nodeType":"YulFunctionCall","src":"303:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"294:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"359:5:23"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"335:23:23"},"nodeType":"YulFunctionCall","src":"335:30:23"},"nodeType":"YulExpressionStatement","src":"335:30:23"},{"nodeType":"YulAssignment","src":"374:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"384:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"374:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"185:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"196:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"208:6:23","type":""}],"src":"150:245:23"},{"body":{"nodeType":"YulBlock","src":"495:92:23","statements":[{"nodeType":"YulAssignment","src":"505:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"517:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"528:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"513:3:23"},"nodeType":"YulFunctionCall","src":"513:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"505:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"547:9:23"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"572:6:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"565:6:23"},"nodeType":"YulFunctionCall","src":"565:14:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"558:6:23"},"nodeType":"YulFunctionCall","src":"558:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"540:6:23"},"nodeType":"YulFunctionCall","src":"540:41:23"},"nodeType":"YulExpressionStatement","src":"540:41:23"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"464:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"475:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"486:4:23","type":""}],"src":"400:187:23"},{"body":{"nodeType":"YulBlock","src":"645:205:23","statements":[{"nodeType":"YulVariableDeclaration","src":"655:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"664:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"659:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"724:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"749:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"754:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:23"},"nodeType":"YulFunctionCall","src":"745:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"768:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"773:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"764:3:23"},"nodeType":"YulFunctionCall","src":"764:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"758:5:23"},"nodeType":"YulFunctionCall","src":"758:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"738:6:23"},"nodeType":"YulFunctionCall","src":"738:39:23"},"nodeType":"YulExpressionStatement","src":"738:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"685:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"688:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"682:2:23"},"nodeType":"YulFunctionCall","src":"682:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"696:19:23","statements":[{"nodeType":"YulAssignment","src":"698:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"707:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"710:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"703:3:23"},"nodeType":"YulFunctionCall","src":"703:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"698:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"678:3:23","statements":[]},"src":"674:113:23"},{"body":{"nodeType":"YulBlock","src":"813:31:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"826:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"831:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"822:3:23"},"nodeType":"YulFunctionCall","src":"822:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"840:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"815:6:23"},"nodeType":"YulFunctionCall","src":"815:27:23"},"nodeType":"YulExpressionStatement","src":"815:27:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"802:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"805:6:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"799:2:23"},"nodeType":"YulFunctionCall","src":"799:13:23"},"nodeType":"YulIf","src":"796:48:23"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"623:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"628:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"633:6:23","type":""}],"src":"592:258:23"},{"body":{"nodeType":"YulBlock","src":"905:208:23","statements":[{"nodeType":"YulVariableDeclaration","src":"915:26:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"935:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"929:5:23"},"nodeType":"YulFunctionCall","src":"929:12:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"919:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"957:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"962:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"950:6:23"},"nodeType":"YulFunctionCall","src":"950:19:23"},"nodeType":"YulExpressionStatement","src":"950:19:23"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1004:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1011:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:23"},"nodeType":"YulFunctionCall","src":"1000:16:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1022:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"1027:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1018:3:23"},"nodeType":"YulFunctionCall","src":"1018:14:23"},{"name":"length","nodeType":"YulIdentifier","src":"1034:6:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"978:21:23"},"nodeType":"YulFunctionCall","src":"978:63:23"},"nodeType":"YulExpressionStatement","src":"978:63:23"},{"nodeType":"YulAssignment","src":"1050:57:23","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1065:3:23"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1078:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1086:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1074:3:23"},"nodeType":"YulFunctionCall","src":"1074:15:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1095:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1091:3:23"},"nodeType":"YulFunctionCall","src":"1091:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1070:3:23"},"nodeType":"YulFunctionCall","src":"1070:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1061:3:23"},"nodeType":"YulFunctionCall","src":"1061:39:23"},{"kind":"number","nodeType":"YulLiteral","src":"1102:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1057:3:23"},"nodeType":"YulFunctionCall","src":"1057:50:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1050:3:23"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"882:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"889:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"897:3:23","type":""}],"src":"855:258:23"},{"body":{"nodeType":"YulBlock","src":"1239:99:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1256:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1267:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1249:6:23"},"nodeType":"YulFunctionCall","src":"1249:21:23"},"nodeType":"YulExpressionStatement","src":"1249:21:23"},{"nodeType":"YulAssignment","src":"1279:53:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1305:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1317:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1328:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1313:3:23"},"nodeType":"YulFunctionCall","src":"1313:18:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"1287:17:23"},"nodeType":"YulFunctionCall","src":"1287:45:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1279:4:23"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1208:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1219:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1230:4:23","type":""}],"src":"1118:220:23"},{"body":{"nodeType":"YulBlock","src":"1413:110:23","statements":[{"body":{"nodeType":"YulBlock","src":"1459:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1468:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1471:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1461:6:23"},"nodeType":"YulFunctionCall","src":"1461:12:23"},"nodeType":"YulExpressionStatement","src":"1461:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1434:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1443:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1430:3:23"},"nodeType":"YulFunctionCall","src":"1430:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1455:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1426:3:23"},"nodeType":"YulFunctionCall","src":"1426:32:23"},"nodeType":"YulIf","src":"1423:52:23"},{"nodeType":"YulAssignment","src":"1484:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1507:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1494:12:23"},"nodeType":"YulFunctionCall","src":"1494:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1484:6:23"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1379:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1390:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1402:6:23","type":""}],"src":"1343:180:23"},{"body":{"nodeType":"YulBlock","src":"1629:102:23","statements":[{"nodeType":"YulAssignment","src":"1639:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1651:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1662:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1647:3:23"},"nodeType":"YulFunctionCall","src":"1647:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1639:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1681:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1696:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1712:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1717:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1708:3:23"},"nodeType":"YulFunctionCall","src":"1708:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1721:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1704:3:23"},"nodeType":"YulFunctionCall","src":"1704:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1692:3:23"},"nodeType":"YulFunctionCall","src":"1692:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1674:6:23"},"nodeType":"YulFunctionCall","src":"1674:51:23"},"nodeType":"YulExpressionStatement","src":"1674:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1598:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1609:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1620:4:23","type":""}],"src":"1528:203:23"},{"body":{"nodeType":"YulBlock","src":"1781:86:23","statements":[{"body":{"nodeType":"YulBlock","src":"1845:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1854:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1857:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1847:6:23"},"nodeType":"YulFunctionCall","src":"1847:12:23"},"nodeType":"YulExpressionStatement","src":"1847:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1804:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1815:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1830:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"1835:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1826:3:23"},"nodeType":"YulFunctionCall","src":"1826:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"1839:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1822:3:23"},"nodeType":"YulFunctionCall","src":"1822:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1811:3:23"},"nodeType":"YulFunctionCall","src":"1811:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1801:2:23"},"nodeType":"YulFunctionCall","src":"1801:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1794:6:23"},"nodeType":"YulFunctionCall","src":"1794:50:23"},"nodeType":"YulIf","src":"1791:70:23"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1770:5:23","type":""}],"src":"1736:131:23"},{"body":{"nodeType":"YulBlock","src":"1959:228:23","statements":[{"body":{"nodeType":"YulBlock","src":"2005:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2014:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2017:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2007:6:23"},"nodeType":"YulFunctionCall","src":"2007:12:23"},"nodeType":"YulExpressionStatement","src":"2007:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1980:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1989:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1976:3:23"},"nodeType":"YulFunctionCall","src":"1976:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2001:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1972:3:23"},"nodeType":"YulFunctionCall","src":"1972:32:23"},"nodeType":"YulIf","src":"1969:52:23"},{"nodeType":"YulVariableDeclaration","src":"2030:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2056:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2043:12:23"},"nodeType":"YulFunctionCall","src":"2043:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2034:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2100:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2075:24:23"},"nodeType":"YulFunctionCall","src":"2075:31:23"},"nodeType":"YulExpressionStatement","src":"2075:31:23"},{"nodeType":"YulAssignment","src":"2115:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"2125:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2115:6:23"}]},{"nodeType":"YulAssignment","src":"2139:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2166:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2177:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2162:3:23"},"nodeType":"YulFunctionCall","src":"2162:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2149:12:23"},"nodeType":"YulFunctionCall","src":"2149:32:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2139:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1917:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1928:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1940:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1948:6:23","type":""}],"src":"1872:315:23"},{"body":{"nodeType":"YulBlock","src":"2296:352:23","statements":[{"body":{"nodeType":"YulBlock","src":"2342:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2351:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2354:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2344:6:23"},"nodeType":"YulFunctionCall","src":"2344:12:23"},"nodeType":"YulExpressionStatement","src":"2344:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2317:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2326:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2313:3:23"},"nodeType":"YulFunctionCall","src":"2313:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2338:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2309:3:23"},"nodeType":"YulFunctionCall","src":"2309:32:23"},"nodeType":"YulIf","src":"2306:52:23"},{"nodeType":"YulVariableDeclaration","src":"2367:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2393:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2380:12:23"},"nodeType":"YulFunctionCall","src":"2380:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2371:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2437:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2412:24:23"},"nodeType":"YulFunctionCall","src":"2412:31:23"},"nodeType":"YulExpressionStatement","src":"2412:31:23"},{"nodeType":"YulAssignment","src":"2452:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"2462:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2452:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"2476:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2508:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2519:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2504:3:23"},"nodeType":"YulFunctionCall","src":"2504:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2491:12:23"},"nodeType":"YulFunctionCall","src":"2491:32:23"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"2480:7:23","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"2557:7:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2532:24:23"},"nodeType":"YulFunctionCall","src":"2532:33:23"},"nodeType":"YulExpressionStatement","src":"2532:33:23"},{"nodeType":"YulAssignment","src":"2574:17:23","value":{"name":"value_1","nodeType":"YulIdentifier","src":"2584:7:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2574:6:23"}]},{"nodeType":"YulAssignment","src":"2600:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2627:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2638:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2623:3:23"},"nodeType":"YulFunctionCall","src":"2623:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2610:12:23"},"nodeType":"YulFunctionCall","src":"2610:32:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2600:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2246:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2257:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2269:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2277:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2285:6:23","type":""}],"src":"2192:456:23"},{"body":{"nodeType":"YulBlock","src":"2775:701:23","statements":[{"body":{"nodeType":"YulBlock","src":"2821:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2830:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2833:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2823:6:23"},"nodeType":"YulFunctionCall","src":"2823:12:23"},"nodeType":"YulExpressionStatement","src":"2823:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2796:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2805:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2792:3:23"},"nodeType":"YulFunctionCall","src":"2792:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2817:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2788:3:23"},"nodeType":"YulFunctionCall","src":"2788:32:23"},"nodeType":"YulIf","src":"2785:52:23"},{"nodeType":"YulVariableDeclaration","src":"2846:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2872:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2859:12:23"},"nodeType":"YulFunctionCall","src":"2859:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2850:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2936:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2945:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2948:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2938:6:23"},"nodeType":"YulFunctionCall","src":"2938:12:23"},"nodeType":"YulExpressionStatement","src":"2938:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2904:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2915:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"2922:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2911:3:23"},"nodeType":"YulFunctionCall","src":"2911:22:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2901:2:23"},"nodeType":"YulFunctionCall","src":"2901:33:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2894:6:23"},"nodeType":"YulFunctionCall","src":"2894:41:23"},"nodeType":"YulIf","src":"2891:61:23"},{"nodeType":"YulAssignment","src":"2961:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"2971:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2961:6:23"}]},{"nodeType":"YulAssignment","src":"2985:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3012:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3023:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3008:3:23"},"nodeType":"YulFunctionCall","src":"3008:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2995:12:23"},"nodeType":"YulFunctionCall","src":"2995:32:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2985:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"3036:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3067:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3078:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3063:3:23"},"nodeType":"YulFunctionCall","src":"3063:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3050:12:23"},"nodeType":"YulFunctionCall","src":"3050:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3040:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3091:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"3101:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3095:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3146:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3155:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3158:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3148:6:23"},"nodeType":"YulFunctionCall","src":"3148:12:23"},"nodeType":"YulExpressionStatement","src":"3148:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3134:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3142:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3131:2:23"},"nodeType":"YulFunctionCall","src":"3131:14:23"},"nodeType":"YulIf","src":"3128:34:23"},{"nodeType":"YulVariableDeclaration","src":"3171:32:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3185:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"3196:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3181:3:23"},"nodeType":"YulFunctionCall","src":"3181:22:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3175:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3251:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3260:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3263:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3253:6:23"},"nodeType":"YulFunctionCall","src":"3253:12:23"},"nodeType":"YulExpressionStatement","src":"3253:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3230:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"3234:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3226:3:23"},"nodeType":"YulFunctionCall","src":"3226:13:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3241:7:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3222:3:23"},"nodeType":"YulFunctionCall","src":"3222:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3215:6:23"},"nodeType":"YulFunctionCall","src":"3215:35:23"},"nodeType":"YulIf","src":"3212:55:23"},{"nodeType":"YulVariableDeclaration","src":"3276:30:23","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3303:2:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3290:12:23"},"nodeType":"YulFunctionCall","src":"3290:16:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3280:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3333:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3342:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3345:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3335:6:23"},"nodeType":"YulFunctionCall","src":"3335:12:23"},"nodeType":"YulExpressionStatement","src":"3335:12:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3321:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3329:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3318:2:23"},"nodeType":"YulFunctionCall","src":"3318:14:23"},"nodeType":"YulIf","src":"3315:34:23"},{"body":{"nodeType":"YulBlock","src":"3399:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3408:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3411:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3401:6:23"},"nodeType":"YulFunctionCall","src":"3401:12:23"},"nodeType":"YulExpressionStatement","src":"3401:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3372:2:23"},{"name":"length","nodeType":"YulIdentifier","src":"3376:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3368:3:23"},"nodeType":"YulFunctionCall","src":"3368:15:23"},{"kind":"number","nodeType":"YulLiteral","src":"3385:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3364:3:23"},"nodeType":"YulFunctionCall","src":"3364:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3390:7:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3361:2:23"},"nodeType":"YulFunctionCall","src":"3361:37:23"},"nodeType":"YulIf","src":"3358:57:23"},{"nodeType":"YulAssignment","src":"3424:21:23","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"3438:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"3442:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3434:3:23"},"nodeType":"YulFunctionCall","src":"3434:11:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3424:6:23"}]},{"nodeType":"YulAssignment","src":"3454:16:23","value":{"name":"length","nodeType":"YulIdentifier","src":"3464:6:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3454:6:23"}]}]},"name":"abi_decode_tuple_t_uint32t_bytes32t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2717:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2728:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2740:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2748:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2756:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2764:6:23","type":""}],"src":"2653:823:23"},{"body":{"nodeType":"YulBlock","src":"3551:177:23","statements":[{"body":{"nodeType":"YulBlock","src":"3597:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3606:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3609:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3599:6:23"},"nodeType":"YulFunctionCall","src":"3599:12:23"},"nodeType":"YulExpressionStatement","src":"3599:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3572:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"3581:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:23"},"nodeType":"YulFunctionCall","src":"3568:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"3593:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3564:3:23"},"nodeType":"YulFunctionCall","src":"3564:32:23"},"nodeType":"YulIf","src":"3561:52:23"},{"nodeType":"YulVariableDeclaration","src":"3622:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3648:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3635:12:23"},"nodeType":"YulFunctionCall","src":"3635:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3626:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3692:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"3667:24:23"},"nodeType":"YulFunctionCall","src":"3667:31:23"},"nodeType":"YulExpressionStatement","src":"3667:31:23"},{"nodeType":"YulAssignment","src":"3707:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"3717:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3707:6:23"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3517:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3528:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3540:6:23","type":""}],"src":"3481:247:23"},{"body":{"nodeType":"YulBlock","src":"3834:76:23","statements":[{"nodeType":"YulAssignment","src":"3844:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3856:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"3867:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:23"},"nodeType":"YulFunctionCall","src":"3852:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3844:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3886:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"3897:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3879:6:23"},"nodeType":"YulFunctionCall","src":"3879:25:23"},"nodeType":"YulExpressionStatement","src":"3879:25:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3803:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3814:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3825:4:23","type":""}],"src":"3733:177:23"},{"body":{"nodeType":"YulBlock","src":"3999:332:23","statements":[{"body":{"nodeType":"YulBlock","src":"4045:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4054:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4057:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4047:6:23"},"nodeType":"YulFunctionCall","src":"4047:12:23"},"nodeType":"YulExpressionStatement","src":"4047:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4020:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4016:3:23"},"nodeType":"YulFunctionCall","src":"4016:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4041:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4012:3:23"},"nodeType":"YulFunctionCall","src":"4012:32:23"},"nodeType":"YulIf","src":"4009:52:23"},{"nodeType":"YulVariableDeclaration","src":"4070:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4096:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4083:12:23"},"nodeType":"YulFunctionCall","src":"4083:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4074:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4140:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4115:24:23"},"nodeType":"YulFunctionCall","src":"4115:31:23"},"nodeType":"YulExpressionStatement","src":"4115:31:23"},{"nodeType":"YulAssignment","src":"4155:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"4165:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4155:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"4179:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4211:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4222:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4207:3:23"},"nodeType":"YulFunctionCall","src":"4207:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4194:12:23"},"nodeType":"YulFunctionCall","src":"4194:32:23"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"4183:7:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4283:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4292:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4295:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4285:6:23"},"nodeType":"YulFunctionCall","src":"4285:12:23"},"nodeType":"YulExpressionStatement","src":"4285:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4248:7:23"},{"arguments":[{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"4271:7:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4264:6:23"},"nodeType":"YulFunctionCall","src":"4264:15:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4257:6:23"},"nodeType":"YulFunctionCall","src":"4257:23:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4245:2:23"},"nodeType":"YulFunctionCall","src":"4245:36:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4238:6:23"},"nodeType":"YulFunctionCall","src":"4238:44:23"},"nodeType":"YulIf","src":"4235:64:23"},{"nodeType":"YulAssignment","src":"4308:17:23","value":{"name":"value_1","nodeType":"YulIdentifier","src":"4318:7:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4308:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3957:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3968:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3980:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3988:6:23","type":""}],"src":"3915:416:23"},{"body":{"nodeType":"YulBlock","src":"4368:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4385:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4392:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"4397:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4388:3:23"},"nodeType":"YulFunctionCall","src":"4388:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4378:6:23"},"nodeType":"YulFunctionCall","src":"4378:31:23"},"nodeType":"YulExpressionStatement","src":"4378:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4425:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4428:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4418:6:23"},"nodeType":"YulFunctionCall","src":"4418:15:23"},"nodeType":"YulExpressionStatement","src":"4418:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4449:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4452:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4442:6:23"},"nodeType":"YulFunctionCall","src":"4442:15:23"},"nodeType":"YulExpressionStatement","src":"4442:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"4336:127:23"},{"body":{"nodeType":"YulBlock","src":"4542:557:23","statements":[{"nodeType":"YulVariableDeclaration","src":"4552:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4562:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4556:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4607:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4609:16:23"},"nodeType":"YulFunctionCall","src":"4609:18:23"},"nodeType":"YulExpressionStatement","src":"4609:18:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4595:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4603:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4592:2:23"},"nodeType":"YulFunctionCall","src":"4592:14:23"},"nodeType":"YulIf","src":"4589:40:23"},{"nodeType":"YulVariableDeclaration","src":"4638:17:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4652:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4648:3:23"},"nodeType":"YulFunctionCall","src":"4648:7:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"4642:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4664:23:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4684:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4678:5:23"},"nodeType":"YulFunctionCall","src":"4678:9:23"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"4668:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4696:73:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4718:6:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4742:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"4750:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4738:3:23"},"nodeType":"YulFunctionCall","src":"4738:15:23"},{"name":"_2","nodeType":"YulIdentifier","src":"4755:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4734:3:23"},"nodeType":"YulFunctionCall","src":"4734:24:23"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:23","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4730:3:23"},"nodeType":"YulFunctionCall","src":"4730:33:23"},{"name":"_2","nodeType":"YulIdentifier","src":"4765:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4726:3:23"},"nodeType":"YulFunctionCall","src":"4726:42:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:23"},"nodeType":"YulFunctionCall","src":"4714:55:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"4700:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4828:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4830:16:23"},"nodeType":"YulFunctionCall","src":"4830:18:23"},"nodeType":"YulExpressionStatement","src":"4830:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4787:10:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4799:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4784:2:23"},"nodeType":"YulFunctionCall","src":"4784:18:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4807:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"4819:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4804:2:23"},"nodeType":"YulFunctionCall","src":"4804:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4781:2:23"},"nodeType":"YulFunctionCall","src":"4781:46:23"},"nodeType":"YulIf","src":"4778:72:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4866:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"4870:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4859:6:23"},"nodeType":"YulFunctionCall","src":"4859:22:23"},"nodeType":"YulExpressionStatement","src":"4859:22:23"},{"nodeType":"YulAssignment","src":"4890:15:23","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"4899:6:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"4890:5:23"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4921:6:23"},{"name":"length","nodeType":"YulIdentifier","src":"4929:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4914:6:23"},"nodeType":"YulFunctionCall","src":"4914:22:23"},"nodeType":"YulExpressionStatement","src":"4914:22:23"},{"body":{"nodeType":"YulBlock","src":"4974:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4983:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4986:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4976:6:23"},"nodeType":"YulFunctionCall","src":"4976:12:23"},"nodeType":"YulExpressionStatement","src":"4976:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4955:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"4960:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4951:3:23"},"nodeType":"YulFunctionCall","src":"4951:16:23"},{"name":"end","nodeType":"YulIdentifier","src":"4969:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4948:2:23"},"nodeType":"YulFunctionCall","src":"4948:25:23"},"nodeType":"YulIf","src":"4945:45:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5016:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"5024:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5012:3:23"},"nodeType":"YulFunctionCall","src":"5012:17:23"},{"name":"src","nodeType":"YulIdentifier","src":"5031:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"5036:6:23"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4999:12:23"},"nodeType":"YulFunctionCall","src":"4999:44:23"},"nodeType":"YulExpressionStatement","src":"4999:44:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"5067:6:23"},{"name":"length","nodeType":"YulIdentifier","src":"5075:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5063:3:23"},"nodeType":"YulFunctionCall","src":"5063:19:23"},{"kind":"number","nodeType":"YulLiteral","src":"5084:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5059:3:23"},"nodeType":"YulFunctionCall","src":"5059:30:23"},{"kind":"number","nodeType":"YulLiteral","src":"5091:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5052:6:23"},"nodeType":"YulFunctionCall","src":"5052:41:23"},"nodeType":"YulExpressionStatement","src":"5052:41:23"}]},"name":"abi_decode_available_length_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4511:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"4516:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"4524:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"4532:5:23","type":""}],"src":"4468:631:23"},{"body":{"nodeType":"YulBlock","src":"5234:664:23","statements":[{"body":{"nodeType":"YulBlock","src":"5281:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5290:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5293:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5283:6:23"},"nodeType":"YulFunctionCall","src":"5283:12:23"},"nodeType":"YulExpressionStatement","src":"5283:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5255:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5264:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5251:3:23"},"nodeType":"YulFunctionCall","src":"5251:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5276:3:23","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5247:3:23"},"nodeType":"YulFunctionCall","src":"5247:33:23"},"nodeType":"YulIf","src":"5244:53:23"},{"nodeType":"YulVariableDeclaration","src":"5306:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5332:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5319:12:23"},"nodeType":"YulFunctionCall","src":"5319:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5310:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5376:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5351:24:23"},"nodeType":"YulFunctionCall","src":"5351:31:23"},"nodeType":"YulExpressionStatement","src":"5351:31:23"},{"nodeType":"YulAssignment","src":"5391:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"5401:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5391:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"5415:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5447:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5458:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5443:3:23"},"nodeType":"YulFunctionCall","src":"5443:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5430:12:23"},"nodeType":"YulFunctionCall","src":"5430:32:23"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5419:7:23","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5496:7:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"5471:24:23"},"nodeType":"YulFunctionCall","src":"5471:33:23"},"nodeType":"YulExpressionStatement","src":"5471:33:23"},{"nodeType":"YulAssignment","src":"5513:17:23","value":{"name":"value_1","nodeType":"YulIdentifier","src":"5523:7:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5513:6:23"}]},{"nodeType":"YulAssignment","src":"5539:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5566:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5577:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5562:3:23"},"nodeType":"YulFunctionCall","src":"5562:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5549:12:23"},"nodeType":"YulFunctionCall","src":"5549:32:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5539:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"5590:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5621:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5632:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5617:3:23"},"nodeType":"YulFunctionCall","src":"5617:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5604:12:23"},"nodeType":"YulFunctionCall","src":"5604:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5594:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"5679:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5688:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5691:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5681:6:23"},"nodeType":"YulFunctionCall","src":"5681:12:23"},"nodeType":"YulExpressionStatement","src":"5681:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5651:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"5659:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5648:2:23"},"nodeType":"YulFunctionCall","src":"5648:30:23"},"nodeType":"YulIf","src":"5645:50:23"},{"nodeType":"YulVariableDeclaration","src":"5704:32:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5718:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"5729:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5714:3:23"},"nodeType":"YulFunctionCall","src":"5714:22:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5708:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"5784:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5793:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5796:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5786:6:23"},"nodeType":"YulFunctionCall","src":"5786:12:23"},"nodeType":"YulExpressionStatement","src":"5786:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5763:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"5767:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5759:3:23"},"nodeType":"YulFunctionCall","src":"5759:13:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5774:7:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5755:3:23"},"nodeType":"YulFunctionCall","src":"5755:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5748:6:23"},"nodeType":"YulFunctionCall","src":"5748:35:23"},"nodeType":"YulIf","src":"5745:55:23"},{"nodeType":"YulAssignment","src":"5809:83:23","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5857:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"5861:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5853:3:23"},"nodeType":"YulFunctionCall","src":"5853:11:23"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"5879:2:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5866:12:23"},"nodeType":"YulFunctionCall","src":"5866:16:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5884:7:23"}],"functionName":{"name":"abi_decode_available_length_bytes","nodeType":"YulIdentifier","src":"5819:33:23"},"nodeType":"YulFunctionCall","src":"5819:73:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5809:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5176:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5187:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5199:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5207:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5215:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5223:6:23","type":""}],"src":"5104:794:23"},{"body":{"nodeType":"YulBlock","src":"5983:370:23","statements":[{"body":{"nodeType":"YulBlock","src":"6029:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6038:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6041:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6031:6:23"},"nodeType":"YulFunctionCall","src":"6031:12:23"},"nodeType":"YulExpressionStatement","src":"6031:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6004:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6013:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6000:3:23"},"nodeType":"YulFunctionCall","src":"6000:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6025:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5996:3:23"},"nodeType":"YulFunctionCall","src":"5996:32:23"},"nodeType":"YulIf","src":"5993:52:23"},{"nodeType":"YulVariableDeclaration","src":"6054:37:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6081:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6068:12:23"},"nodeType":"YulFunctionCall","src":"6068:23:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6058:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6134:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6143:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6146:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6136:6:23"},"nodeType":"YulFunctionCall","src":"6136:12:23"},"nodeType":"YulExpressionStatement","src":"6136:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6106:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6114:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6103:2:23"},"nodeType":"YulFunctionCall","src":"6103:30:23"},"nodeType":"YulIf","src":"6100:50:23"},{"nodeType":"YulVariableDeclaration","src":"6159:32:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6173:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"6184:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6169:3:23"},"nodeType":"YulFunctionCall","src":"6169:22:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"6163:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6239:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6248:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6251:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6241:6:23"},"nodeType":"YulFunctionCall","src":"6241:12:23"},"nodeType":"YulExpressionStatement","src":"6241:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6218:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"6222:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6214:3:23"},"nodeType":"YulFunctionCall","src":"6214:13:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6229:7:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6210:3:23"},"nodeType":"YulFunctionCall","src":"6210:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6203:6:23"},"nodeType":"YulFunctionCall","src":"6203:35:23"},"nodeType":"YulIf","src":"6200:55:23"},{"nodeType":"YulAssignment","src":"6264:83:23","value":{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6312:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"6316:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6308:3:23"},"nodeType":"YulFunctionCall","src":"6308:11:23"},{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"6334:2:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6321:12:23"},"nodeType":"YulFunctionCall","src":"6321:16:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6339:7:23"}],"functionName":{"name":"abi_decode_available_length_bytes","nodeType":"YulIdentifier","src":"6274:33:23"},"nodeType":"YulFunctionCall","src":"6274:73:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6264:6:23"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5949:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5960:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5972:6:23","type":""}],"src":"5903:450:23"},{"body":{"nodeType":"YulBlock","src":"6445:301:23","statements":[{"body":{"nodeType":"YulBlock","src":"6491:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6500:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6503:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6493:6:23"},"nodeType":"YulFunctionCall","src":"6493:12:23"},"nodeType":"YulExpressionStatement","src":"6493:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6466:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6475:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6462:3:23"},"nodeType":"YulFunctionCall","src":"6462:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6487:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6458:3:23"},"nodeType":"YulFunctionCall","src":"6458:32:23"},"nodeType":"YulIf","src":"6455:52:23"},{"nodeType":"YulVariableDeclaration","src":"6516:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6542:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6529:12:23"},"nodeType":"YulFunctionCall","src":"6529:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"6520:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6586:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6561:24:23"},"nodeType":"YulFunctionCall","src":"6561:31:23"},"nodeType":"YulExpressionStatement","src":"6561:31:23"},{"nodeType":"YulAssignment","src":"6601:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"6611:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6601:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"6625:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6657:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6668:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6653:3:23"},"nodeType":"YulFunctionCall","src":"6653:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6640:12:23"},"nodeType":"YulFunctionCall","src":"6640:32:23"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"6629:7:23","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6706:7:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"6681:24:23"},"nodeType":"YulFunctionCall","src":"6681:33:23"},"nodeType":"YulExpressionStatement","src":"6681:33:23"},{"nodeType":"YulAssignment","src":"6723:17:23","value":{"name":"value_1","nodeType":"YulIdentifier","src":"6733:7:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6723:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6403:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6414:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6426:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6434:6:23","type":""}],"src":"6358:388:23"},{"body":{"nodeType":"YulBlock","src":"6806:325:23","statements":[{"nodeType":"YulAssignment","src":"6816:22:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6830:1:23","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"6833:4:23"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6826:3:23"},"nodeType":"YulFunctionCall","src":"6826:12:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6816:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"6847:38:23","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6877:4:23"},{"kind":"number","nodeType":"YulLiteral","src":"6883:1:23","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6873:3:23"},"nodeType":"YulFunctionCall","src":"6873:12:23"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"6851:18:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6924:31:23","statements":[{"nodeType":"YulAssignment","src":"6926:27:23","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6940:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6948:4:23","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6936:3:23"},"nodeType":"YulFunctionCall","src":"6936:17:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"6926:6:23"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6904:18:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6897:6:23"},"nodeType":"YulFunctionCall","src":"6897:26:23"},"nodeType":"YulIf","src":"6894:61:23"},{"body":{"nodeType":"YulBlock","src":"7014:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7035:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7042:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7047:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7038:3:23"},"nodeType":"YulFunctionCall","src":"7038:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7028:6:23"},"nodeType":"YulFunctionCall","src":"7028:31:23"},"nodeType":"YulExpressionStatement","src":"7028:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7079:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7082:4:23","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7072:6:23"},"nodeType":"YulFunctionCall","src":"7072:15:23"},"nodeType":"YulExpressionStatement","src":"7072:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7107:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7110:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7100:6:23"},"nodeType":"YulFunctionCall","src":"7100:15:23"},"nodeType":"YulExpressionStatement","src":"7100:15:23"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"6970:18:23"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6993:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"7001:2:23","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6990:2:23"},"nodeType":"YulFunctionCall","src":"6990:14:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6967:2:23"},"nodeType":"YulFunctionCall","src":"6967:38:23"},"nodeType":"YulIf","src":"6964:161:23"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6786:4:23","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"6795:6:23","type":""}],"src":"6751:380:23"},{"body":{"nodeType":"YulBlock","src":"7310:223:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7327:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7338:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7320:6:23"},"nodeType":"YulFunctionCall","src":"7320:21:23"},"nodeType":"YulExpressionStatement","src":"7320:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7361:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7372:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7357:3:23"},"nodeType":"YulFunctionCall","src":"7357:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"7377:2:23","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7350:6:23"},"nodeType":"YulFunctionCall","src":"7350:30:23"},"nodeType":"YulExpressionStatement","src":"7350:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7400:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7411:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7396:3:23"},"nodeType":"YulFunctionCall","src":"7396:18:23"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"7416:34:23","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7389:6:23"},"nodeType":"YulFunctionCall","src":"7389:62:23"},"nodeType":"YulExpressionStatement","src":"7389:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7471:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7482:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7467:3:23"},"nodeType":"YulFunctionCall","src":"7467:18:23"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"7487:3:23","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7460:6:23"},"nodeType":"YulFunctionCall","src":"7460:31:23"},"nodeType":"YulExpressionStatement","src":"7460:31:23"},{"nodeType":"YulAssignment","src":"7500:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7512:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7523:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7508:3:23"},"nodeType":"YulFunctionCall","src":"7508:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7500:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7287:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7301:4:23","type":""}],"src":"7136:397:23"},{"body":{"nodeType":"YulBlock","src":"7712:251:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7729:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7740:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7722:6:23"},"nodeType":"YulFunctionCall","src":"7722:21:23"},"nodeType":"YulExpressionStatement","src":"7722:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7763:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7774:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7759:3:23"},"nodeType":"YulFunctionCall","src":"7759:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"7779:2:23","type":"","value":"61"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7752:6:23"},"nodeType":"YulFunctionCall","src":"7752:30:23"},"nodeType":"YulExpressionStatement","src":"7752:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7802:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7813:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7798:3:23"},"nodeType":"YulFunctionCall","src":"7798:18:23"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"7818:34:23","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7791:6:23"},"nodeType":"YulFunctionCall","src":"7791:62:23"},"nodeType":"YulExpressionStatement","src":"7791:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7873:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7884:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7869:3:23"},"nodeType":"YulFunctionCall","src":"7869:18:23"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"7889:31:23","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7862:6:23"},"nodeType":"YulFunctionCall","src":"7862:59:23"},"nodeType":"YulExpressionStatement","src":"7862:59:23"},{"nodeType":"YulAssignment","src":"7930:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7942:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7953:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7938:3:23"},"nodeType":"YulFunctionCall","src":"7938:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7930:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7689:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7703:4:23","type":""}],"src":"7538:425:23"},{"body":{"nodeType":"YulBlock","src":"8142:235:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8159:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8170:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8152:6:23"},"nodeType":"YulFunctionCall","src":"8152:21:23"},"nodeType":"YulExpressionStatement","src":"8152:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8193:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8204:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8189:3:23"},"nodeType":"YulFunctionCall","src":"8189:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8209:2:23","type":"","value":"45"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8182:6:23"},"nodeType":"YulFunctionCall","src":"8182:30:23"},"nodeType":"YulExpressionStatement","src":"8182:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8232:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8243:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8228:3:23"},"nodeType":"YulFunctionCall","src":"8228:18:23"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"8248:34:23","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8221:6:23"},"nodeType":"YulFunctionCall","src":"8221:62:23"},"nodeType":"YulExpressionStatement","src":"8221:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8303:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8314:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8299:3:23"},"nodeType":"YulFunctionCall","src":"8299:18:23"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"8319:15:23","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8292:6:23"},"nodeType":"YulFunctionCall","src":"8292:43:23"},"nodeType":"YulExpressionStatement","src":"8292:43:23"},{"nodeType":"YulAssignment","src":"8344:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8356:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8367:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8352:3:23"},"nodeType":"YulFunctionCall","src":"8352:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8344:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8119:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8133:4:23","type":""}],"src":"7968:409:23"},{"body":{"nodeType":"YulBlock","src":"8460:177:23","statements":[{"body":{"nodeType":"YulBlock","src":"8506:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8515:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8518:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8508:6:23"},"nodeType":"YulFunctionCall","src":"8508:12:23"},"nodeType":"YulExpressionStatement","src":"8508:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8481:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"8490:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8477:3:23"},"nodeType":"YulFunctionCall","src":"8477:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"8502:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8473:3:23"},"nodeType":"YulFunctionCall","src":"8473:32:23"},"nodeType":"YulIf","src":"8470:52:23"},{"nodeType":"YulVariableDeclaration","src":"8531:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8557:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8544:12:23"},"nodeType":"YulFunctionCall","src":"8544:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8535:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8601:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"8576:24:23"},"nodeType":"YulFunctionCall","src":"8576:31:23"},"nodeType":"YulExpressionStatement","src":"8576:31:23"},{"nodeType":"YulAssignment","src":"8616:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"8626:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8616:6:23"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8426:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8437:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8449:6:23","type":""}],"src":"8382:255:23"},{"body":{"nodeType":"YulBlock","src":"8816:164:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8833:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8844:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8826:6:23"},"nodeType":"YulFunctionCall","src":"8826:21:23"},"nodeType":"YulExpressionStatement","src":"8826:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8867:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8878:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8863:3:23"},"nodeType":"YulFunctionCall","src":"8863:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8883:2:23","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8856:6:23"},"nodeType":"YulFunctionCall","src":"8856:30:23"},"nodeType":"YulExpressionStatement","src":"8856:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8906:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8917:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8902:3:23"},"nodeType":"YulFunctionCall","src":"8902:18:23"},{"hexValue":"4e6f206d6f726520636c61696d73","kind":"string","nodeType":"YulLiteral","src":"8922:16:23","type":"","value":"No more claims"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8895:6:23"},"nodeType":"YulFunctionCall","src":"8895:44:23"},"nodeType":"YulExpressionStatement","src":"8895:44:23"},{"nodeType":"YulAssignment","src":"8948:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8960:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8971:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8956:3:23"},"nodeType":"YulFunctionCall","src":"8956:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8948:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8793:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8807:4:23","type":""}],"src":"8642:338:23"},{"body":{"nodeType":"YulBlock","src":"9159:174:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9176:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9187:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9169:6:23"},"nodeType":"YulFunctionCall","src":"9169:21:23"},"nodeType":"YulExpressionStatement","src":"9169:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9210:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9221:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9206:3:23"},"nodeType":"YulFunctionCall","src":"9206:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9226:2:23","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9199:6:23"},"nodeType":"YulFunctionCall","src":"9199:30:23"},"nodeType":"YulExpressionStatement","src":"9199:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9249:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9260:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9245:3:23"},"nodeType":"YulFunctionCall","src":"9245:18:23"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"9265:26:23","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9238:6:23"},"nodeType":"YulFunctionCall","src":"9238:54:23"},"nodeType":"YulExpressionStatement","src":"9238:54:23"},{"nodeType":"YulAssignment","src":"9301:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9313:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9324:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9309:3:23"},"nodeType":"YulFunctionCall","src":"9309:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9301:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9136:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9150:4:23","type":""}],"src":"8985:348:23"},{"body":{"nodeType":"YulBlock","src":"9512:231:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9529:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9540:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9522:6:23"},"nodeType":"YulFunctionCall","src":"9522:21:23"},"nodeType":"YulExpressionStatement","src":"9522:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9563:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9574:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9559:3:23"},"nodeType":"YulFunctionCall","src":"9559:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9579:2:23","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9552:6:23"},"nodeType":"YulFunctionCall","src":"9552:30:23"},"nodeType":"YulExpressionStatement","src":"9552:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9602:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9613:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9598:3:23"},"nodeType":"YulFunctionCall","src":"9598:18:23"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"9618:34:23","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9591:6:23"},"nodeType":"YulFunctionCall","src":"9591:62:23"},"nodeType":"YulExpressionStatement","src":"9591:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9673:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9684:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9669:3:23"},"nodeType":"YulFunctionCall","src":"9669:18:23"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"9689:11:23","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9662:6:23"},"nodeType":"YulFunctionCall","src":"9662:39:23"},"nodeType":"YulExpressionStatement","src":"9662:39:23"},{"nodeType":"YulAssignment","src":"9710:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9722:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9733:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9718:3:23"},"nodeType":"YulFunctionCall","src":"9718:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9710:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9489:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9503:4:23","type":""}],"src":"9338:405:23"},{"body":{"nodeType":"YulBlock","src":"9922:228:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9939:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9950:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9932:6:23"},"nodeType":"YulFunctionCall","src":"9932:21:23"},"nodeType":"YulExpressionStatement","src":"9932:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9973:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9984:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9969:3:23"},"nodeType":"YulFunctionCall","src":"9969:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9989:2:23","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9962:6:23"},"nodeType":"YulFunctionCall","src":"9962:30:23"},"nodeType":"YulExpressionStatement","src":"9962:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10012:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10023:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10008:3:23"},"nodeType":"YulFunctionCall","src":"10008:18:23"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"10028:34:23","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10001:6:23"},"nodeType":"YulFunctionCall","src":"10001:62:23"},"nodeType":"YulExpressionStatement","src":"10001:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10083:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10094:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10079:3:23"},"nodeType":"YulFunctionCall","src":"10079:18:23"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"10099:8:23","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10072:6:23"},"nodeType":"YulFunctionCall","src":"10072:36:23"},"nodeType":"YulExpressionStatement","src":"10072:36:23"},{"nodeType":"YulAssignment","src":"10117:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10129:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10140:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10125:3:23"},"nodeType":"YulFunctionCall","src":"10125:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10117:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9899:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9913:4:23","type":""}],"src":"9748:402:23"},{"body":{"nodeType":"YulBlock","src":"10329:227:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10346:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10357:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10339:6:23"},"nodeType":"YulFunctionCall","src":"10339:21:23"},"nodeType":"YulExpressionStatement","src":"10339:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10380:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10391:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10376:3:23"},"nodeType":"YulFunctionCall","src":"10376:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"10396:2:23","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10369:6:23"},"nodeType":"YulFunctionCall","src":"10369:30:23"},"nodeType":"YulExpressionStatement","src":"10369:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10419:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10430:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10415:3:23"},"nodeType":"YulFunctionCall","src":"10415:18:23"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"10435:34:23","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10408:6:23"},"nodeType":"YulFunctionCall","src":"10408:62:23"},"nodeType":"YulExpressionStatement","src":"10408:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10490:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10501:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10486:3:23"},"nodeType":"YulFunctionCall","src":"10486:18:23"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"10506:7:23","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10479:6:23"},"nodeType":"YulFunctionCall","src":"10479:35:23"},"nodeType":"YulExpressionStatement","src":"10479:35:23"},{"nodeType":"YulAssignment","src":"10523:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10535:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10546:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10531:3:23"},"nodeType":"YulFunctionCall","src":"10531:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10523:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10306:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10320:4:23","type":""}],"src":"10155:401:23"},{"body":{"nodeType":"YulBlock","src":"10735:226:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10752:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10763:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10745:6:23"},"nodeType":"YulFunctionCall","src":"10745:21:23"},"nodeType":"YulExpressionStatement","src":"10745:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10786:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10797:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10782:3:23"},"nodeType":"YulFunctionCall","src":"10782:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"10802:2:23","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10775:6:23"},"nodeType":"YulFunctionCall","src":"10775:30:23"},"nodeType":"YulExpressionStatement","src":"10775:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10825:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10836:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10821:3:23"},"nodeType":"YulFunctionCall","src":"10821:18:23"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"10841:34:23","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10814:6:23"},"nodeType":"YulFunctionCall","src":"10814:62:23"},"nodeType":"YulExpressionStatement","src":"10814:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10896:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10907:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10892:3:23"},"nodeType":"YulFunctionCall","src":"10892:18:23"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"10912:6:23","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10885:6:23"},"nodeType":"YulFunctionCall","src":"10885:34:23"},"nodeType":"YulExpressionStatement","src":"10885:34:23"},{"nodeType":"YulAssignment","src":"10928:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10940:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10951:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10936:3:23"},"nodeType":"YulFunctionCall","src":"10936:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10928:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10712:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10726:4:23","type":""}],"src":"10561:400:23"},{"body":{"nodeType":"YulBlock","src":"11140:166:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11157:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11168:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11150:6:23"},"nodeType":"YulFunctionCall","src":"11150:21:23"},"nodeType":"YulExpressionStatement","src":"11150:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11191:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11202:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11187:3:23"},"nodeType":"YulFunctionCall","src":"11187:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"11207:2:23","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11180:6:23"},"nodeType":"YulFunctionCall","src":"11180:30:23"},"nodeType":"YulExpressionStatement","src":"11180:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11230:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11241:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11226:3:23"},"nodeType":"YulFunctionCall","src":"11226:18:23"},{"hexValue":"416c7265616479206f776e73204e4654","kind":"string","nodeType":"YulLiteral","src":"11246:18:23","type":"","value":"Already owns NFT"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11219:6:23"},"nodeType":"YulFunctionCall","src":"11219:46:23"},"nodeType":"YulExpressionStatement","src":"11219:46:23"},{"nodeType":"YulAssignment","src":"11274:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11286:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11297:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11282:3:23"},"nodeType":"YulFunctionCall","src":"11282:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11274:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_9be9078bc2dcbc6c3629b9da278d490ac9d795e9ec5876f150ca46dc0fcec847__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11117:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11131:4:23","type":""}],"src":"10966:340:23"},{"body":{"nodeType":"YulBlock","src":"11448:145:23","statements":[{"nodeType":"YulAssignment","src":"11458:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11470:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11481:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11466:3:23"},"nodeType":"YulFunctionCall","src":"11466:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11458:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11500:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11515:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11531:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11536:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11527:3:23"},"nodeType":"YulFunctionCall","src":"11527:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"11540:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11523:3:23"},"nodeType":"YulFunctionCall","src":"11523:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11511:3:23"},"nodeType":"YulFunctionCall","src":"11511:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11493:6:23"},"nodeType":"YulFunctionCall","src":"11493:51:23"},"nodeType":"YulExpressionStatement","src":"11493:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11564:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11575:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11560:3:23"},"nodeType":"YulFunctionCall","src":"11560:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"11580:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11553:6:23"},"nodeType":"YulFunctionCall","src":"11553:34:23"},"nodeType":"YulExpressionStatement","src":"11553:34:23"}]},"name":"abi_encode_tuple_t_address_t_rational_1_by_1__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11409:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11420:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11428:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11439:4:23","type":""}],"src":"11311:282:23"},{"body":{"nodeType":"YulBlock","src":"11646:177:23","statements":[{"body":{"nodeType":"YulBlock","src":"11681:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11702:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11709:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11714:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11705:3:23"},"nodeType":"YulFunctionCall","src":"11705:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11695:6:23"},"nodeType":"YulFunctionCall","src":"11695:31:23"},"nodeType":"YulExpressionStatement","src":"11695:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11746:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11749:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11739:6:23"},"nodeType":"YulFunctionCall","src":"11739:15:23"},"nodeType":"YulExpressionStatement","src":"11739:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11774:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11777:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11767:6:23"},"nodeType":"YulFunctionCall","src":"11767:15:23"},"nodeType":"YulExpressionStatement","src":"11767:15:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11662:1:23"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11669:1:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11665:3:23"},"nodeType":"YulFunctionCall","src":"11665:6:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11659:2:23"},"nodeType":"YulFunctionCall","src":"11659:13:23"},"nodeType":"YulIf","src":"11656:136:23"},{"nodeType":"YulAssignment","src":"11801:16:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11812:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"11815:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11808:3:23"},"nodeType":"YulFunctionCall","src":"11808:9:23"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11801:3:23"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11629:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"11632:1:23","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11638:3:23","type":""}],"src":"11598:225:23"},{"body":{"nodeType":"YulBlock","src":"11957:145:23","statements":[{"nodeType":"YulAssignment","src":"11967:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11979:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11990:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11975:3:23"},"nodeType":"YulFunctionCall","src":"11975:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11967:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12009:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12024:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12040:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12045:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12036:3:23"},"nodeType":"YulFunctionCall","src":"12036:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"12049:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12032:3:23"},"nodeType":"YulFunctionCall","src":"12032:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12020:3:23"},"nodeType":"YulFunctionCall","src":"12020:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12002:6:23"},"nodeType":"YulFunctionCall","src":"12002:51:23"},"nodeType":"YulExpressionStatement","src":"12002:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12073:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12084:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12069:3:23"},"nodeType":"YulFunctionCall","src":"12069:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"12089:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12062:6:23"},"nodeType":"YulFunctionCall","src":"12062:34:23"},"nodeType":"YulExpressionStatement","src":"12062:34:23"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11918:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11929:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11937:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11948:4:23","type":""}],"src":"11828:274:23"},{"body":{"nodeType":"YulBlock","src":"12281:182:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12298:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12309:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12291:6:23"},"nodeType":"YulFunctionCall","src":"12291:21:23"},"nodeType":"YulExpressionStatement","src":"12291:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12332:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12343:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12328:3:23"},"nodeType":"YulFunctionCall","src":"12328:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"12348:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12321:6:23"},"nodeType":"YulFunctionCall","src":"12321:30:23"},"nodeType":"YulExpressionStatement","src":"12321:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12371:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12382:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12367:3:23"},"nodeType":"YulFunctionCall","src":"12367:18:23"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"12387:34:23","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12360:6:23"},"nodeType":"YulFunctionCall","src":"12360:62:23"},"nodeType":"YulExpressionStatement","src":"12360:62:23"},{"nodeType":"YulAssignment","src":"12431:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12443:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12454:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12439:3:23"},"nodeType":"YulFunctionCall","src":"12439:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12431:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12258:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12272:4:23","type":""}],"src":"12107:356:23"},{"body":{"nodeType":"YulBlock","src":"12642:175:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12659:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12670:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12652:6:23"},"nodeType":"YulFunctionCall","src":"12652:21:23"},"nodeType":"YulExpressionStatement","src":"12652:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12693:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12704:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12689:3:23"},"nodeType":"YulFunctionCall","src":"12689:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"12709:2:23","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12682:6:23"},"nodeType":"YulFunctionCall","src":"12682:30:23"},"nodeType":"YulExpressionStatement","src":"12682:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12732:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12743:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12728:3:23"},"nodeType":"YulFunctionCall","src":"12728:18:23"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"12748:27:23","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12721:6:23"},"nodeType":"YulFunctionCall","src":"12721:55:23"},"nodeType":"YulExpressionStatement","src":"12721:55:23"},{"nodeType":"YulAssignment","src":"12785:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12797:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12808:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12793:3:23"},"nodeType":"YulFunctionCall","src":"12793:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12785:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12619:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12633:4:23","type":""}],"src":"12468:349:23"},{"body":{"nodeType":"YulBlock","src":"12996:240:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13013:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13024:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13006:6:23"},"nodeType":"YulFunctionCall","src":"13006:21:23"},"nodeType":"YulExpressionStatement","src":"13006:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13047:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13058:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13043:3:23"},"nodeType":"YulFunctionCall","src":"13043:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"13063:2:23","type":"","value":"50"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13036:6:23"},"nodeType":"YulFunctionCall","src":"13036:30:23"},"nodeType":"YulExpressionStatement","src":"13036:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13086:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13097:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13082:3:23"},"nodeType":"YulFunctionCall","src":"13082:18:23"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"13102:34:23","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13075:6:23"},"nodeType":"YulFunctionCall","src":"13075:62:23"},"nodeType":"YulExpressionStatement","src":"13075:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13157:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13168:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13153:3:23"},"nodeType":"YulFunctionCall","src":"13153:18:23"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"13173:20:23","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13146:6:23"},"nodeType":"YulFunctionCall","src":"13146:48:23"},"nodeType":"YulExpressionStatement","src":"13146:48:23"},{"nodeType":"YulAssignment","src":"13203:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13215:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13226:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13211:3:23"},"nodeType":"YulFunctionCall","src":"13211:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13203:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12973:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12987:4:23","type":""}],"src":"12822:414:23"},{"body":{"nodeType":"YulBlock","src":"13428:283:23","statements":[{"nodeType":"YulVariableDeclaration","src":"13438:27:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13458:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13452:5:23"},"nodeType":"YulFunctionCall","src":"13452:13:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13442:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13500:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13508:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13496:3:23"},"nodeType":"YulFunctionCall","src":"13496:17:23"},{"name":"pos","nodeType":"YulIdentifier","src":"13515:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"13520:6:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"13474:21:23"},"nodeType":"YulFunctionCall","src":"13474:53:23"},"nodeType":"YulExpressionStatement","src":"13474:53:23"},{"nodeType":"YulVariableDeclaration","src":"13536:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13553:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"13558:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13549:3:23"},"nodeType":"YulFunctionCall","src":"13549:16:23"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"13540:5:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13574:29:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13596:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13590:5:23"},"nodeType":"YulFunctionCall","src":"13590:13:23"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"13578:8:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13638:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13646:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13634:3:23"},"nodeType":"YulFunctionCall","src":"13634:17:23"},{"name":"end_1","nodeType":"YulIdentifier","src":"13653:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"13660:8:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"13612:21:23"},"nodeType":"YulFunctionCall","src":"13612:57:23"},"nodeType":"YulExpressionStatement","src":"13612:57:23"},{"nodeType":"YulAssignment","src":"13678:27:23","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"13689:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"13696:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13685:3:23"},"nodeType":"YulFunctionCall","src":"13685:20:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13678:3:23"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13396:3:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13401:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13409:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13420:3:23","type":""}],"src":"13241:470:23"},{"body":{"nodeType":"YulBlock","src":"13890:176:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13907:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13918:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13900:6:23"},"nodeType":"YulFunctionCall","src":"13900:21:23"},"nodeType":"YulExpressionStatement","src":"13900:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13941:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13952:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13937:3:23"},"nodeType":"YulFunctionCall","src":"13937:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"13957:2:23","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13930:6:23"},"nodeType":"YulFunctionCall","src":"13930:30:23"},"nodeType":"YulExpressionStatement","src":"13930:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13980:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13991:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13976:3:23"},"nodeType":"YulFunctionCall","src":"13976:18:23"},{"hexValue":"43616e6e6f74207472616e73666572207468697320746f6b656e","kind":"string","nodeType":"YulLiteral","src":"13996:28:23","type":"","value":"Cannot transfer this token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13969:6:23"},"nodeType":"YulFunctionCall","src":"13969:56:23"},"nodeType":"YulExpressionStatement","src":"13969:56:23"},{"nodeType":"YulAssignment","src":"14034:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14046:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14057:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14042:3:23"},"nodeType":"YulFunctionCall","src":"14042:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14034:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_da787f2021bdec5d8797a44acf6cf4c1edf6db8e95008f35f806a7547b513141__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13867:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13881:4:23","type":""}],"src":"13716:350:23"},{"body":{"nodeType":"YulBlock","src":"14245:236:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14262:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14273:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14255:6:23"},"nodeType":"YulFunctionCall","src":"14255:21:23"},"nodeType":"YulExpressionStatement","src":"14255:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14296:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14307:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14292:3:23"},"nodeType":"YulFunctionCall","src":"14292:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"14312:2:23","type":"","value":"46"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14285:6:23"},"nodeType":"YulFunctionCall","src":"14285:30:23"},"nodeType":"YulExpressionStatement","src":"14285:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14335:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14346:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14331:3:23"},"nodeType":"YulFunctionCall","src":"14331:18:23"},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e","kind":"string","nodeType":"YulLiteral","src":"14351:34:23","type":"","value":"ERC721URIStorage: URI set of non"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14324:6:23"},"nodeType":"YulFunctionCall","src":"14324:62:23"},"nodeType":"YulExpressionStatement","src":"14324:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14406:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14417:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14402:3:23"},"nodeType":"YulFunctionCall","src":"14402:18:23"},{"hexValue":"6578697374656e7420746f6b656e","kind":"string","nodeType":"YulLiteral","src":"14422:16:23","type":"","value":"existent token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14395:6:23"},"nodeType":"YulFunctionCall","src":"14395:44:23"},"nodeType":"YulExpressionStatement","src":"14395:44:23"},{"nodeType":"YulAssignment","src":"14448:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14460:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14471:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14456:3:23"},"nodeType":"YulFunctionCall","src":"14456:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14448:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14222:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14236:4:23","type":""}],"src":"14071:410:23"},{"body":{"nodeType":"YulBlock","src":"14689:286:23","statements":[{"nodeType":"YulVariableDeclaration","src":"14699:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14717:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14722:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14713:3:23"},"nodeType":"YulFunctionCall","src":"14713:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"14726:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14709:3:23"},"nodeType":"YulFunctionCall","src":"14709:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14703:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14744:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14759:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"14767:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14755:3:23"},"nodeType":"YulFunctionCall","src":"14755:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14737:6:23"},"nodeType":"YulFunctionCall","src":"14737:34:23"},"nodeType":"YulExpressionStatement","src":"14737:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14791:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14802:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14787:3:23"},"nodeType":"YulFunctionCall","src":"14787:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14811:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"14819:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14807:3:23"},"nodeType":"YulFunctionCall","src":"14807:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14780:6:23"},"nodeType":"YulFunctionCall","src":"14780:43:23"},"nodeType":"YulExpressionStatement","src":"14780:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14843:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14854:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14839:3:23"},"nodeType":"YulFunctionCall","src":"14839:18:23"},{"name":"value2","nodeType":"YulIdentifier","src":"14859:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14832:6:23"},"nodeType":"YulFunctionCall","src":"14832:34:23"},"nodeType":"YulExpressionStatement","src":"14832:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14886:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14897:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14882:3:23"},"nodeType":"YulFunctionCall","src":"14882:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"14902:3:23","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14875:6:23"},"nodeType":"YulFunctionCall","src":"14875:31:23"},"nodeType":"YulExpressionStatement","src":"14875:31:23"},{"nodeType":"YulAssignment","src":"14915:54:23","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"14941:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14953:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14964:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14949:3:23"},"nodeType":"YulFunctionCall","src":"14949:19:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"14923:17:23"},"nodeType":"YulFunctionCall","src":"14923:46:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14915:4:23"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14634:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14645:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14653:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14661:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14669:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14680:4:23","type":""}],"src":"14486:489:23"},{"body":{"nodeType":"YulBlock","src":"15060:169:23","statements":[{"body":{"nodeType":"YulBlock","src":"15106:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15115:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15118:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15108:6:23"},"nodeType":"YulFunctionCall","src":"15108:12:23"},"nodeType":"YulExpressionStatement","src":"15108:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"15081:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"15090:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15077:3:23"},"nodeType":"YulFunctionCall","src":"15077:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"15102:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"15073:3:23"},"nodeType":"YulFunctionCall","src":"15073:32:23"},"nodeType":"YulIf","src":"15070:52:23"},{"nodeType":"YulVariableDeclaration","src":"15131:29:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15150:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"15144:5:23"},"nodeType":"YulFunctionCall","src":"15144:16:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"15135:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15193:5:23"}],"functionName":{"name":"validator_revert_bytes4","nodeType":"YulIdentifier","src":"15169:23:23"},"nodeType":"YulFunctionCall","src":"15169:30:23"},"nodeType":"YulExpressionStatement","src":"15169:30:23"},{"nodeType":"YulAssignment","src":"15208:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"15218:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"15208:6:23"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15026:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"15037:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"15049:6:23","type":""}],"src":"14980:249:23"},{"body":{"nodeType":"YulBlock","src":"15266:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15283:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15290:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"15295:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15286:3:23"},"nodeType":"YulFunctionCall","src":"15286:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15276:6:23"},"nodeType":"YulFunctionCall","src":"15276:31:23"},"nodeType":"YulExpressionStatement","src":"15276:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15323:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15326:4:23","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15316:6:23"},"nodeType":"YulFunctionCall","src":"15316:15:23"},"nodeType":"YulExpressionStatement","src":"15316:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15347:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15350:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15340:6:23"},"nodeType":"YulFunctionCall","src":"15340:15:23"},"nodeType":"YulExpressionStatement","src":"15340:15:23"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"15234:127:23"},{"body":{"nodeType":"YulBlock","src":"15540:182:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15557:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15568:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15550:6:23"},"nodeType":"YulFunctionCall","src":"15550:21:23"},"nodeType":"YulExpressionStatement","src":"15550:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15591:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15602:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15587:3:23"},"nodeType":"YulFunctionCall","src":"15587:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"15607:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15580:6:23"},"nodeType":"YulFunctionCall","src":"15580:30:23"},"nodeType":"YulExpressionStatement","src":"15580:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15630:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15641:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15626:3:23"},"nodeType":"YulFunctionCall","src":"15626:18:23"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"15646:34:23","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15619:6:23"},"nodeType":"YulFunctionCall","src":"15619:62:23"},"nodeType":"YulExpressionStatement","src":"15619:62:23"},{"nodeType":"YulAssignment","src":"15690:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15702:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15713:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15698:3:23"},"nodeType":"YulFunctionCall","src":"15698:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15690:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15517:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15531:4:23","type":""}],"src":"15366:356:23"},{"body":{"nodeType":"YulBlock","src":"15901:178:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15918:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15929:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15911:6:23"},"nodeType":"YulFunctionCall","src":"15911:21:23"},"nodeType":"YulExpressionStatement","src":"15911:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15952:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15963:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15948:3:23"},"nodeType":"YulFunctionCall","src":"15948:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"15968:2:23","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15941:6:23"},"nodeType":"YulFunctionCall","src":"15941:30:23"},"nodeType":"YulExpressionStatement","src":"15941:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15991:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16002:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15987:3:23"},"nodeType":"YulFunctionCall","src":"15987:18:23"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"16007:30:23","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15980:6:23"},"nodeType":"YulFunctionCall","src":"15980:58:23"},"nodeType":"YulExpressionStatement","src":"15980:58:23"},{"nodeType":"YulAssignment","src":"16047:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16059:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16070:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16055:3:23"},"nodeType":"YulFunctionCall","src":"16055:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16047:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15878:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15892:4:23","type":""}],"src":"15727:352:23"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_uint32t_bytes32t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value2 := add(_2, 32)\n        value3 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n        value1 := value_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_available_length_bytes(src, length, end) -> array\n    {\n        let _1 := 0xffffffffffffffff\n        if gt(length, _1) { panic_error_0x41() }\n        let _2 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 31), _2), 63), _2))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        array := memPtr\n        mstore(memPtr, length)\n        if gt(add(src, length), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), src, length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value3 := abi_decode_available_length_bytes(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        value0 := abi_decode_available_length_bytes(add(_1, 32), calldataload(_1), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC721: approval to current owne\")\n        mstore(add(headStart, 96), \"r\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 61)\n        mstore(add(headStart, 64), \"ERC721: approve caller is not to\")\n        mstore(add(headStart, 96), \"ken owner or approved for all\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 45)\n        mstore(add(headStart, 64), \"ERC721: caller is not token owne\")\n        mstore(add(headStart, 96), \"r or approved\")\n        tail := add(headStart, 128)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"No more claims\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ERC721: invalid token ID\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ERC721: address zero is not a va\")\n        mstore(add(headStart, 96), \"lid owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC721: transfer from incorrect \")\n        mstore(add(headStart, 96), \"owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC721: transfer to the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9be9078bc2dcbc6c3629b9da278d490ac9d795e9ec5876f150ca46dc0fcec847__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Already owns NFT\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_rational_1_by_1__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"ERC721: approve to caller\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"ERC721: transfer to non ERC721Re\")\n        mstore(add(headStart, 96), \"ceiver implementer\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_stringliteral_da787f2021bdec5d8797a44acf6cf4c1edf6db8e95008f35f806a7547b513141__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Cannot transfer this token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"ERC721URIStorage: URI set of non\")\n        mstore(add(headStart, 96), \"existent token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"ERC721: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"ERC721: token already minted\")\n        tail := add(headStart, 96)\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3274":[{"length":32,"start":692},{"length":32,"start":1602}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116b9565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061172e565b610197610192366004611741565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461176f565b610443565b005b6101c26101d236600461179b565b61055d565b6101c26101e536600461179b565b61058e565b6101776105a9565b6101c26102003660046117dc565b610637565b610197610213366004611741565b610713565b600c54610197906001600160a01b031681565b61023e61023936600461186e565b610773565b604051908152602001610166565b6101c26107f9565b6007546001600160a01b0316610197565b61017761080d565b6101c261027b36600461188b565b61081c565b61023e600a5481565b6101c2610297366004611955565b61082b565b6101776102aa366004611741565b610863565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119d5565b61086e565b61015a6102f7366004611a1e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461186e565b610889565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a4c565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610902565b506000908152600460205260409020546001600160a01b031690565b600061044e82610713565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b6105588383610961565b505050565b61056733826109cf565b6105835760405162461bcd60e51b81526004016104b790611a86565b610558838383610a4e565b6105588383836040518060200160405280600081525061082b565b600980546105b690611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611a4c565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066c57600080fd5b600061067a8284018461186e565b6001600160a01b0381166000908152600b6020526040812054919250036106a9576106a481610bbf565b61070c565b600a546001600160a01b0382166000908152600b6020526040902054106107035760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61070c81610d2b565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107dd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b610801610dad565b61080b6000610e07565b565b60606001805461039990611a4c565b610827338383610e59565b5050565b61083533836109cf565b6108515760405162461bcd60e51b81526004016104b790611a86565b61085d84848484610f27565b50505050565b606061038482610f5a565b610876610dad565b805161082790600990602084019061160a565b610891610dad565b6001600160a01b0381166108f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b6108ff81610e07565b50565b6000818152600260205260409020546001600160a01b03166108ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061099682610713565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109db83610713565b9050806001600160a01b0316846001600160a01b03161480610a2257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a465750836001600160a01b0316610a3b8461041c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a6182610713565b6001600160a01b031614610a875760405162461bcd60e51b81526004016104b790611ad3565b6001600160a01b038216610ae95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b610af68383836001611062565b826001600160a01b0316610b0982610713565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016104b790611ad3565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600b602052604090205415610c185760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610c2360085490565b9050610c33600880546001019055565b610c3d82826110aa565b610cd18160098054610c4e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90611a4c565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b50505050506110c4565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610d54908490611b18565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b0316331461080b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610eba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f32848484610a4e565b610f3e8484848461115e565b61085d5760405162461bcd60e51b81526004016104b790611b3e565b6060610f6582610902565b60008281526006602052604081208054610f7e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90611a4c565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050509050600061101560408051602081019091526000815290565b90508051600003611027575092915050565b815115611059578082604051602001611041929190611b90565b60405160208183030381529060405292505050919050565b610a468461125f565b60405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74207472616e73666572207468697320746f6b656e00000000000060448201526064016104b7565b6108278282604051806020016040528060008152506112d3565b6000828152600260205260409020546001600160a01b031661113f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b600082815260066020908152604090912082516105589284019061160a565b60006001600160a01b0384163b1561125457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a2903390899088908890600401611bbf565b6020604051808303816000875af19250505080156111dd575060408051601f3d908101601f191682019092526111da91810190611bfc565b60015b61123a573d80801561120b576040519150601f19603f3d011682016040523d82523d6000602084013e611210565b606091505b5080516000036112325760405162461bcd60e51b81526004016104b790611b3e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a46565b506001949350505050565b606061126a82610902565b600061128160408051602081019091526000815290565b905060008151116112a157604051806020016040528060008152506112cc565b806112ab84611306565b6040516020016112bc929190611b90565b6040516020818303038152906040525b9392505050565b6112dd8383611399565b6112ea600084848461115e565b6105585760405162461bcd60e51b81526004016104b790611b3e565b6060600061131383611532565b600101905060008167ffffffffffffffff811115611333576113336118c9565b6040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136757509392505050565b6001600160a01b0382166113ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114545760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b611462600083836001611062565b6000818152600260205260409020546001600160a01b0316156114c75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106115715772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061159d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115bb57662386f26fc10000830492506010015b6305f5e10083106115d3576305f5e100830492506008015b61271083106115e757612710830492506004015b606483106115f9576064830492506002015b600a83106103845760010192915050565b82805461161690611a4c565b90600052602060002090601f016020900481019282611638576000855561167e565b82601f1061165157805160ff191683800117855561167e565b8280016001018555821561167e579182015b8281111561167e578251825591602001919060010190611663565b5061168a92915061168e565b5090565b5b8082111561168a576000815560010161168f565b6001600160e01b0319811681146108ff57600080fd5b6000602082840312156116cb57600080fd5b81356112cc816116a3565b60005b838110156116f15781810151838201526020016116d9565b8381111561085d5750506000910152565b6000815180845261171a8160208601602086016116d6565b601f01601f19169290920160200192915050565b6020815260006112cc6020830184611702565b60006020828403121561175357600080fd5b5035919050565b6001600160a01b03811681146108ff57600080fd5b6000806040838503121561178257600080fd5b823561178d8161175a565b946020939093013593505050565b6000806000606084860312156117b057600080fd5b83356117bb8161175a565b925060208401356117cb8161175a565b929592945050506040919091013590565b600080600080606085870312156117f257600080fd5b843563ffffffff8116811461180657600080fd5b935060208501359250604085013567ffffffffffffffff8082111561182a57600080fd5b818701915087601f83011261183e57600080fd5b81358181111561184d57600080fd5b88602082850101111561185f57600080fd5b95989497505060200194505050565b60006020828403121561188057600080fd5b81356112cc8161175a565b6000806040838503121561189e57600080fd5b82356118a98161175a565b9150602083013580151581146118be57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118fa576118fa6118c9565b604051601f8501601f19908116603f01168101908282118183101715611922576119226118c9565b8160405280935085815286868601111561193b57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561196b57600080fd5b84356119768161175a565b935060208501356119868161175a565b925060408501359150606085013567ffffffffffffffff8111156119a957600080fd5b8501601f810187136119ba57600080fd5b6119c9878235602084016118df565b91505092959194509250565b6000602082840312156119e757600080fd5b813567ffffffffffffffff8111156119fe57600080fd5b8201601f81018413611a0f57600080fd5b610a46848235602084016118df565b60008060408385031215611a3157600080fd5b8235611a3c8161175a565b915060208301356118be8161175a565b600181811c90821680611a6057607f821691505b602082108103611a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60008219821115611b3957634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611ba28184602088016116d6565b835190830190611bb68183602088016116d6565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf290830184611702565b9695505050505050565b600060208284031215611c0e57600080fd5b81516112cc816116a356fea26469706673582212208d47f1edfdaced66a3bde214a4d9a4f299526bd5fa060c7c58c18d45ae5a80d164736f6c634300080e0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xB212BA9F EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4F8AAAC6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6769A0C4 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST PUSH2 0x197 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x443 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x55D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x177 PUSH2 0x5A9 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DC JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x197 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x7F9 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x197 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH2 0x23E PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x82B JUMP JUMPDEST PUSH2 0x177 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x197 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D5 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x369 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x384 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3C5 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x412 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x412 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x427 DUP3 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E DUP3 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x4C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4DC JUMPI POP PUSH2 0x4DC DUP2 CALLER PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 PUSH2 0x961 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x567 CALLER DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x82B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x5B6 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5E2 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x62F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x604 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x62F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x612 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x67A DUP3 DUP5 ADD DUP5 PUSH2 0x186E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SUB PUSH2 0x6A9 JUMPI PUSH2 0x6A4 DUP2 PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x70C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x70C DUP2 PUSH2 0xD2B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x801 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x80B PUSH1 0x0 PUSH2 0xE07 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST PUSH2 0x827 CALLER DUP4 DUP4 PUSH2 0xE59 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x835 CALLER DUP4 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x85D DUP5 DUP5 DUP5 DUP5 PUSH2 0xF27 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x384 DUP3 PUSH2 0xF5A JUMP JUMPDEST PUSH2 0x876 PUSH2 0xDAD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x827 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH2 0x891 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x8FF DUP2 PUSH2 0xE07 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x996 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9DB DUP4 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xA22 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA46 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA3B DUP5 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA61 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0xAF6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB09 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xC18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x105B1C9958591E481BDDDB9CC8139195 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xC33 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC3D DUP3 DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH1 0x9 DUP1 SLOAD PUSH2 0xC4E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC7A SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCC7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC9C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCAA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xD54 SWAP1 DUP5 SWAP1 PUSH2 0x1B18 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF32 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0xF3E DUP5 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF65 DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF7E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFAA SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFF7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFCC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFF7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFDA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1015 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1027 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1059 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1041 SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA46 DUP5 PUSH2 0x125F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E73666572207468697320746F6B656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x827 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12D3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x113F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x558 SWAP3 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x11A2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11DD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11DA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x123A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1232 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA46 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x126A DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12CC JUMP JUMPDEST DUP1 PUSH2 0x12AB DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12BC SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x12DD DUP4 DUP4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x12EA PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1313 DUP4 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH2 0x1333 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1367 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1454 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x1462 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1571 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x159D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15BB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x15D3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x15E7 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x15F9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x384 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1616 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1638 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1651 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x167E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x167E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1663 JUMP JUMPDEST POP PUSH2 0x168A SWAP3 SWAP2 POP PUSH2 0x168E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x168A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x168F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16F1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x85D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x171A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x178D DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x17BB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x17CB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x185F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x18A9 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x18C9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1976 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1986 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C9 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A3C DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x18BE DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A60 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A80 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B39 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1BA2 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BB6 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SELFBALANCE CALL 0xED REVERT 0xAC 0xED PUSH7 0xA3BDE214A4D9A4 CALLCODE SWAP10 MSTORE PUSH12 0xD5FA060C7C58C18D45AE5A80 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER ","sourceMap":"356:2819:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300:2;;;;;;:::i;:::-;;:::i;:::-;;;565:14:23;;558:22;540:41;;528:2;513:18;1570:300:2;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;3935:167::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1692:32:23;;;1674:51;;1662:2;1647:18;3935:167:2;1528:203:23;3468:406:2;;;;;;:::i;:::-;;:::i;:::-;;4612:326;;;;;;:::i;:::-;;:::i;5004:179::-;;;;;;:::i;:::-;;:::i;558:27:15:-;;;:::i;1344:481::-;;;;;;:::i;:::-;;:::i;2190:219:2:-;;;;;;:::i;:::-;;:::i;728:23:15:-;;;;;-1:-1:-1;;;;;728:23:15;;;1929:204:2;;;;;;:::i;:::-;;:::i;:::-;;;3879:25:23;;;3867:2;3852:18;1929:204:2;3733:177:23;1831:101:0;;;:::i;1201:85::-;1273:6;;-1:-1:-1;;;;;1273:6:0;1201:85;;2633:102:2;;;:::i;4169:153::-;;;;;;:::i;:::-;;:::i;592:38:15:-;;;;;;5249:314:2;;;;;;:::i;:::-;;:::i;2976:196:15:-;;;;;;:::i;:::-;;:::i;689:32::-;;;;;2368:107;;;;;;:::i;:::-;;:::i;4388:162:2:-;;;;;;:::i;:::-;-1:-1:-1;;;;;4508:25:2;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4388:162;2081:198:0;;;;;;:::i;:::-;;:::i;1570:300:2:-;1672:4;-1:-1:-1;;;;;;1707:40:2;;-1:-1:-1;;;1707:40:2;;:104;;-1:-1:-1;;;;;;;1763:48:2;;-1:-1:-1;;;1763:48:2;1707:104;:156;;;-1:-1:-1;;;;;;;;;;937:40:12;;;1827:36:2;1688:175;1570:300;-1:-1:-1;;1570:300:2:o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;-1:-1:-1;4071:24:2;;;;:15;:24;;;;;;-1:-1:-1;;;;;4071:24:2;;3935:167::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;-1:-1:-1;;;;;3605:11:2;:2;-1:-1:-1;;;;;3605:11:2;;3597:57;;;;-1:-1:-1;;;3597:57:2;;7338:2:23;3597:57:2;;;7320:21:23;7377:2;7357:18;;;7350:30;7416:34;7396:18;;;7389:62;-1:-1:-1;;;7467:18:23;;;7460:31;7508:19;;3597:57:2;;;;;;;;;719:10:8;-1:-1:-1;;;;;3686:21:2;;;;:62;;-1:-1:-1;3711:37:2;3728:5;719:10:8;4388:162:2;:::i;3711:37::-;3665:170;;;;-1:-1:-1;;;3665:170:2;;7740:2:23;3665:170:2;;;7722:21:23;7779:2;7759:18;;;7752:30;7818:34;7798:18;;;7791:62;7889:31;7869:18;;;7862:59;7938:19;;3665:170:2;7538:425:23;3665:170:2;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:326::-;4801:41;719:10:8;4834:7:2;4801:18;:41::i;:::-;4793:99;;;;-1:-1:-1;;;4793:99:2;;;;;;;:::i;:::-;4903:28;4913:4;4919:2;4923:7;4903:9;:28::i;5004:179::-;5137:39;5154:4;5160:2;5164:7;5137:39;;;;;;;;;;;;:16;:39::i;558:27:15:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1344:481::-;1294:10;-1:-1:-1;;;;;1308:7:15;1294:21;;1286:30;;;;;;1481:15:::1;1499:28;::::0;;::::1;1510:5:::0;1499:28:::1;:::i;:::-;-1:-1:-1::0;;;;;1542:29:15;::::1;;::::0;;;:20:::1;:29;::::0;;;;;1481:46;;-1:-1:-1;1542:34:15;1538:280:::1;;1593:17;1602:7;1593:8;:17::i;:::-;1538:280;;;1701:23;::::0;-1:-1:-1;;;;;1669:29:15;::::1;;::::0;;;:20:::1;:29;::::0;;;;;:55:::1;1643:131;;;::::0;-1:-1:-1;;;1643:131:15;;8844:2:23;1643:131:15::1;::::0;::::1;8826:21:23::0;8883:2;8863:18;;;8856:30;-1:-1:-1;;;8902:18:23;;;8895:44;8956:18;;1643:131:15::1;8642:338:23::0;1643:131:15::1;1789:17;1798:7;1789:8;:17::i;:::-;1470:355;1344:481:::0;;;;:::o;2190:219:2:-;2262:7;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;;2324:56;;;;-1:-1:-1;;;2324:56:2;;9187:2:23;2324:56:2;;;9169:21:23;9226:2;9206:18;;;9199:30;-1:-1:-1;;;9245:18:23;;;9238:54;9309:18;;2324:56:2;8985:348:23;1929:204:2;2001:7;-1:-1:-1;;;;;2028:19:2;;2020:73;;;;-1:-1:-1;;;2020:73:2;;9540:2:23;2020:73:2;;;9522:21:23;9579:2;9559:18;;;9552:30;9618:34;9598:18;;;9591:62;-1:-1:-1;;;9669:18:23;;;9662:39;9718:19;;2020:73:2;9338:405:23;2020:73:2;-1:-1:-1;;;;;;2110:16:2;;;;;:9;:16;;;;;;;1929:204::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2633:102:2:-;2689:13;2721:7;2714:14;;;;;:::i;4169:153::-;4263:52;719:10:8;4296:8:2;4306;4263:18;:52::i;:::-;4169:153;;:::o;5249:314::-;5417:41;719:10:8;5450:7:2;5417:18;:41::i;:::-;5409:99;;;;-1:-1:-1;;;5409:99:2;;;;;;;:::i;:::-;5518:38;5532:4;5538:2;5542:7;5551:4;5518:13;:38::i;:::-;5249:314;;;;:::o;2976:196:15:-;3103:13;3141:23;3156:7;3141:14;:23::i;2368:107::-;1094:13:0;:11;:13::i;:::-;2442:25:15;;::::1;::::0;:13:::1;::::0;:25:::1;::::0;::::1;::::0;::::1;:::i;2081:198:0:-:0;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;9950:2:23;2161:73:0::1;::::0;::::1;9932:21:23::0;9989:2;9969:18;;;9962:30;10028:34;10008:18;;;10001:62;-1:-1:-1;;;10079:18:23;;;10072:36;10125:19;;2161:73:0::1;9748:402:23::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;13466:133:2:-;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;13539:53;;;;-1:-1:-1;;;13539:53:2;;9187:2:23;13539:53:2;;;9169:21:23;9226:2;9206:18;;;9199:30;-1:-1:-1;;;9245:18:23;;;9238:54;9309:18;;13539:53:2;8985:348:23;12768:171:2;12842:24;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;12842:29:2;-1:-1:-1;;;;;12842:29:2;;;;;;;;:24;;12895:23;12842:24;12895:14;:23::i;:::-;-1:-1:-1;;;;;12886:46:2;;;;;;;;;;;12768:171;;:::o;7540:261::-;7633:4;7649:13;7665:23;7680:7;7665:14;:23::i;:::-;7649:39;;7717:5;-1:-1:-1;;;;;7706:16:2;:7;-1:-1:-1;;;;;7706:16:2;;:52;;;-1:-1:-1;;;;;;4508:25:2;;;4485:4;4508:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;7726:32;7706:87;;;;7786:7;-1:-1:-1;;;;;7762:31:2;:20;7774:7;7762:11;:20::i;:::-;-1:-1:-1;;;;;7762:31:2;;7706:87;7698:96;7540:261;-1:-1:-1;;;;7540:261:2:o;11423:1233::-;11577:4;-1:-1:-1;;;;;11550:31:2;:23;11565:7;11550:14;:23::i;:::-;-1:-1:-1;;;;;11550:31:2;;11542:81;;;;-1:-1:-1;;;11542:81:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;11641:16:2;;11633:65;;;;-1:-1:-1;;;11633:65:2;;10763:2:23;11633:65:2;;;10745:21:23;10802:2;10782:18;;;10775:30;10841:34;10821:18;;;10814:62;-1:-1:-1;;;10892:18:23;;;10885:34;10936:19;;11633:65:2;10561:400:23;11633:65:2;11709:42;11730:4;11736:2;11740:7;11749:1;11709:20;:42::i;:::-;11878:4;-1:-1:-1;;;;;11851:31:2;:23;11866:7;11851:14;:23::i;:::-;-1:-1:-1;;;;;11851:31:2;;11843:81;;;;-1:-1:-1;;;11843:81:2;;;;;;;:::i;:::-;11993:24;;;;:15;:24;;;;;;;;11986:31;;-1:-1:-1;;;;;;11986:31:2;;;;;;-1:-1:-1;;;;;12461:15:2;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;12461:20:2;;;12495:13;;;;;;;;;:18;;11986:31;12495:18;;;12533:16;;;:7;:16;;;;;;:21;;;;;;;;;;12570:27;;12009:7;;12570:27;;;3538:336;3468:406;;:::o;1833:368:15:-;-1:-1:-1;;;;;1891:24:15;;;;;;:20;:24;;;;;;:29;1883:58;;;;-1:-1:-1;;;1883:58:15;;11168:2:23;1883:58:15;;;11150:21:23;11207:2;11187:18;;;11180:30;-1:-1:-1;;;11226:18:23;;;11219:46;11282:18;;1883:58:15;10966:340:23;1883:58:15;1952:15;1970:25;:15;918:14:9;;827:112;1970:25:15;1952:43;;2006:27;:15;1032:19:9;;1050:1;1032:19;;;945:123;2006:27:15;2044:22;2054:2;2058:7;2044:9;:22::i;:::-;2077:36;2090:7;2099:13;2077:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:12;:36::i;:::-;-1:-1:-1;;;;;2124:24:15;;;;;;:20;:24;;;;;;;;;2151:1;2124:28;;;;2170:23;;11493:51:23;;;11560:18;;;11553:34;2170:23:15;;11466:18:23;2170:23:15;;;;;;;1872:329;1833:368;:::o;2209:151::-;-1:-1:-1;;;;;2259:24:15;;;;;;:20;:24;;;;;:29;;2287:1;;2259:24;:29;;2287:1;;2259:29;:::i;:::-;;;;-1:-1:-1;;;;;;;2327:24:15;;;;;;:20;:24;;;;;;;;;;2306:46;;11493:51:23;;;11560:18;;;11553:34;2306:46:15;;11466:18:23;2306:46:15;;;;;;;2209:151;:::o;1359:130:0:-;1273:6;;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;12309:2:23;1414:68:0;;;12291:21:23;;;12328:18;;;12321:30;12387:34;12367:18;;;12360:62;12439:18;;1414:68:0;12107:356:23;2433:187:0;2525:6;;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;13075:307:2:-;13225:8;-1:-1:-1;;;;;13216:17:2;:5;-1:-1:-1;;;;;13216:17:2;;13208:55;;;;-1:-1:-1;;;13208:55:2;;12670:2:23;13208:55:2;;;12652:21:23;12709:2;12689:18;;;12682:30;12748:27;12728:18;;;12721:55;12793:18;;13208:55:2;12468:349:23;13208:55:2;-1:-1:-1;;;;;13273:25:2;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;13273:46:2;;;;;;;;;;13334:41;;540::23;;;13334::2;;513:18:23;13334:41:2;;;;;;;13075:307;;;:::o;6424:305::-;6574:28;6584:4;6590:2;6594:7;6574:9;:28::i;:::-;6620:47;6643:4;6649:2;6653:7;6662:4;6620:22;:47::i;:::-;6612:110;;;;-1:-1:-1;;;6612:110:2;;;;;;;:::i;482:608:5:-;555:13;580:23;595:7;580:14;:23::i;:::-;614;640:19;;;:10;:19;;;;;614:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;669:18;690:10;3395:9:2;;;;;;;;;-1:-1:-1;3395:9:2;;;3319:92;690:10:5;669:31;;779:4;773:18;795:1;773:23;769:70;;-1:-1:-1;819:9:5;482:608;-1:-1:-1;;482:608:5:o;769:70::-;941:23;;:27;937:106;;1015:4;1021:9;998:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;984:48;;;;482:608;;;:::o;937:106::-;1060:23;1075:7;1060:14;:23::i;2507:213:15:-;2676:36;;-1:-1:-1;;;2676:36:15;;13918:2:23;2676:36:15;;;13900:21:23;13957:2;13937:18;;;13930:30;13996:28;13976:18;;;13969:56;14042:18;;2676:36:15;13716:350:23;8131:108:2;8206:26;8216:2;8220:7;8206:26;;;;;;;;;;;;:9;:26::i;1237:214:5:-;7321:4:2;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;1328:75:5;;;;-1:-1:-1;;;1328:75:5;;14273:2:23;1328:75:5;;;14255:21:23;14312:2;14292:18;;;14285:30;14351:34;14331:18;;;14324:62;-1:-1:-1;;;14402:18:23;;;14395:44;14456:19;;1328:75:5;14071:410:23;1328:75:5;1413:19;;;;:10;:19;;;;;;;;:31;;;;;;;;:::i;14151:831:2:-;14300:4;-1:-1:-1;;;;;14320:13:2;;1465:19:7;:23;14316:660:2;;14355:71;;-1:-1:-1;;;14355:71:2;;-1:-1:-1;;;;;14355:36:2;;;;;:71;;719:10:8;;14406:4:2;;14412:7;;14421:4;;14355:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14355:71:2;;;;;;;;-1:-1:-1;;14355:71:2;;;;;;;;;;;;:::i;:::-;;;14351:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14593:6;:13;14610:1;14593:18;14589:321;;14635:60;;-1:-1:-1;;;14635:60:2;;;;;;;:::i;14589:321::-;14862:6;14856:13;14847:6;14843:2;14839:15;14832:38;14351:573;-1:-1:-1;;;;;;14476:51:2;-1:-1:-1;;;14476:51:2;;-1:-1:-1;14469:58:2;;14316:660;-1:-1:-1;14961:4:2;14151:831;;;;;;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;3395:9;;;;;;;;;-1:-1:-1;3395:9:2;;;3319:92;2957:10;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;2801:276;-1:-1:-1;;;2801:276:2:o;8460:309::-;8584:18;8590:2;8594:7;8584:5;:18::i;:::-;8633:53;8664:1;8668:2;8672:7;8681:4;8633:22;:53::i;:::-;8612:150;;;;-1:-1:-1;;;8612:150:2;;;;;;;:::i;415:696:10:-;471:13;520:14;537:17;548:5;537:10;:17::i;:::-;557:1;537:21;520:38;;572:20;606:6;595:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;595:18:10;-1:-1:-1;572:41:10;-1:-1:-1;733:28:10;;;749:2;733:28;788:280;-1:-1:-1;;819:5:10;-1:-1:-1;;;953:2:10;942:14;;937:30;819:5;924:44;1012:2;1003:11;;;-1:-1:-1;1032:21:10;788:280;1032:21;-1:-1:-1;1088:6:10;415:696;-1:-1:-1;;;415:696:10:o;9091:920:2:-;-1:-1:-1;;;;;9170:16:2;;9162:61;;;;-1:-1:-1;;;9162:61:2;;15568:2:23;9162:61:2;;;15550:21:23;;;15587:18;;;15580:30;15646:34;15626:18;;;15619:62;15698:18;;9162:61:2;15366:356:23;9162:61:2;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;7344:31;9233:58;;;;-1:-1:-1;;;9233:58:2;;15929:2:23;9233:58:2;;;15911:21:23;15968:2;15948:18;;;15941:30;16007;15987:18;;;15980:58;16055:18;;9233:58:2;15727:352:23;9233:58:2;9302:48;9331:1;9335:2;9339:7;9348:1;9302:20;:48::i;:::-;7321:4;6930:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6930:16:2;7344:31;9437:58;;;;-1:-1:-1;;;9437:58:2;;15929:2:23;9437:58:2;;;15911:21:23;15968:2;15948:18;;;15941:30;16007;15987:18;;;15980:58;16055:18;;9437:58:2;15727:352:23;9437:58:2;-1:-1:-1;;;;;9837:13:2;;;;;;:9;:13;;;;;;;;:18;;9854:1;9837:18;;;9876:16;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9876:21:2;;;;;9913:33;9884:7;;9837:13;;9913:33;;9837:13;;9913:33;4169:153;;:::o;9889:890:14:-;9942:7;;-1:-1:-1;;;10017:15:14;;10013:99;;-1:-1:-1;;;10052:15:14;;;-1:-1:-1;10095:2:14;10085:12;10013:99;10138:6;10129:5;:15;10125:99;;10173:6;10164:15;;;-1:-1:-1;10207:2:14;10197:12;10125:99;10250:6;10241:5;:15;10237:99;;10285:6;10276:15;;;-1:-1:-1;10319:2:14;10309:12;10237:99;10362:5;10353;:14;10349:96;;10396:5;10387:14;;;-1:-1:-1;10429:1:14;10419:11;10349:96;10471:5;10462;:14;10458:96;;10505:5;10496:14;;;-1:-1:-1;10538:1:14;10528:11;10458:96;10580:5;10571;:14;10567:96;;10614:5;10605:14;;;-1:-1:-1;10647:1:14;10637:11;10567:96;10689:5;10680;:14;10676:64;;10724:1;10714:11;10766:6;9889:890;-1:-1:-1;;9889:890:14:o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:23;-1:-1:-1;;;;;;88:32:23;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:23;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:23;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:23:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:23;;1343:180;-1:-1:-1;1343:180:23:o;1736:131::-;-1:-1:-1;;;;;1811:31:23;;1801:42;;1791:70;;1857:1;1854;1847:12;1872:315;1940:6;1948;2001:2;1989:9;1980:7;1976:23;1972:32;1969:52;;;2017:1;2014;2007:12;1969:52;2056:9;2043:23;2075:31;2100:5;2075:31;:::i;:::-;2125:5;2177:2;2162:18;;;;2149:32;;-1:-1:-1;;;1872:315:23:o;2192:456::-;2269:6;2277;2285;2338:2;2326:9;2317:7;2313:23;2309:32;2306:52;;;2354:1;2351;2344:12;2306:52;2393:9;2380:23;2412:31;2437:5;2412:31;:::i;:::-;2462:5;-1:-1:-1;2519:2:23;2504:18;;2491:32;2532:33;2491:32;2532:33;:::i;:::-;2192:456;;2584:7;;-1:-1:-1;;;2638:2:23;2623:18;;;;2610:32;;2192:456::o;2653:823::-;2740:6;2748;2756;2764;2817:2;2805:9;2796:7;2792:23;2788:32;2785:52;;;2833:1;2830;2823:12;2785:52;2872:9;2859:23;2922:10;2915:5;2911:22;2904:5;2901:33;2891:61;;2948:1;2945;2938:12;2891:61;2971:5;-1:-1:-1;3023:2:23;3008:18;;2995:32;;-1:-1:-1;3078:2:23;3063:18;;3050:32;3101:18;3131:14;;;3128:34;;;3158:1;3155;3148:12;3128:34;3196:6;3185:9;3181:22;3171:32;;3241:7;3234:4;3230:2;3226:13;3222:27;3212:55;;3263:1;3260;3253:12;3212:55;3303:2;3290:16;3329:2;3321:6;3318:14;3315:34;;;3345:1;3342;3335:12;3315:34;3390:7;3385:2;3376:6;3372:2;3368:15;3364:24;3361:37;3358:57;;;3411:1;3408;3401:12;3358:57;2653:823;;;;-1:-1:-1;;3442:2:23;3434:11;;-1:-1:-1;;;2653:823:23:o;3481:247::-;3540:6;3593:2;3581:9;3572:7;3568:23;3564:32;3561:52;;;3609:1;3606;3599:12;3561:52;3648:9;3635:23;3667:31;3692:5;3667:31;:::i;3915:416::-;3980:6;3988;4041:2;4029:9;4020:7;4016:23;4012:32;4009:52;;;4057:1;4054;4047:12;4009:52;4096:9;4083:23;4115:31;4140:5;4115:31;:::i;:::-;4165:5;-1:-1:-1;4222:2:23;4207:18;;4194:32;4264:15;;4257:23;4245:36;;4235:64;;4295:1;4292;4285:12;4235:64;4318:7;4308:17;;;3915:416;;;;;:::o;4336:127::-;4397:10;4392:3;4388:20;4385:1;4378:31;4428:4;4425:1;4418:15;4452:4;4449:1;4442:15;4468:631;4532:5;4562:18;4603:2;4595:6;4592:14;4589:40;;;4609:18;;:::i;:::-;4684:2;4678:9;4652:2;4738:15;;-1:-1:-1;;4734:24:23;;;4760:2;4730:33;4726:42;4714:55;;;4784:18;;;4804:22;;;4781:46;4778:72;;;4830:18;;:::i;:::-;4870:10;4866:2;4859:22;4899:6;4890:15;;4929:6;4921;4914:22;4969:3;4960:6;4955:3;4951:16;4948:25;4945:45;;;4986:1;4983;4976:12;4945:45;5036:6;5031:3;5024:4;5016:6;5012:17;4999:44;5091:1;5084:4;5075:6;5067;5063:19;5059:30;5052:41;;;;4468:631;;;;;:::o;5104:794::-;5199:6;5207;5215;5223;5276:3;5264:9;5255:7;5251:23;5247:33;5244:53;;;5293:1;5290;5283:12;5244:53;5332:9;5319:23;5351:31;5376:5;5351:31;:::i;:::-;5401:5;-1:-1:-1;5458:2:23;5443:18;;5430:32;5471:33;5430:32;5471:33;:::i;:::-;5523:7;-1:-1:-1;5577:2:23;5562:18;;5549:32;;-1:-1:-1;5632:2:23;5617:18;;5604:32;5659:18;5648:30;;5645:50;;;5691:1;5688;5681:12;5645:50;5714:22;;5767:4;5759:13;;5755:27;-1:-1:-1;5745:55:23;;5796:1;5793;5786:12;5745:55;5819:73;5884:7;5879:2;5866:16;5861:2;5857;5853:11;5819:73;:::i;:::-;5809:83;;;5104:794;;;;;;;:::o;5903:450::-;5972:6;6025:2;6013:9;6004:7;6000:23;5996:32;5993:52;;;6041:1;6038;6031:12;5993:52;6081:9;6068:23;6114:18;6106:6;6103:30;6100:50;;;6146:1;6143;6136:12;6100:50;6169:22;;6222:4;6214:13;;6210:27;-1:-1:-1;6200:55:23;;6251:1;6248;6241:12;6200:55;6274:73;6339:7;6334:2;6321:16;6316:2;6312;6308:11;6274:73;:::i;6358:388::-;6426:6;6434;6487:2;6475:9;6466:7;6462:23;6458:32;6455:52;;;6503:1;6500;6493:12;6455:52;6542:9;6529:23;6561:31;6586:5;6561:31;:::i;:::-;6611:5;-1:-1:-1;6668:2:23;6653:18;;6640:32;6681:33;6640:32;6681:33;:::i;6751:380::-;6830:1;6826:12;;;;6873;;;6894:61;;6948:4;6940:6;6936:17;6926:27;;6894:61;7001:2;6993:6;6990:14;6970:18;6967:38;6964:161;;7047:10;7042:3;7038:20;7035:1;7028:31;7082:4;7079:1;7072:15;7110:4;7107:1;7100:15;6964:161;;6751:380;;;:::o;7968:409::-;8170:2;8152:21;;;8209:2;8189:18;;;8182:30;8248:34;8243:2;8228:18;;8221:62;-1:-1:-1;;;8314:2:23;8299:18;;8292:43;8367:3;8352:19;;7968:409::o;10155:401::-;10357:2;10339:21;;;10396:2;10376:18;;;10369:30;10435:34;10430:2;10415:18;;10408:62;-1:-1:-1;;;10501:2:23;10486:18;;10479:35;10546:3;10531:19;;10155:401::o;11598:225::-;11638:3;11669:1;11665:6;11662:1;11659:13;11656:136;;;11714:10;11709:3;11705:20;11702:1;11695:31;11749:4;11746:1;11739:15;11777:4;11774:1;11767:15;11656:136;-1:-1:-1;11808:9:23;;11598:225::o;12822:414::-;13024:2;13006:21;;;13063:2;13043:18;;;13036:30;13102:34;13097:2;13082:18;;13075:62;-1:-1:-1;;;13168:2:23;13153:18;;13146:48;13226:3;13211:19;;12822:414::o;13241:470::-;13420:3;13458:6;13452:13;13474:53;13520:6;13515:3;13508:4;13500:6;13496:17;13474:53;:::i;:::-;13590:13;;13549:16;;;;13612:57;13590:13;13549:16;13646:4;13634:17;;13612:57;:::i;:::-;13685:20;;13241:470;-1:-1:-1;;;;13241:470:23:o;14486:489::-;-1:-1:-1;;;;;14755:15:23;;;14737:34;;14807:15;;14802:2;14787:18;;14780:43;14854:2;14839:18;;14832:34;;;14902:3;14897:2;14882:18;;14875:31;;;14680:4;;14923:46;;14949:19;;14941:6;14923:46;:::i;:::-;14915:54;14486:489;-1:-1:-1;;;;;;14486:489:23:o;14980:249::-;15049:6;15102:2;15090:9;15081:7;15077:23;15073:32;15070:52;;;15118:1;15115;15108:12;15070:52;15150:9;15144:16;15169:30;15193:5;15169:30;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1449400","executionCost":"infinite","totalCost":"infinite"},"external":{"amountOfClaimsPerPerson()":"2406","approve(address,uint256)":"infinite","badgeTokenURI()":"infinite","balanceOf(address)":"2716","getApproved(uint256)":"4792","handle(uint32,bytes32,bytes)":"infinite","isApprovedForAll(address,address)":"infinite","mailbox()":"infinite","name()":"infinite","owner()":"2376","ownerOf(uint256)":"2627","promoter()":"2448","renounceOwnership()":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"26766","setTokenURI(string)":"infinite","supportsInterface(bytes4)":"534","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_beforeTokenTransfer(address,address,uint256,uint256)":"infinite","_burn(uint256)":"infinite","addClaim(address)":"infinite","safeMint(address)":"infinite"}},"methodIdentifiers":{"amountOfClaimsPerPerson()":"b212ba9f","approve(address,uint256)":"095ea7b3","badgeTokenURI()":"4f8aaac6","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","handle(uint32,bytes32,bytes)":"56d5d475","isApprovedForAll(address,address)":"e985e9c5","mailbox()":"d5438eae","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","promoter()":"6769a0c4","renounceOwnership()":"715018a6","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setTokenURI(string)":"e0df5b6f","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_promoterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfClaimsPerPerson\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_mailboxAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimCount\",\"type\":\"uint256\"}],\"name\":\"ClaimedPromotion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountOfClaimsPerPerson\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"badgeTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_body\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_body\":\"Raw bytes content of message body\",\"_origin\":\"Domain ID of the chain from which the message came\",\"_sender\":\"Address of the message sender on the origin chain as bytes32\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handle an interchain message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721Promotion.sol\":\"ERC721Promotion\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721Promotion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/IMessageRecipient.sol\\\";\\r\\n\\r\\ncontract ERC721Promotion is\\r\\n    ERC721,\\r\\n    ERC721URIStorage,\\r\\n    Ownable,\\r\\n    IMessageRecipient\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public badgeTokenURI;\\r\\n    uint256 public amountOfClaimsPerPerson;\\r\\n    mapping(address => uint) claimerToClaimsCount;\\r\\n    address public immutable mailbox;\\r\\n    address public promoter;\\r\\n\\r\\n    event ClaimedPromotion(address claimer, uint claimCount);\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory _tokenURI,\\r\\n        address _promoterAddress,\\r\\n        uint _amountOfClaimsPerPerson,\\r\\n        address _mailboxAddress\\r\\n    ) ERC721(name, symbol) {\\r\\n        setTokenURI(_tokenURI);\\r\\n        amountOfClaimsPerPerson = _amountOfClaimsPerPerson;\\r\\n        mailbox = _mailboxAddress;\\r\\n        promoter = _promoterAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyMailbox() {\\r\\n        require(msg.sender == mailbox);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external onlyMailbox {\\r\\n        address claimer = abi.decode(_body, (address));\\r\\n        if (claimerToClaimsCount[claimer] == 0) {\\r\\n            safeMint(claimer);\\r\\n        } else {\\r\\n            require(\\r\\n                claimerToClaimsCount[claimer] < amountOfClaimsPerPerson,\\r\\n                \\\"No more claims\\\"\\r\\n            );\\r\\n            addClaim(claimer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) internal {\\r\\n        require(claimerToClaimsCount[to] == 0, \\\"Already owns NFT\\\");\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, badgeTokenURI);\\r\\n        claimerToClaimsCount[to] = 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, 1);\\r\\n    }\\r\\n\\r\\n    function addClaim(address to) internal {\\r\\n        claimerToClaimsCount[to] += 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, claimerToClaimsCount[to]);\\r\\n    }\\r\\n\\r\\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\\r\\n        badgeTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n    // Soulbound Token\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal override {\\r\\n        revert(\\\"Cannot transfer this token\\\");\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        revert(\\\"Disabled\\\");\\r\\n        // super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe26b0678d208cb0be04dc35cbce68539fd711b890fce8b1deadfc2cb58cef297\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IMessageRecipient {\\r\\n    /**\\r\\n     * @notice Handle an interchain message\\r\\n     * @param _origin Domain ID of the chain from which the message came\\r\\n     * @param _sender Address of the message sender on the origin chain as bytes32\\r\\n     * @param _body Raw bytes content of message body\\r\\n     */\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb973c9a025339a6ee49248143ae8ab0801340675ac19f635df5130e56d8d1250\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":192,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":194,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":198,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":202,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":206,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":212,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":1240,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":7,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_owner","offset":0,"slot":"7","type":"t_address"},{"astId":3264,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_tokenIdCounter","offset":0,"slot":"8","type":"t_struct(Counter)1737_storage"},{"astId":3266,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"badgeTokenURI","offset":0,"slot":"9","type":"t_string_storage"},{"astId":3268,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"amountOfClaimsPerPerson","offset":0,"slot":"10","type":"t_uint256"},{"astId":3272,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"claimerToClaimsCount","offset":0,"slot":"11","type":"t_mapping(t_address,t_uint256)"},{"astId":3276,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"promoter","offset":0,"slot":"12","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)1737_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":1736,"contract":"contracts/ERC721Promotion.sol:ERC721Promotion","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"handle(uint32,bytes32,bytes)":{"notice":"Handle an interchain message"}},"version":1}}},"contracts/PromotionMain.sol":{"PromotionMain":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"promotionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"promotionAddress","type":"address"},{"indexed":false,"internalType":"address","name":"claimer","type":"address"},{"indexed":false,"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"indexed":false,"internalType":"uint256","name":"claimsCount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"claimedAt","type":"uint256"}],"name":"ClaimedPromotion","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"promotionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"GasTankFilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"promotionId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"GasTankRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"destinationDomain","type":"uint32"}],"name":"NewChainAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"promotionId","type":"bytes32"},{"indexed":false,"internalType":"address","name":"promotionAddress","type":"address"},{"indexed":false,"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"uint256","name":"createdAt","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"claimsPerPerson","type":"uint256"},{"indexed":false,"internalType":"string","name":"badgeURI","type":"string"}],"name":"PromotionCreated","type":"event"},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"address","name":"destinationReceiver","type":"address"},{"internalType":"address","name":"destinationMailbox","type":"address"}],"name":"addChain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"}],"name":"chains","outputs":[{"internalType":"bytes32","name":"destinationReceiverAddress","type":"bytes32"},{"internalType":"address","name":"destinationMailbox","type":"address"},{"internalType":"bool","name":"isExists","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_promotionId","type":"bytes32"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"address","name":"claimer","type":"address"}],"name":"claimPromotion","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"address","name":"","type":"address"}],"name":"claims","outputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"address","name":"promotionAddress","type":"address"},{"internalType":"uint256","name":"claimsCount","type":"uint256"},{"internalType":"bool","name":"isExists","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"uint256","name":"claimsPerPerson","type":"uint256"},{"internalType":"string","name":"badgeURI","type":"string"},{"internalType":"uint256","name":"_salt","type":"uint256"}],"name":"createPromotion","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_promotionId","type":"bytes32"}],"name":"fillGas","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"gasTank","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"}],"name":"getQuotedPayment","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"igp","outputs":[{"internalType":"contract IInterchainGasPaymaster","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"iqsRouter","outputs":[{"internalType":"contract IInterchainQueryRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mailbox","outputs":[{"internalType":"contract IMailbox","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"promotions","outputs":[{"internalType":"address","name":"promotionAddress","type":"address"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"address","name":"creator","type":"address"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"claimsPerPerson","type":"uint256"},{"internalType":"bool","name":"isExists","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_promotionId","type":"bytes32"},{"internalType":"address","name":"_to","type":"address"}],"name":"refundGas","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_131":{"entryPoint":null,"id":131,"parameterSlots":0,"returnSlots":0},"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_msgSender_1721":{"entryPoint":null,"id":1721,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":35,"id":111,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b613fb4806100826000396000f3fe608060405260043610620001075760003560e01c806392256c0e1162000095578063ea272e391162000060578063ea272e391462000394578063f28b2daa1462000444578063f2fde38b146200046e578063f8717e8d146200049357600080fd5b806392256c0e1462000295578063cade147d146200032e578063d5438eae1462000353578063d8b0857f146200037d57600080fd5b8063715018a611620000d6578063715018a614620001d35780638b203dd414620001eb5780638da5cb5b146200025e5780639060cd4f146200027e57600080fd5b80630ff96663146200010c5780632deb22d9146200014457806359da575a146200016b57806360cb07d01462000190575b600080fd5b3480156200011957600080fd5b50620001316200012b366004620018eb565b620004c4565b6040519081526020015b60405180910390f35b3480156200015157600080fd5b50620001696200016336600462001928565b62000557565b005b3480156200017857600080fd5b50620001696200018a36600462001972565b620005e8565b3480156200019d57600080fd5b50620001ba73f782c6c4a02f2c71bb8a1db0166fab40ea95681881565b6040516001600160a01b0390911681526020016200013b565b348015620001e057600080fd5b506200016962000cc8565b348015620001f857600080fd5b50620002386200020a366004620018eb565b600560205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b0390921660208401521515908201526060016200013b565b3480156200026b57600080fd5b506000546001600160a01b0316620001ba565b620001696200028f36600462001ac4565b62000ce0565b348015620002a257600080fd5b50620002fc620002b436600462001b7b565b600360209081526000928352604080842090915290825290208054600182015460029092015463ffffffff8216926401000000009092046001600160a01b0316919060ff1684565b6040805163ffffffff90951685526001600160a01b03909316602085015291830152151560608201526080016200013b565b3480156200033b57600080fd5b50620001696200034d36600462001b7b565b6200118a565b3480156200036057600080fd5b50620001ba73cc737a94fecaec165abcf12ded095bb13f03768581565b620001696200038e36600462001baa565b62001337565b348015620003a157600080fd5b50620003ff620003b336600462001baa565b6002602081905260009182526040909120805460018201549282015460038301546004909301546001600160a01b0380841695600160a01b90940463ffffffff16949316929060ff1686565b604080516001600160a01b03978816815263ffffffff96909616602087015293909516928401929092526060830152608082015290151560a082015260c0016200013b565b3480156200045157600080fd5b50620001ba73f90cb82a76492614d07b82a7658917f3ac811ac181565b3480156200047b57600080fd5b50620001696200048d36600462001bc4565b620013a6565b348015620004a057600080fd5b5062000131620004b236600462001baa565b60046020526000908152604090205481565b60405163a692979360e01b815263ffffffff8216600482015261c35060248201819052600091829073f90cb82a76492614d07b82a7658917f3ac811ac19063a692979390604401602060405180830381865afa15801562000529573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054f919062001be2565b949350505050565b6200056162001425565b60405180606001604052806200057d846001600160a01b031690565b81526001600160a01b039283166020808301919091526001604092830181905263ffffffff90961660009081526005825282902083518155908301519501805492909101511515600160a01b026001600160a81b031990921694909216939093179290921790915550565b63ffffffff8416600090815260056020526040902060010154600160a01b900460ff16620006535760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b60448201526064015b60405180910390fd5b6000600260008781526020019081526020016000206040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000600360008881526020019081526020016000206000846001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905060008260000151905060008888833360405160200162000847949392919093845260e09290921b6001600160e01b0319166020840152606090811b6bffffffffffffffffffffffff19908116602485015291901b166038820152604c0190565b604051602081830303815290604052805190602001209050846001600160a01b0316620008ad88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050620014819050565b6001600160a01b031614620008f45760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b60448201526064016200064a565b8360a001516200093b5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b210283937b6b7ba34b7b760791b60448201526064016200064a565b8260600151158062000954575082604001518460800151115b620009935760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016200064a565b604080516001600160a01b03871660208201526000910160408051808303601f190181529190529050600073cc737a94fecaec165abcf12ded095bb13f03768563fa31de018b6001600160a01b038716856040518463ffffffff1660e01b815260040162000a049392919062001c5d565b6020604051808303816000875af115801562000a24573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a4a919062001be2565b9050600062000a598b620004c4565b60008d81526004602052604090205490915081111562000aaf5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b60448201526064016200064a565b6040878101519051630237e58360e31b81526004810184905263ffffffff8d16602482015261c35060448201526001600160a01b03909116606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000b2757600080fd5b505af115801562000b3c573d6000803e3d6000fd5b505050505060008660400151905060405180608001604052808d63ffffffff168152602001876001600160a01b0316815260200182600162000b7f919062001ca3565b815260200160011515815250600360008f815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083151502179055509050507f1d784a2e6117c9c7790cd6effb9ad66fee4286853a212a375d7a5c8c7bf175a78d87338f85600162000c76919062001ca3565b604080519586526001600160a01b039485166020870152929093169184019190915263ffffffff16606083015260808201524260a082015260c00160405180910390a150505050505050505050505050565b62000cd262001425565b62000cde6000620014a9565b565b63ffffffff8416600090815260056020526040902060010154600160a01b900460ff1662000d475760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b60448201526064016200064a565b60405160009062000d679088908890869033908990889060200162001cbe565b60408051601f1981840301815282825263ffffffff8816600090815260056020529182205463fa31de0160e01b8452909350909173cc737a94fecaec165abcf12ded095bb13f0376859163fa31de019162000dc9918a91879060040162001c5d565b6020604051808303816000875af115801562000de9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e0f919062001be2565b9050600062000e23898989898989620014f9565b905060008989838a8a8a334260405160200162000e4898979695949392919062001d25565b60408051601f1981840301815291815281516020928301206000818152600290935291206004015490915060ff161562000eb85760405162461bcd60e51b815260206004820152601060248201526f50726f6d6f74696f6e2065786973747360801b60448201526064016200064a565b600062000ec589620004c4565b90508034101562000f0c5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b60448201526064016200064a565b62000f18813462001dbd565b6000838152600460205260408120805490919062000f3890849062001ca3565b9091555050604051630237e58360e31b81526004810185905263ffffffff8a16602482015261c350604482015233606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000fa657600080fd5b505af115801562000fbb573d6000803e3d6000fd5b50505050506040518060c00160405280846001600160a01b031681526020018a63ffffffff168152602001336001600160a01b03168152602001428152602001898152602001600115158152506002600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff0219169083151502179055509050506000600460008481526020019081526020016000205411156200113857600082815260046020908152604091829020548251858152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a15b7fd4a6ee30ad1cd3b2f4f9f76e9abd1d4954e098a7aebc8af7c92439acd488907682848b33428d8d60405162001175979695949392919062001dd7565b60405180910390a15050505050505050505050565b62001194620015f9565b6000828152600260205260409020600101546001600160a01b03163314620011ee5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016200064a565b600082815260046020526040902054620012385760405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b60448201526064016200064a565b60008281526004602052604080822054905182916001600160a01b038516918381818185875af1925050503d806000811462001291576040519150601f19603f3d011682016040523d82523d6000602084013e62001296565b606091505b50915091508115620012f5576000848152600460209081526040808320805493905580518781529182018390527f5aafa436e7bcce48335a89fd368e909dee8d7387d9349daaed3b167446d6841c910160405180910390a15062001327565b60405162461bcd60e51b815260206004820152600660248201526511985a5b195960d21b60448201526064016200064a565b50506200133360018055565b5050565b600081815260046020526040812080543492906200135790849062001ca3565b9091555050600081815260046020908152604091829020548251848152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a150565b620013b062001425565b6001600160a01b038116620014175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200064a565b6200142281620014a9565b50565b6000546001600160a01b0316331462000cde5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200064a565b600080600062001492858562001654565b91509150620014a1816200169d565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604051806020016200150e90620018c3565b601f1982820381018352601f90910116604081815263ffffffff8916600090815260056020908152919020600101546200155d928c928c928a9233928d926001600160a01b0316910162001e32565b60408051601f19818403018152908290526200157d929160200162001e9d565b60408051808303601f1901815282825263ffffffff8916600090815260056020908152928120548251848401206001600160f81b031994860194909452602185015260418401879052606184019290925292509060810160408051808303601f1901815291905280516020909101209998505050505050505050565b6002600154036200164d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016200064a565b6002600155565b60008082516041036200168e5760208301516040840151606085015160001a6200168187828585620017fa565b9450945050505062001696565b506000905060025b9250929050565b6000816004811115620016b457620016b462001ed0565b03620016bd5750565b6001816004811115620016d457620016d462001ed0565b03620017235760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016200064a565b60028160048111156200173a576200173a62001ed0565b03620017895760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016200064a565b6003816004811115620017a057620017a062001ed0565b03620014225760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016200064a565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115620018335750600090506003620018ba565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562001888573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116620018b357600060019250925050620018ba565b9150600090505b94509492505050565b6120988062001ee783390190565b803563ffffffff81168114620018e657600080fd5b919050565b600060208284031215620018fe57600080fd5b6200190982620018d1565b9392505050565b80356001600160a01b0381168114620018e657600080fd5b6000806000606084860312156200193e57600080fd5b6200194984620018d1565b9250620019596020850162001910565b9150620019696040850162001910565b90509250925092565b6000806000806000608086880312156200198b57600080fd5b853594506200199d60208701620018d1565b9350604086013567ffffffffffffffff80821115620019bb57600080fd5b818801915088601f830112620019d057600080fd5b813581811115620019e057600080fd5b896020828501011115620019f357600080fd5b60208301955080945050505062001a0d6060870162001910565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262001a4157600080fd5b813567ffffffffffffffff8082111562001a5f5762001a5f62001a19565b604051601f8301601f19908116603f0116810190828211818310171562001a8a5762001a8a62001a19565b8160405283815286602085880101111562001aa457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121562001ade57600080fd5b863567ffffffffffffffff8082111562001af757600080fd5b62001b058a838b0162001a2f565b9750602089013591508082111562001b1c57600080fd5b62001b2a8a838b0162001a2f565b965062001b3a60408a01620018d1565b955060608901359450608089013591508082111562001b5857600080fd5b5062001b6789828a0162001a2f565b92505060a087013590509295509295509295565b6000806040838503121562001b8f57600080fd5b8235915062001ba16020840162001910565b90509250929050565b60006020828403121562001bbd57600080fd5b5035919050565b60006020828403121562001bd757600080fd5b620019098262001910565b60006020828403121562001bf557600080fd5b5051919050565b60005b8381101562001c1957818101518382015260200162001bff565b8381111562001c29576000848401525b50505050565b6000815180845262001c4981602086016020860162001bfc565b601f01601f19169290920160200192915050565b63ffffffff8416815282602082015260606040820152600062001c84606083018462001c2f565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111562001cb95762001cb962001c8d565b500190565b60c08152600062001cd360c083018962001c2f565b828103602084015262001ce7818962001c2f565b9050828103604084015262001cfd818862001c2f565b6001600160a01b039690961660608401525050608081019290925260a0909101529392505050565b6000895162001d39818460208e0162001bfc565b89519083019062001d4f818360208e0162001bfc565b8082019150506bffffffffffffffffffffffff19808a60601b16825263ffffffff60e01b8960e01b166014830152876018830152865162001d98816038850160208b0162001bfc565b60609690961b16940160388101949094525050604c820152606c019695505050505050565b60008282101562001dd25762001dd262001c8d565b500390565b8781526001600160a01b03878116602083015263ffffffff87166040830152851660608201526080810184905260a0810183905260e060c0820181905260009062001e259083018462001c2f565b9998505050505050505050565b60c08152600062001e4760c083018962001c2f565b828103602084015262001e5b818962001c2f565b9050828103604084015262001e71818862001c2f565b6001600160a01b03968716606085015260808401959095525050921660a0909201919091529392505050565b6000835162001eb181846020880162001bfc565b83519083019062001ec781836020880162001bfc565b01949350505050565b634e487b7160e01b600052602160045260246000fdfe60a06040523480156200001157600080fd5b50604051620020983803806200209883398101604081905262000034916200032b565b8551869086906200004d9060009060208501906200019b565b508051620000639060019060208401906200019b565b505050620000806200007a620000c160201b60201c565b620000c5565b6200008b8462000117565b600a919091556001600160a01b03908116608052600c80546001600160a01b031916929091169190911790555062000426915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001216200013a565b8051620001369060099060208401906200019b565b5050565b6007546001600160a01b03163314620001995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b828054620001a990620003ea565b90600052602060002090601f016020900481019282620001cd576000855562000218565b82601f10620001e857805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000218578251825591602001919060010190620001fb565b50620002269291506200022a565b5090565b5b808211156200022657600081556001016200022b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026957600080fd5b81516001600160401b038082111562000286576200028662000241565b604051601f8301601f19908116603f01168101908282118183101715620002b157620002b162000241565b81604052838152602092508683858801011115620002ce57600080fd5b600091505b83821015620002f25785820183015181830184015290820190620002d3565b83821115620003045760008385830101525b9695505050505050565b80516001600160a01b03811681146200032657600080fd5b919050565b60008060008060008060c087890312156200034557600080fd5b86516001600160401b03808211156200035d57600080fd5b6200036b8a838b0162000257565b975060208901519150808211156200038257600080fd5b620003908a838b0162000257565b96506040890151915080821115620003a757600080fd5b50620003b689828a0162000257565b945050620003c7606088016200030e565b925060808701519150620003de60a088016200030e565b90509295509295509295565b600181811c90821680620003ff57607f821691505b6020821081036200042057634e487b7160e01b600052602260045260246000fd5b50919050565b608051611c4f62000449600039600081816102b401526106420152611c4f6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116b9565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061172e565b610197610192366004611741565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461176f565b610443565b005b6101c26101d236600461179b565b61055d565b6101c26101e536600461179b565b61058e565b6101776105a9565b6101c26102003660046117dc565b610637565b610197610213366004611741565b610713565b600c54610197906001600160a01b031681565b61023e61023936600461186e565b610773565b604051908152602001610166565b6101c26107f9565b6007546001600160a01b0316610197565b61017761080d565b6101c261027b36600461188b565b61081c565b61023e600a5481565b6101c2610297366004611955565b61082b565b6101776102aa366004611741565b610863565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119d5565b61086e565b61015a6102f7366004611a1e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461186e565b610889565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a4c565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610902565b506000908152600460205260409020546001600160a01b031690565b600061044e82610713565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b6105588383610961565b505050565b61056733826109cf565b6105835760405162461bcd60e51b81526004016104b790611a86565b610558838383610a4e565b6105588383836040518060200160405280600081525061082b565b600980546105b690611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611a4c565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066c57600080fd5b600061067a8284018461186e565b6001600160a01b0381166000908152600b6020526040812054919250036106a9576106a481610bbf565b61070c565b600a546001600160a01b0382166000908152600b6020526040902054106107035760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61070c81610d2b565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107dd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b610801610dad565b61080b6000610e07565b565b60606001805461039990611a4c565b610827338383610e59565b5050565b61083533836109cf565b6108515760405162461bcd60e51b81526004016104b790611a86565b61085d84848484610f27565b50505050565b606061038482610f5a565b610876610dad565b805161082790600990602084019061160a565b610891610dad565b6001600160a01b0381166108f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b6108ff81610e07565b50565b6000818152600260205260409020546001600160a01b03166108ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061099682610713565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109db83610713565b9050806001600160a01b0316846001600160a01b03161480610a2257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a465750836001600160a01b0316610a3b8461041c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a6182610713565b6001600160a01b031614610a875760405162461bcd60e51b81526004016104b790611ad3565b6001600160a01b038216610ae95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b610af68383836001611062565b826001600160a01b0316610b0982610713565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016104b790611ad3565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600b602052604090205415610c185760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610c2360085490565b9050610c33600880546001019055565b610c3d82826110aa565b610cd18160098054610c4e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90611a4c565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b50505050506110c4565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610d54908490611b18565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b0316331461080b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610eba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f32848484610a4e565b610f3e8484848461115e565b61085d5760405162461bcd60e51b81526004016104b790611b3e565b6060610f6582610902565b60008281526006602052604081208054610f7e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90611a4c565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050509050600061101560408051602081019091526000815290565b90508051600003611027575092915050565b815115611059578082604051602001611041929190611b90565b60405160208183030381529060405292505050919050565b610a468461125f565b60405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74207472616e73666572207468697320746f6b656e00000000000060448201526064016104b7565b6108278282604051806020016040528060008152506112d3565b6000828152600260205260409020546001600160a01b031661113f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b600082815260066020908152604090912082516105589284019061160a565b60006001600160a01b0384163b1561125457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a2903390899088908890600401611bbf565b6020604051808303816000875af19250505080156111dd575060408051601f3d908101601f191682019092526111da91810190611bfc565b60015b61123a573d80801561120b576040519150601f19603f3d011682016040523d82523d6000602084013e611210565b606091505b5080516000036112325760405162461bcd60e51b81526004016104b790611b3e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a46565b506001949350505050565b606061126a82610902565b600061128160408051602081019091526000815290565b905060008151116112a157604051806020016040528060008152506112cc565b806112ab84611306565b6040516020016112bc929190611b90565b6040516020818303038152906040525b9392505050565b6112dd8383611399565b6112ea600084848461115e565b6105585760405162461bcd60e51b81526004016104b790611b3e565b6060600061131383611532565b600101905060008167ffffffffffffffff811115611333576113336118c9565b6040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136757509392505050565b6001600160a01b0382166113ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114545760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b611462600083836001611062565b6000818152600260205260409020546001600160a01b0316156114c75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106115715772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061159d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115bb57662386f26fc10000830492506010015b6305f5e10083106115d3576305f5e100830492506008015b61271083106115e757612710830492506004015b606483106115f9576064830492506002015b600a83106103845760010192915050565b82805461161690611a4c565b90600052602060002090601f016020900481019282611638576000855561167e565b82601f1061165157805160ff191683800117855561167e565b8280016001018555821561167e579182015b8281111561167e578251825591602001919060010190611663565b5061168a92915061168e565b5090565b5b8082111561168a576000815560010161168f565b6001600160e01b0319811681146108ff57600080fd5b6000602082840312156116cb57600080fd5b81356112cc816116a3565b60005b838110156116f15781810151838201526020016116d9565b8381111561085d5750506000910152565b6000815180845261171a8160208601602086016116d6565b601f01601f19169290920160200192915050565b6020815260006112cc6020830184611702565b60006020828403121561175357600080fd5b5035919050565b6001600160a01b03811681146108ff57600080fd5b6000806040838503121561178257600080fd5b823561178d8161175a565b946020939093013593505050565b6000806000606084860312156117b057600080fd5b83356117bb8161175a565b925060208401356117cb8161175a565b929592945050506040919091013590565b600080600080606085870312156117f257600080fd5b843563ffffffff8116811461180657600080fd5b935060208501359250604085013567ffffffffffffffff8082111561182a57600080fd5b818701915087601f83011261183e57600080fd5b81358181111561184d57600080fd5b88602082850101111561185f57600080fd5b95989497505060200194505050565b60006020828403121561188057600080fd5b81356112cc8161175a565b6000806040838503121561189e57600080fd5b82356118a98161175a565b9150602083013580151581146118be57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118fa576118fa6118c9565b604051601f8501601f19908116603f01168101908282118183101715611922576119226118c9565b8160405280935085815286868601111561193b57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561196b57600080fd5b84356119768161175a565b935060208501356119868161175a565b925060408501359150606085013567ffffffffffffffff8111156119a957600080fd5b8501601f810187136119ba57600080fd5b6119c9878235602084016118df565b91505092959194509250565b6000602082840312156119e757600080fd5b813567ffffffffffffffff8111156119fe57600080fd5b8201601f81018413611a0f57600080fd5b610a46848235602084016118df565b60008060408385031215611a3157600080fd5b8235611a3c8161175a565b915060208301356118be8161175a565b600181811c90821680611a6057607f821691505b602082108103611a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60008219821115611b3957634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611ba28184602088016116d6565b835190830190611bb68183602088016116d6565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf290830184611702565b9695505050505050565b600060208284031215611c0e57600080fd5b81516112cc816116a356fea26469706673582212208d47f1edfdaced66a3bde214a4d9a4f299526bd5fa060c7c58c18d45ae5a80d164736f6c634300080e0033a26469706673582212200b5100f6b473e37b40404d56d58fbcf818a78ae24b532bc0e0731fb1647426fb64736f6c634300080e0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A CALLER PUSH2 0x23 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH2 0x73 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x3FB4 DUP1 PUSH2 0x82 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x107 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92256C0E GT PUSH3 0x95 JUMPI DUP1 PUSH4 0xEA272E39 GT PUSH3 0x60 JUMPI DUP1 PUSH4 0xEA272E39 EQ PUSH3 0x394 JUMPI DUP1 PUSH4 0xF28B2DAA EQ PUSH3 0x444 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x46E JUMPI DUP1 PUSH4 0xF8717E8D EQ PUSH3 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x92256C0E EQ PUSH3 0x295 JUMPI DUP1 PUSH4 0xCADE147D EQ PUSH3 0x32E JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH3 0x353 JUMPI DUP1 PUSH4 0xD8B0857F EQ PUSH3 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH3 0xD6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH3 0x1D3 JUMPI DUP1 PUSH4 0x8B203DD4 EQ PUSH3 0x1EB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x25E JUMPI DUP1 PUSH4 0x9060CD4F EQ PUSH3 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xFF96663 EQ PUSH3 0x10C JUMPI DUP1 PUSH4 0x2DEB22D9 EQ PUSH3 0x144 JUMPI DUP1 PUSH4 0x59DA575A EQ PUSH3 0x16B JUMPI DUP1 PUSH4 0x60CB07D0 EQ PUSH3 0x190 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x131 PUSH3 0x12B CALLDATASIZE PUSH1 0x4 PUSH3 0x18EB JUMP JUMPDEST PUSH3 0x4C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x163 CALLDATASIZE PUSH1 0x4 PUSH3 0x1928 JUMP JUMPDEST PUSH3 0x557 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x18A CALLDATASIZE PUSH1 0x4 PUSH3 0x1972 JUMP JUMPDEST PUSH3 0x5E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1BA PUSH20 0xF782C6C4A02F2C71BB8A1DB0166FAB40EA956818 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0xCC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x238 PUSH3 0x20A CALLDATASIZE PUSH1 0x4 PUSH3 0x18EB JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1BA JUMP JUMPDEST PUSH3 0x169 PUSH3 0x28F CALLDATASIZE PUSH1 0x4 PUSH3 0x1AC4 JUMP JUMPDEST PUSH3 0xCE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x2FC PUSH3 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH3 0x1B7B JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH4 0xFFFFFFFF DUP3 AND SWAP3 PUSH5 0x100000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x34D CALLDATASIZE PUSH1 0x4 PUSH3 0x1B7B JUMP JUMPDEST PUSH3 0x118A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1BA PUSH20 0xCC737A94FECAEC165ABCF12DED095BB13F037685 DUP2 JUMP JUMPDEST PUSH3 0x169 PUSH3 0x38E CALLDATASIZE PUSH1 0x4 PUSH3 0x1BAA JUMP JUMPDEST PUSH3 0x1337 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3FF PUSH3 0x3B3 CALLDATASIZE PUSH1 0x4 PUSH3 0x1BAA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP6 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH4 0xFFFFFFFF AND SWAP5 SWAP4 AND SWAP3 SWAP1 PUSH1 0xFF AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP7 SWAP1 SWAP7 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP4 SWAP1 SWAP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1BA PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x48D CALLDATASIZE PUSH1 0x4 PUSH3 0x1BC4 JUMP JUMPDEST PUSH3 0x13A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x131 PUSH3 0x4B2 CALLDATASIZE PUSH1 0x4 PUSH3 0x1BAA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA6929793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0xC350 PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP1 PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 SWAP1 PUSH4 0xA6929793 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x529 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x54F SWAP2 SWAP1 PUSH3 0x1BE2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH3 0x561 PUSH3 0x1425 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH3 0x57D DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP3 MSTORE DUP3 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP1 DUP4 ADD MLOAD SWAP6 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP2 ADD MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP5 SWAP1 SWAP3 AND SWAP4 SWAP1 SWAP4 OR SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH3 0x653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x24B73B30B634B2102232B9BA34B730BA34B7B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP9 DUP9 DUP4 CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x847 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP4 DUP5 MSTORE PUSH1 0xE0 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x24 DUP6 ADD MSTORE SWAP2 SWAP1 SHL AND PUSH1 0x38 DUP3 ADD MSTORE PUSH1 0x4C ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x8AD DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP7 SWAP4 SWAP3 POP POP PUSH3 0x1481 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x1D5B985D5D1A1BDC9A5E9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD PUSH3 0x93B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x24B73B30B634B210283937B6B7BA34B7B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD ISZERO DUP1 PUSH3 0x954 JUMPI POP DUP3 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD GT JUMPDEST PUSH3 0x993 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE SWAP1 POP PUSH1 0x0 PUSH20 0xCC737A94FECAEC165ABCF12DED095BB13F037685 PUSH4 0xFA31DE01 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xA04 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1C5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0xA24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA4A SWAP2 SWAP1 PUSH3 0x1BE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0xA59 DUP12 PUSH3 0x4C4 JUMP JUMPDEST PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH3 0xAAF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x496E73756666696369656E7420676173 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x40 DUP8 DUP2 ADD MLOAD SWAP1 MLOAD PUSH4 0x237E583 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP14 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xC350 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 SWAP1 PUSH4 0x11BF2C18 SWAP1 DUP4 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xB27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xB3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP7 PUSH1 0x40 ADD MLOAD SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP14 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH3 0xB7F SWAP2 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH32 0x1D784A2E6117C9C7790CD6EFFB9AD66FEE4286853A212A375D7A5C8C7BF175A7 DUP14 DUP8 CALLER DUP16 DUP6 PUSH1 0x1 PUSH3 0xC76 SWAP2 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP3 SWAP1 SWAP4 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE TIMESTAMP PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0xCD2 PUSH3 0x1425 JUMP JUMPDEST PUSH3 0xCDE PUSH1 0x0 PUSH3 0x14A9 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH3 0xD47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x24B73B30B634B2102232B9BA34B730BA34B7B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH3 0xD67 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP7 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x20 ADD PUSH3 0x1CBE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE PUSH4 0xFFFFFFFF DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE SWAP2 DUP3 KECCAK256 SLOAD PUSH4 0xFA31DE01 PUSH1 0xE0 SHL DUP5 MSTORE SWAP1 SWAP4 POP SWAP1 SWAP2 PUSH20 0xCC737A94FECAEC165ABCF12DED095BB13F037685 SWAP2 PUSH4 0xFA31DE01 SWAP2 PUSH3 0xDC9 SWAP2 DUP11 SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH3 0x1C5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0xDE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xE0F SWAP2 SWAP1 PUSH3 0x1BE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0xE23 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH3 0x14F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP10 DUP10 DUP4 DUP11 DUP11 DUP11 CALLER TIMESTAMP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xE48 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1D25 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH3 0xEB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x50726F6D6F74696F6E20657869737473 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 PUSH3 0xEC5 DUP10 PUSH3 0x4C4 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH3 0xF0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x496E73756666696369656E7420676173 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH3 0xF18 DUP2 CALLVALUE PUSH3 0x1DBD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH3 0xF38 SWAP1 DUP5 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0x237E583 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xC350 PUSH1 0x44 DUP3 ADD MSTORE CALLER PUSH1 0x64 DUP3 ADD MSTORE PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 SWAP1 PUSH4 0x11BF2C18 SWAP1 DUP4 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xFA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xFBB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO PUSH3 0x1138 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP6 DUP2 MSTORE SWAP2 DUP3 ADD MSTORE PUSH32 0x1B70566610F058A3248C965AD2923A4829BEB0D4CBE6A069E49C71FF46CE07EA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH32 0xD4A6EE30AD1CD3B2F4F9F76E9ABD1D4954E098A7AEBC8AF7C92439ACD4889076 DUP3 DUP5 DUP12 CALLER TIMESTAMP DUP14 DUP14 PUSH1 0x40 MLOAD PUSH3 0x1175 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1DD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x1194 PUSH3 0x15F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x11EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x155B985D5D1A1BDC9A5E9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x1238 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E6F2062616C616E6365 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x1291 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1296 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH3 0x12F5 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP4 SWAP1 SSTORE DUP1 MLOAD DUP8 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x5AAFA436E7BCCE48335A89FD368E909DEE8D7387D9349DAAED3B167446D6841C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH3 0x1327 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x11985A5B1959 PUSH1 0xD2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST POP POP PUSH3 0x1333 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH3 0x1357 SWAP1 DUP5 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD MSTORE PUSH32 0x1B70566610F058A3248C965AD2923A4829BEB0D4CBE6A069E49C71FF46CE07EA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH3 0x13B0 PUSH3 0x1425 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x1417 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x64A JUMP JUMPDEST PUSH3 0x1422 DUP2 PUSH3 0x14A9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0xCDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x1492 DUP6 DUP6 PUSH3 0x1654 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH3 0x14A1 DUP2 PUSH3 0x169D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0x150E SWAP1 PUSH3 0x18C3 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x155D SWAP3 DUP13 SWAP3 DUP13 SWAP3 DUP11 SWAP3 CALLER SWAP3 DUP14 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 ADD PUSH3 0x1E32 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x157D SWAP3 SWAP2 PUSH1 0x20 ADD PUSH3 0x1E9D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE DUP3 DUP3 MSTORE PUSH4 0xFFFFFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 DUP2 KECCAK256 SLOAD DUP3 MLOAD DUP5 DUP5 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x41 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0x61 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP3 POP SWAP1 PUSH1 0x81 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH3 0x164D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH3 0x168E JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH3 0x1681 DUP8 DUP3 DUP6 DUP6 PUSH3 0x17FA JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH3 0x1696 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x16B4 JUMPI PUSH3 0x16B4 PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x16BD JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x16D4 JUMPI PUSH3 0x16D4 PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x1723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x173A JUMPI PUSH3 0x173A PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x1789 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x17A0 JUMPI PUSH3 0x17A0 PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x1422 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH3 0x1833 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH3 0x18BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1888 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x18B3 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH3 0x18BA JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2098 DUP1 PUSH3 0x1EE7 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1909 DUP3 PUSH3 0x18D1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x193E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1949 DUP5 PUSH3 0x18D1 JUMP JUMPDEST SWAP3 POP PUSH3 0x1959 PUSH1 0x20 DUP6 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP2 POP PUSH3 0x1969 PUSH1 0x40 DUP6 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x198B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH3 0x199D PUSH1 0x20 DUP8 ADD PUSH3 0x18D1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x19BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x19D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x19E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x19F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH3 0x1A0D PUSH1 0x60 DUP8 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1A5F JUMPI PUSH3 0x1A5F PUSH3 0x1A19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x1A8A JUMPI PUSH3 0x1A8A PUSH3 0x1A19 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x1AA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x1ADE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1AF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1B05 DUP11 DUP4 DUP12 ADD PUSH3 0x1A2F JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1B2A DUP11 DUP4 DUP12 ADD PUSH3 0x1A2F JUMP JUMPDEST SWAP7 POP PUSH3 0x1B3A PUSH1 0x40 DUP11 ADD PUSH3 0x18D1 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x1B58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1B67 DUP10 DUP3 DUP11 ADD PUSH3 0x1A2F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH3 0x1BA1 PUSH1 0x20 DUP5 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1BBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1BD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1909 DUP3 PUSH3 0x1910 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1BF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1C19 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1BFF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x1C29 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x1C49 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x1BFC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH3 0x1C84 PUSH1 0x60 DUP4 ADD DUP5 PUSH3 0x1C2F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x1CB9 JUMPI PUSH3 0x1CB9 PUSH3 0x1C8D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1CD3 PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x1C2F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1CE7 DUP2 DUP10 PUSH3 0x1C2F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x1CFD DUP2 DUP9 PUSH3 0x1C2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 0x60 DUP5 ADD MSTORE POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP10 MLOAD PUSH3 0x1D39 DUP2 DUP5 PUSH1 0x20 DUP15 ADD PUSH3 0x1BFC JUMP JUMPDEST DUP10 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH3 0x1D4F DUP2 DUP4 PUSH1 0x20 DUP15 ADD PUSH3 0x1BFC JUMP JUMPDEST DUP1 DUP3 ADD SWAP2 POP POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP1 DUP11 PUSH1 0x60 SHL AND DUP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP10 PUSH1 0xE0 SHL AND PUSH1 0x14 DUP4 ADD MSTORE DUP8 PUSH1 0x18 DUP4 ADD MSTORE DUP7 MLOAD PUSH3 0x1D98 DUP2 PUSH1 0x38 DUP6 ADD PUSH1 0x20 DUP12 ADD PUSH3 0x1BFC JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 SHL AND SWAP5 ADD PUSH1 0x38 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x4C DUP3 ADD MSTORE PUSH1 0x6C ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x1DD2 JUMPI PUSH3 0x1DD2 PUSH3 0x1C8D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP8 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x1E25 SWAP1 DUP4 ADD DUP5 PUSH3 0x1C2F JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1E47 PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x1C2F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1E5B DUP2 DUP10 PUSH3 0x1C2F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x1E71 DUP2 DUP9 PUSH3 0x1C2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP SWAP3 AND PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH3 0x1EB1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH3 0x1BFC JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH3 0x1EC7 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH3 0x1BFC JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2098 CODESIZE SUB DUP1 PUSH3 0x2098 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x32B JUMP JUMPDEST DUP6 MLOAD DUP7 SWAP1 DUP7 SWAP1 PUSH3 0x4D SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x63 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP POP PUSH3 0x80 PUSH3 0x7A PUSH3 0xC1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xC5 JUMP JUMPDEST PUSH3 0x8B DUP5 PUSH3 0x117 JUMP JUMPDEST PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x426 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x121 PUSH3 0x13A JUMP JUMPDEST DUP1 MLOAD PUSH3 0x136 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x199 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1A9 SWAP1 PUSH3 0x3EA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1CD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1E8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x218 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x218 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1FB JUMP JUMPDEST POP PUSH3 0x226 SWAP3 SWAP2 POP PUSH3 0x22A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x226 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x22B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2B1 JUMPI PUSH3 0x2B1 PUSH3 0x241 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x2F2 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x304 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x36B DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x390 DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3B6 DUP10 DUP3 DUP11 ADD PUSH3 0x257 JUMP JUMPDEST SWAP5 POP POP PUSH3 0x3C7 PUSH1 0x60 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD SWAP2 POP PUSH3 0x3DE PUSH1 0xA0 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x3FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x420 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1C4F PUSH3 0x449 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B4 ADD MSTORE PUSH2 0x642 ADD MSTORE PUSH2 0x1C4F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xB212BA9F EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4F8AAAC6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6769A0C4 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST PUSH2 0x197 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x443 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x55D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x177 PUSH2 0x5A9 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DC JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x197 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x7F9 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x197 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH2 0x23E PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x82B JUMP JUMPDEST PUSH2 0x177 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x197 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D5 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x369 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x384 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3C5 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x412 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x412 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x427 DUP3 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E DUP3 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x4C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4DC JUMPI POP PUSH2 0x4DC DUP2 CALLER PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 PUSH2 0x961 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x567 CALLER DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x82B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x5B6 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5E2 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x62F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x604 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x62F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x612 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x67A DUP3 DUP5 ADD DUP5 PUSH2 0x186E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SUB PUSH2 0x6A9 JUMPI PUSH2 0x6A4 DUP2 PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x70C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x70C DUP2 PUSH2 0xD2B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x801 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x80B PUSH1 0x0 PUSH2 0xE07 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST PUSH2 0x827 CALLER DUP4 DUP4 PUSH2 0xE59 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x835 CALLER DUP4 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x85D DUP5 DUP5 DUP5 DUP5 PUSH2 0xF27 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x384 DUP3 PUSH2 0xF5A JUMP JUMPDEST PUSH2 0x876 PUSH2 0xDAD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x827 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH2 0x891 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x8FF DUP2 PUSH2 0xE07 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x996 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9DB DUP4 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xA22 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA46 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA3B DUP5 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA61 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0xAF6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB09 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xC18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x105B1C9958591E481BDDDB9CC8139195 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xC33 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC3D DUP3 DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH1 0x9 DUP1 SLOAD PUSH2 0xC4E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC7A SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCC7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC9C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCAA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xD54 SWAP1 DUP5 SWAP1 PUSH2 0x1B18 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF32 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0xF3E DUP5 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF65 DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF7E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFAA SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFF7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFCC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFF7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFDA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1015 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1027 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1059 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1041 SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA46 DUP5 PUSH2 0x125F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E73666572207468697320746F6B656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x827 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12D3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x113F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x558 SWAP3 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x11A2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11DD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11DA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x123A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1232 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA46 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x126A DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12CC JUMP JUMPDEST DUP1 PUSH2 0x12AB DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12BC SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x12DD DUP4 DUP4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x12EA PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1313 DUP4 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH2 0x1333 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1367 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1454 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x1462 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1571 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x159D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15BB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x15D3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x15E7 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x15F9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x384 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1616 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1638 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1651 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x167E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x167E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1663 JUMP JUMPDEST POP PUSH2 0x168A SWAP3 SWAP2 POP PUSH2 0x168E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x168A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x168F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16F1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x85D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x171A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x178D DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x17BB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x17CB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x185F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x18A9 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x18C9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1976 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1986 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C9 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A3C DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x18BE DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A60 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A80 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B39 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1BA2 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BB6 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SELFBALANCE CALL 0xED REVERT 0xAC 0xED PUSH7 0xA3BDE214A4D9A4 CALLCODE SWAP10 MSTORE PUSH12 0xD5FA060C7C58C18D45AE5A80 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND MLOAD STOP 0xF6 0xB4 PUSH20 0xE37B40404D56D58FBCF818A78AE24B532BC0E073 0x1F 0xB1 PUSH5 0x7426FB6473 PUSH16 0x6C634300080E00330000000000000000 ","sourceMap":"458:8219:16:-:0;;;;;;;;;;;;-1:-1:-1;936:32:0;719:10:8;936:18:0;:32::i;:::-;1716:1:1;1821:22;;458:8219:16;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;458:8219:16:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_checkOwner_54":{"entryPoint":5157,"id":54,"parameterSlots":0,"returnSlots":0},"@_getAddress_3731":{"entryPoint":5369,"id":3731,"parameterSlots":6,"returnSlots":1},"@_msgSender_1721":{"entryPoint":null,"id":1721,"parameterSlots":0,"returnSlots":1},"@_nonReentrantAfter_165":{"entryPoint":null,"id":165,"parameterSlots":0,"returnSlots":0},"@_nonReentrantBefore_157":{"entryPoint":5625,"id":157,"parameterSlots":0,"returnSlots":0},"@_throwError_2034":{"entryPoint":5789,"id":2034,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":5289,"id":111,"parameterSlots":1,"returnSlots":0},"@addChain_3656":{"entryPoint":1367,"id":3656,"parameterSlots":3,"returnSlots":0},"@addressToBytes32_4192":{"entryPoint":null,"id":4192,"parameterSlots":1,"returnSlots":1},"@chains_3568":{"entryPoint":null,"id":3568,"parameterSlots":0,"returnSlots":0},"@claimPromotion_4060":{"entryPoint":1512,"id":4060,"parameterSlots":5,"returnSlots":0},"@claims_3559":{"entryPoint":null,"id":3559,"parameterSlots":0,"returnSlots":0},"@createPromotion_3899":{"entryPoint":3296,"id":3899,"parameterSlots":6,"returnSlots":0},"@fillGas_4080":{"entryPoint":4919,"id":4080,"parameterSlots":1,"returnSlots":0},"@gasTank_3563":{"entryPoint":null,"id":3563,"parameterSlots":0,"returnSlots":0},"@getQuotedPayment_4173":{"entryPoint":1220,"id":4173,"parameterSlots":1,"returnSlots":1},"@igp_3580":{"entryPoint":null,"id":3580,"parameterSlots":0,"returnSlots":0},"@iqsRouter_3586":{"entryPoint":null,"id":3586,"parameterSlots":0,"returnSlots":0},"@mailbox_3574":{"entryPoint":null,"id":3574,"parameterSlots":0,"returnSlots":0},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@promotions_3552":{"entryPoint":null,"id":3552,"parameterSlots":0,"returnSlots":0},"@recover_2107":{"entryPoint":5249,"id":2107,"parameterSlots":2,"returnSlots":1},"@refundGas_4151":{"entryPoint":4490,"id":4151,"parameterSlots":2,"returnSlots":0},"@renounceOwnership_68":{"entryPoint":3272,"id":68,"parameterSlots":0,"returnSlots":0},"@transferOwnership_91":{"entryPoint":5030,"id":91,"parameterSlots":1,"returnSlots":0},"@tryRecover_2080":{"entryPoint":5716,"id":2080,"parameterSlots":2,"returnSlots":2},"@tryRecover_2248":{"entryPoint":6138,"id":2248,"parameterSlots":4,"returnSlots":2},"abi_decode_address":{"entryPoint":6416,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_string":{"entryPoint":6703,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7108,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":7082,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32_fromMemory":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":7035,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint32t_bytes_calldata_ptrt_address":{"entryPoint":6514,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint32t_uint256t_string_memory_ptrt_uint256":{"entryPoint":6852,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":7138,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint32":{"entryPoint":6379,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint32t_addresst_address":{"entryPoint":6440,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_uint32":{"entryPoint":6353,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes":{"entryPoint":7215,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes1_t_bytes32_t_bytes32_t_bytes32__to_t_bytes1_t_bytes32_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_uint32_t_address_t_address__to_t_bytes32_t_uint32_t_address_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7837,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint32_t_uint256_t_string_memory_ptr_t_address_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint32_t_uint256_t_string_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":7461,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint32_t_address_t_uint256_t_uint256_t_bool__to_t_address_t_uint32_t_address_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint32_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint32_t_address_t_uint256_t_uint256_t_string_memory_ptr__to_t_bytes32_t_address_t_uint32_t_address_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7639,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint32_t_rational_50000_by_1_t_address__to_t_bytes32_t_uint32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_contract$_IInterchainGasPaymaster_$4451__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IInterchainQueryRouter_$4467__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IMailbox_$4488__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":7730,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_bytes32__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":7358,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_329b6695cc078fec6f5eaa1763a4568ff856dfa63ebfa86719d6a43e911ffb23__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_397f20c9ee670e88dbc97000732216e0936c9de3d4dedf79ef5a506c8a043cf4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6f40ae2896ad121a1cccc8ecbad485b8bf64b8051c59b33816d2ceafe3540118__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ae9e3c5666d5ca47b45182ea29825923fa4f9977167406567efff75efd4f4ebd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c2556b2f0738cda755e8236a64d7e89ba3fe6369211a88de912f9face6e2903e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c634a95a0c3be7dc2b531f1778120b691aa9c64ba93349380e714e28f6712829__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32_t_address_t_uint256_t_bool__to_t_uint32_t_address_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint32_t_bytes32_t_bytes_memory_ptr__to_t_uint32_t_bytes32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7261,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint32_t_uint256__to_t_uint32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7331,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7613,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory":{"entryPoint":7164,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x11":{"entryPoint":7309,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":7888,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6681,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:20856:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"62:115:23","statements":[{"nodeType":"YulAssignment","src":"72:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"94:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"81:12:23"},"nodeType":"YulFunctionCall","src":"81:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"72:5:23"}]},{"body":{"nodeType":"YulBlock","src":"155:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"164:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"167:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"157:6:23"},"nodeType":"YulFunctionCall","src":"157:12:23"},"nodeType":"YulExpressionStatement","src":"157:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"123:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"134:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"141:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"130:3:23"},"nodeType":"YulFunctionCall","src":"130:22:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"120:2:23"},"nodeType":"YulFunctionCall","src":"120:33:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"113:6:23"},"nodeType":"YulFunctionCall","src":"113:41:23"},"nodeType":"YulIf","src":"110:61:23"}]},"name":"abi_decode_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"41:6:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"52:5:23","type":""}],"src":"14:163:23"},{"body":{"nodeType":"YulBlock","src":"251:115:23","statements":[{"body":{"nodeType":"YulBlock","src":"297:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"306:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"309:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"299:6:23"},"nodeType":"YulFunctionCall","src":"299:12:23"},"nodeType":"YulExpressionStatement","src":"299:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"272:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"281:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"268:3:23"},"nodeType":"YulFunctionCall","src":"268:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"293:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"264:3:23"},"nodeType":"YulFunctionCall","src":"264:32:23"},"nodeType":"YulIf","src":"261:52:23"},{"nodeType":"YulAssignment","src":"322:38:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"350:9:23"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"332:17:23"},"nodeType":"YulFunctionCall","src":"332:28:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"322:6:23"}]}]},"name":"abi_decode_tuple_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"217:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"228:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"240:6:23","type":""}],"src":"182:184:23"},{"body":{"nodeType":"YulBlock","src":"472:76:23","statements":[{"nodeType":"YulAssignment","src":"482:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"494:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"505:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:23"},"nodeType":"YulFunctionCall","src":"490:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"482:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"524:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"535:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"517:6:23"},"nodeType":"YulFunctionCall","src":"517:25:23"},"nodeType":"YulExpressionStatement","src":"517:25:23"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"441:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"452:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"463:4:23","type":""}],"src":"371:177:23"},{"body":{"nodeType":"YulBlock","src":"602:124:23","statements":[{"nodeType":"YulAssignment","src":"612:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"634:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"621:12:23"},"nodeType":"YulFunctionCall","src":"621:20:23"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"612:5:23"}]},{"body":{"nodeType":"YulBlock","src":"704:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"713:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"716:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"706:6:23"},"nodeType":"YulFunctionCall","src":"706:12:23"},"nodeType":"YulExpressionStatement","src":"706:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"663:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"674:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"689:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"694:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"685:3:23"},"nodeType":"YulFunctionCall","src":"685:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"698:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"681:3:23"},"nodeType":"YulFunctionCall","src":"681:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"670:3:23"},"nodeType":"YulFunctionCall","src":"670:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"660:2:23"},"nodeType":"YulFunctionCall","src":"660:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"653:6:23"},"nodeType":"YulFunctionCall","src":"653:50:23"},"nodeType":"YulIf","src":"650:70:23"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"581:6:23","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"592:5:23","type":""}],"src":"553:173:23"},{"body":{"nodeType":"YulBlock","src":"834:229:23","statements":[{"body":{"nodeType":"YulBlock","src":"880:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"889:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"892:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"882:6:23"},"nodeType":"YulFunctionCall","src":"882:12:23"},"nodeType":"YulExpressionStatement","src":"882:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"855:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"864:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"851:3:23"},"nodeType":"YulFunctionCall","src":"851:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"876:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"847:3:23"},"nodeType":"YulFunctionCall","src":"847:32:23"},"nodeType":"YulIf","src":"844:52:23"},{"nodeType":"YulAssignment","src":"905:38:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"933:9:23"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"915:17:23"},"nodeType":"YulFunctionCall","src":"915:28:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"905:6:23"}]},{"nodeType":"YulAssignment","src":"952:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"985:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"996:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:23"},"nodeType":"YulFunctionCall","src":"981:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"962:18:23"},"nodeType":"YulFunctionCall","src":"962:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"952:6:23"}]},{"nodeType":"YulAssignment","src":"1009:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1042:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1053:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1038:3:23"},"nodeType":"YulFunctionCall","src":"1038:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1019:18:23"},"nodeType":"YulFunctionCall","src":"1019:38:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1009:6:23"}]}]},"name":"abi_decode_tuple_t_uint32t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"784:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"795:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"807:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"815:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"823:6:23","type":""}],"src":"731:332:23"},{"body":{"nodeType":"YulBlock","src":"1207:667:23","statements":[{"body":{"nodeType":"YulBlock","src":"1254:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1263:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1266:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1256:6:23"},"nodeType":"YulFunctionCall","src":"1256:12:23"},"nodeType":"YulExpressionStatement","src":"1256:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1228:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1237:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1224:3:23"},"nodeType":"YulFunctionCall","src":"1224:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1249:3:23","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1220:3:23"},"nodeType":"YulFunctionCall","src":"1220:33:23"},"nodeType":"YulIf","src":"1217:53:23"},{"nodeType":"YulAssignment","src":"1279:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1302:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1289:12:23"},"nodeType":"YulFunctionCall","src":"1289:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1279:6:23"}]},{"nodeType":"YulAssignment","src":"1321:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1353:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1364:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1349:3:23"},"nodeType":"YulFunctionCall","src":"1349:18:23"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"1331:17:23"},"nodeType":"YulFunctionCall","src":"1331:37:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1321:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"1377:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1408:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1419:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1404:3:23"},"nodeType":"YulFunctionCall","src":"1404:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1391:12:23"},"nodeType":"YulFunctionCall","src":"1391:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1381:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1432:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"1442:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1436:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1487:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1496:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1499:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1489:6:23"},"nodeType":"YulFunctionCall","src":"1489:12:23"},"nodeType":"YulExpressionStatement","src":"1489:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1475:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1483:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1472:2:23"},"nodeType":"YulFunctionCall","src":"1472:14:23"},"nodeType":"YulIf","src":"1469:34:23"},{"nodeType":"YulVariableDeclaration","src":"1512:32:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1526:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"1537:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1522:3:23"},"nodeType":"YulFunctionCall","src":"1522:22:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"1516:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1592:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1601:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1604:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1594:6:23"},"nodeType":"YulFunctionCall","src":"1594:12:23"},"nodeType":"YulExpressionStatement","src":"1594:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1571:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"1575:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1567:3:23"},"nodeType":"YulFunctionCall","src":"1567:13:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1582:7:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1563:3:23"},"nodeType":"YulFunctionCall","src":"1563:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1556:6:23"},"nodeType":"YulFunctionCall","src":"1556:35:23"},"nodeType":"YulIf","src":"1553:55:23"},{"nodeType":"YulVariableDeclaration","src":"1617:30:23","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1644:2:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1631:12:23"},"nodeType":"YulFunctionCall","src":"1631:16:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1621:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1674:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1683:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1686:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1676:6:23"},"nodeType":"YulFunctionCall","src":"1676:12:23"},"nodeType":"YulExpressionStatement","src":"1676:12:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1662:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"1670:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1659:2:23"},"nodeType":"YulFunctionCall","src":"1659:14:23"},"nodeType":"YulIf","src":"1656:34:23"},{"body":{"nodeType":"YulBlock","src":"1740:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1749:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1752:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1742:6:23"},"nodeType":"YulFunctionCall","src":"1742:12:23"},"nodeType":"YulExpressionStatement","src":"1742:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1713:2:23"},{"name":"length","nodeType":"YulIdentifier","src":"1717:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1709:3:23"},"nodeType":"YulFunctionCall","src":"1709:15:23"},{"kind":"number","nodeType":"YulLiteral","src":"1726:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1705:3:23"},"nodeType":"YulFunctionCall","src":"1705:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1731:7:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1702:2:23"},"nodeType":"YulFunctionCall","src":"1702:37:23"},"nodeType":"YulIf","src":"1699:57:23"},{"nodeType":"YulAssignment","src":"1765:21:23","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"1779:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"1783:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1775:3:23"},"nodeType":"YulFunctionCall","src":"1775:11:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1765:6:23"}]},{"nodeType":"YulAssignment","src":"1795:16:23","value":{"name":"length","nodeType":"YulIdentifier","src":"1805:6:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1795:6:23"}]},{"nodeType":"YulAssignment","src":"1820:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1853:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1864:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1849:3:23"},"nodeType":"YulFunctionCall","src":"1849:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1830:18:23"},"nodeType":"YulFunctionCall","src":"1830:38:23"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1820:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint32t_bytes_calldata_ptrt_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1141:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1152:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1164:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1172:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1180:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1188:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1196:6:23","type":""}],"src":"1068:806:23"},{"body":{"nodeType":"YulBlock","src":"2011:102:23","statements":[{"nodeType":"YulAssignment","src":"2021:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2033:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2044:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2029:3:23"},"nodeType":"YulFunctionCall","src":"2029:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2021:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2063:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2078:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2094:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2099:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2090:3:23"},"nodeType":"YulFunctionCall","src":"2090:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"2103:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2086:3:23"},"nodeType":"YulFunctionCall","src":"2086:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2074:3:23"},"nodeType":"YulFunctionCall","src":"2074:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2056:6:23"},"nodeType":"YulFunctionCall","src":"2056:51:23"},"nodeType":"YulExpressionStatement","src":"2056:51:23"}]},"name":"abi_encode_tuple_t_contract$_IInterchainQueryRouter_$4467__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1980:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1991:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2002:4:23","type":""}],"src":"1879:234:23"},{"body":{"nodeType":"YulBlock","src":"2269:204:23","statements":[{"nodeType":"YulAssignment","src":"2279:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2291:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2302:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2287:3:23"},"nodeType":"YulFunctionCall","src":"2287:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2279:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2321:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"2332:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2314:6:23"},"nodeType":"YulFunctionCall","src":"2314:25:23"},"nodeType":"YulExpressionStatement","src":"2314:25:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2359:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2370:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2355:3:23"},"nodeType":"YulFunctionCall","src":"2355:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"2379:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2395:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2400:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2391:3:23"},"nodeType":"YulFunctionCall","src":"2391:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"2404:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:23"},"nodeType":"YulFunctionCall","src":"2387:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2375:3:23"},"nodeType":"YulFunctionCall","src":"2375:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2348:6:23"},"nodeType":"YulFunctionCall","src":"2348:60:23"},"nodeType":"YulExpressionStatement","src":"2348:60:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2428:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2439:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2424:3:23"},"nodeType":"YulFunctionCall","src":"2424:18:23"},{"arguments":[{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"2458:6:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2451:6:23"},"nodeType":"YulFunctionCall","src":"2451:14:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2444:6:23"},"nodeType":"YulFunctionCall","src":"2444:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2417:6:23"},"nodeType":"YulFunctionCall","src":"2417:50:23"},"nodeType":"YulExpressionStatement","src":"2417:50:23"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2222:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2233:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2241:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2249:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2260:4:23","type":""}],"src":"2118:355:23"},{"body":{"nodeType":"YulBlock","src":"2579:102:23","statements":[{"nodeType":"YulAssignment","src":"2589:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2601:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2612:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2597:3:23"},"nodeType":"YulFunctionCall","src":"2597:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2589:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2631:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2646:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2662:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2667:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2658:3:23"},"nodeType":"YulFunctionCall","src":"2658:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"2671:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2654:3:23"},"nodeType":"YulFunctionCall","src":"2654:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2642:3:23"},"nodeType":"YulFunctionCall","src":"2642:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2624:6:23"},"nodeType":"YulFunctionCall","src":"2624:51:23"},"nodeType":"YulExpressionStatement","src":"2624:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2548:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2559:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2570:4:23","type":""}],"src":"2478:203:23"},{"body":{"nodeType":"YulBlock","src":"2718:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2735:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2742:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2747:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2738:3:23"},"nodeType":"YulFunctionCall","src":"2738:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2728:6:23"},"nodeType":"YulFunctionCall","src":"2728:31:23"},"nodeType":"YulExpressionStatement","src":"2728:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2775:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2778:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2768:6:23"},"nodeType":"YulFunctionCall","src":"2768:15:23"},"nodeType":"YulExpressionStatement","src":"2768:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2799:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2802:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2792:6:23"},"nodeType":"YulFunctionCall","src":"2792:15:23"},"nodeType":"YulExpressionStatement","src":"2792:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2686:127:23"},{"body":{"nodeType":"YulBlock","src":"2871:666:23","statements":[{"body":{"nodeType":"YulBlock","src":"2920:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2929:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2932:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2922:6:23"},"nodeType":"YulFunctionCall","src":"2922:12:23"},"nodeType":"YulExpressionStatement","src":"2922:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2899:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2907:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2895:3:23"},"nodeType":"YulFunctionCall","src":"2895:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"2914:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2891:3:23"},"nodeType":"YulFunctionCall","src":"2891:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2884:6:23"},"nodeType":"YulFunctionCall","src":"2884:35:23"},"nodeType":"YulIf","src":"2881:55:23"},{"nodeType":"YulVariableDeclaration","src":"2945:30:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2968:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2955:12:23"},"nodeType":"YulFunctionCall","src":"2955:20:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2949:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2984:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2994:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2988:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3035:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3037:16:23"},"nodeType":"YulFunctionCall","src":"3037:18:23"},"nodeType":"YulExpressionStatement","src":"3037:18:23"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3027:2:23"},{"name":"_2","nodeType":"YulIdentifier","src":"3031:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3024:2:23"},"nodeType":"YulFunctionCall","src":"3024:10:23"},"nodeType":"YulIf","src":"3021:36:23"},{"nodeType":"YulVariableDeclaration","src":"3066:17:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3080:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3076:3:23"},"nodeType":"YulFunctionCall","src":"3076:7:23"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3070:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3092:23:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3112:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3106:5:23"},"nodeType":"YulFunctionCall","src":"3106:9:23"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3096:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3124:71:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3146:6:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3170:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"3174:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3166:3:23"},"nodeType":"YulFunctionCall","src":"3166:13:23"},{"name":"_3","nodeType":"YulIdentifier","src":"3181:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3162:3:23"},"nodeType":"YulFunctionCall","src":"3162:22:23"},{"kind":"number","nodeType":"YulLiteral","src":"3186:2:23","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3158:3:23"},"nodeType":"YulFunctionCall","src":"3158:31:23"},{"name":"_3","nodeType":"YulIdentifier","src":"3191:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3154:3:23"},"nodeType":"YulFunctionCall","src":"3154:40:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3142:3:23"},"nodeType":"YulFunctionCall","src":"3142:53:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3128:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3254:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3256:16:23"},"nodeType":"YulFunctionCall","src":"3256:18:23"},"nodeType":"YulExpressionStatement","src":"3256:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3213:10:23"},{"name":"_2","nodeType":"YulIdentifier","src":"3225:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3210:2:23"},"nodeType":"YulFunctionCall","src":"3210:18:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3233:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3245:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3230:2:23"},"nodeType":"YulFunctionCall","src":"3230:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3207:2:23"},"nodeType":"YulFunctionCall","src":"3207:46:23"},"nodeType":"YulIf","src":"3204:72:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3292:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3296:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3285:6:23"},"nodeType":"YulFunctionCall","src":"3285:22:23"},"nodeType":"YulExpressionStatement","src":"3285:22:23"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3323:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3331:2:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3316:6:23"},"nodeType":"YulFunctionCall","src":"3316:18:23"},"nodeType":"YulExpressionStatement","src":"3316:18:23"},{"body":{"nodeType":"YulBlock","src":"3382:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3391:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3394:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3384:6:23"},"nodeType":"YulFunctionCall","src":"3384:12:23"},"nodeType":"YulExpressionStatement","src":"3384:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3357:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3365:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3353:3:23"},"nodeType":"YulFunctionCall","src":"3353:15:23"},{"kind":"number","nodeType":"YulLiteral","src":"3370:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3349:3:23"},"nodeType":"YulFunctionCall","src":"3349:26:23"},{"name":"end","nodeType":"YulIdentifier","src":"3377:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3346:2:23"},"nodeType":"YulFunctionCall","src":"3346:35:23"},"nodeType":"YulIf","src":"3343:55:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3424:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3432:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3420:3:23"},"nodeType":"YulFunctionCall","src":"3420:17:23"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3443:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3451:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3439:3:23"},"nodeType":"YulFunctionCall","src":"3439:17:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3458:2:23"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3407:12:23"},"nodeType":"YulFunctionCall","src":"3407:54:23"},"nodeType":"YulExpressionStatement","src":"3407:54:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3485:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3493:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3481:3:23"},"nodeType":"YulFunctionCall","src":"3481:15:23"},{"kind":"number","nodeType":"YulLiteral","src":"3498:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3477:3:23"},"nodeType":"YulFunctionCall","src":"3477:26:23"},{"kind":"number","nodeType":"YulLiteral","src":"3505:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3470:6:23"},"nodeType":"YulFunctionCall","src":"3470:37:23"},"nodeType":"YulExpressionStatement","src":"3470:37:23"},{"nodeType":"YulAssignment","src":"3516:15:23","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3525:6:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3516:5:23"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2845:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"2853:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2861:5:23","type":""}],"src":"2818:719:23"},{"body":{"nodeType":"YulBlock","src":"3726:770:23","statements":[{"body":{"nodeType":"YulBlock","src":"3773:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3782:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3785:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3775:6:23"},"nodeType":"YulFunctionCall","src":"3775:12:23"},"nodeType":"YulExpressionStatement","src":"3775:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3747:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"3756:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3743:3:23"},"nodeType":"YulFunctionCall","src":"3743:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"3768:3:23","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3739:3:23"},"nodeType":"YulFunctionCall","src":"3739:33:23"},"nodeType":"YulIf","src":"3736:53:23"},{"nodeType":"YulVariableDeclaration","src":"3798:37:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3825:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3812:12:23"},"nodeType":"YulFunctionCall","src":"3812:23:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3802:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3844:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"3854:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3848:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3899:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3908:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3911:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3901:6:23"},"nodeType":"YulFunctionCall","src":"3901:12:23"},"nodeType":"YulExpressionStatement","src":"3901:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3887:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3895:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3884:2:23"},"nodeType":"YulFunctionCall","src":"3884:14:23"},"nodeType":"YulIf","src":"3881:34:23"},{"nodeType":"YulAssignment","src":"3924:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3956:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"3967:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3952:3:23"},"nodeType":"YulFunctionCall","src":"3952:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3976:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"3934:17:23"},"nodeType":"YulFunctionCall","src":"3934:50:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3924:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"3993:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4026:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4037:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4022:3:23"},"nodeType":"YulFunctionCall","src":"4022:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4009:12:23"},"nodeType":"YulFunctionCall","src":"4009:32:23"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"3997:8:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4070:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4079:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4082:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4072:6:23"},"nodeType":"YulFunctionCall","src":"4072:12:23"},"nodeType":"YulExpressionStatement","src":"4072:12:23"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4056:8:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4066:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4053:2:23"},"nodeType":"YulFunctionCall","src":"4053:16:23"},"nodeType":"YulIf","src":"4050:36:23"},{"nodeType":"YulAssignment","src":"4095:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4127:9:23"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4138:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4123:3:23"},"nodeType":"YulFunctionCall","src":"4123:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4149:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4105:17:23"},"nodeType":"YulFunctionCall","src":"4105:52:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4095:6:23"}]},{"nodeType":"YulAssignment","src":"4166:47:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4198:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4209:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4194:3:23"},"nodeType":"YulFunctionCall","src":"4194:18:23"}],"functionName":{"name":"abi_decode_uint32","nodeType":"YulIdentifier","src":"4176:17:23"},"nodeType":"YulFunctionCall","src":"4176:37:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4166:6:23"}]},{"nodeType":"YulAssignment","src":"4222:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4249:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4260:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4245:3:23"},"nodeType":"YulFunctionCall","src":"4245:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4232:12:23"},"nodeType":"YulFunctionCall","src":"4232:32:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4222:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"4273:49:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4306:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4317:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4302:3:23"},"nodeType":"YulFunctionCall","src":"4302:19:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4289:12:23"},"nodeType":"YulFunctionCall","src":"4289:33:23"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4277:8:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4351:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4360:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4363:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4353:6:23"},"nodeType":"YulFunctionCall","src":"4353:12:23"},"nodeType":"YulExpressionStatement","src":"4353:12:23"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4337:8:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4347:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4334:2:23"},"nodeType":"YulFunctionCall","src":"4334:16:23"},"nodeType":"YulIf","src":"4331:36:23"},{"nodeType":"YulAssignment","src":"4376:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4408:9:23"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4419:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4404:3:23"},"nodeType":"YulFunctionCall","src":"4404:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4430:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4386:17:23"},"nodeType":"YulFunctionCall","src":"4386:52:23"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4376:6:23"}]},{"nodeType":"YulAssignment","src":"4447:43:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4474:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4485:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4470:3:23"},"nodeType":"YulFunctionCall","src":"4470:19:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4457:12:23"},"nodeType":"YulFunctionCall","src":"4457:33:23"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4447:6:23"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint32t_uint256t_string_memory_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3652:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3663:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3675:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3683:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3691:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3699:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3707:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3715:6:23","type":""}],"src":"3542:954:23"},{"body":{"nodeType":"YulBlock","src":"4588:167:23","statements":[{"body":{"nodeType":"YulBlock","src":"4634:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4643:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4646:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4636:6:23"},"nodeType":"YulFunctionCall","src":"4636:12:23"},"nodeType":"YulExpressionStatement","src":"4636:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4609:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4618:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4605:3:23"},"nodeType":"YulFunctionCall","src":"4605:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4630:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4601:3:23"},"nodeType":"YulFunctionCall","src":"4601:32:23"},"nodeType":"YulIf","src":"4598:52:23"},{"nodeType":"YulAssignment","src":"4659:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4682:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4669:12:23"},"nodeType":"YulFunctionCall","src":"4669:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4659:6:23"}]},{"nodeType":"YulAssignment","src":"4701:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4734:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4745:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4730:3:23"},"nodeType":"YulFunctionCall","src":"4730:18:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4711:18:23"},"nodeType":"YulFunctionCall","src":"4711:38:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4701:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4546:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4557:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4569:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4577:6:23","type":""}],"src":"4501:254:23"},{"body":{"nodeType":"YulBlock","src":"4937:265:23","statements":[{"nodeType":"YulAssignment","src":"4947:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4959:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4970:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4955:3:23"},"nodeType":"YulFunctionCall","src":"4955:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4947:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4990:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5005:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"5013:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5001:3:23"},"nodeType":"YulFunctionCall","src":"5001:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4983:6:23"},"nodeType":"YulFunctionCall","src":"4983:42:23"},"nodeType":"YulExpressionStatement","src":"4983:42:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5045:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5056:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5041:3:23"},"nodeType":"YulFunctionCall","src":"5041:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5065:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5081:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5086:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5077:3:23"},"nodeType":"YulFunctionCall","src":"5077:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"5090:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5073:3:23"},"nodeType":"YulFunctionCall","src":"5073:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5061:3:23"},"nodeType":"YulFunctionCall","src":"5061:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5034:6:23"},"nodeType":"YulFunctionCall","src":"5034:60:23"},"nodeType":"YulExpressionStatement","src":"5034:60:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5114:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5125:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5110:3:23"},"nodeType":"YulFunctionCall","src":"5110:18:23"},{"name":"value2","nodeType":"YulIdentifier","src":"5130:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5103:6:23"},"nodeType":"YulFunctionCall","src":"5103:34:23"},"nodeType":"YulExpressionStatement","src":"5103:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5157:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5168:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5153:3:23"},"nodeType":"YulFunctionCall","src":"5153:18:23"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"5187:6:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5180:6:23"},"nodeType":"YulFunctionCall","src":"5180:14:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5173:6:23"},"nodeType":"YulFunctionCall","src":"5173:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5146:6:23"},"nodeType":"YulFunctionCall","src":"5146:50:23"},"nodeType":"YulExpressionStatement","src":"5146:50:23"}]},"name":"abi_encode_tuple_t_uint32_t_address_t_uint256_t_bool__to_t_uint32_t_address_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4882:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4893:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4901:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4909:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4917:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4928:4:23","type":""}],"src":"4760:442:23"},{"body":{"nodeType":"YulBlock","src":"5325:102:23","statements":[{"nodeType":"YulAssignment","src":"5335:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5347:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5358:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5343:3:23"},"nodeType":"YulFunctionCall","src":"5343:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5335:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5377:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5392:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5408:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5413:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5404:3:23"},"nodeType":"YulFunctionCall","src":"5404:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"5417:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5400:3:23"},"nodeType":"YulFunctionCall","src":"5400:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5388:3:23"},"nodeType":"YulFunctionCall","src":"5388:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5370:6:23"},"nodeType":"YulFunctionCall","src":"5370:51:23"},"nodeType":"YulExpressionStatement","src":"5370:51:23"}]},"name":"abi_encode_tuple_t_contract$_IMailbox_$4488__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5294:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5305:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5316:4:23","type":""}],"src":"5207:220:23"},{"body":{"nodeType":"YulBlock","src":"5502:110:23","statements":[{"body":{"nodeType":"YulBlock","src":"5548:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5557:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5560:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5550:6:23"},"nodeType":"YulFunctionCall","src":"5550:12:23"},"nodeType":"YulExpressionStatement","src":"5550:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5523:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5532:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5519:3:23"},"nodeType":"YulFunctionCall","src":"5519:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"5544:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5515:3:23"},"nodeType":"YulFunctionCall","src":"5515:32:23"},"nodeType":"YulIf","src":"5512:52:23"},{"nodeType":"YulAssignment","src":"5573:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5596:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5583:12:23"},"nodeType":"YulFunctionCall","src":"5583:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5573:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5468:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5479:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5491:6:23","type":""}],"src":"5432:180:23"},{"body":{"nodeType":"YulBlock","src":"5850:383:23","statements":[{"nodeType":"YulAssignment","src":"5860:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5872:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5883:3:23","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5868:3:23"},"nodeType":"YulFunctionCall","src":"5868:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5860:4:23"}]},{"nodeType":"YulVariableDeclaration","src":"5896:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5914:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5919:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5910:3:23"},"nodeType":"YulFunctionCall","src":"5910:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"5923:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5906:3:23"},"nodeType":"YulFunctionCall","src":"5906:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5900:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5941:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5956:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"5964:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5952:3:23"},"nodeType":"YulFunctionCall","src":"5952:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5934:6:23"},"nodeType":"YulFunctionCall","src":"5934:34:23"},"nodeType":"YulExpressionStatement","src":"5934:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5988:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5999:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5984:3:23"},"nodeType":"YulFunctionCall","src":"5984:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6008:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6016:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6004:3:23"},"nodeType":"YulFunctionCall","src":"6004:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5977:6:23"},"nodeType":"YulFunctionCall","src":"5977:51:23"},"nodeType":"YulExpressionStatement","src":"5977:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6048:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6059:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6044:3:23"},"nodeType":"YulFunctionCall","src":"6044:18:23"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6068:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"6076:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6064:3:23"},"nodeType":"YulFunctionCall","src":"6064:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6037:6:23"},"nodeType":"YulFunctionCall","src":"6037:43:23"},"nodeType":"YulExpressionStatement","src":"6037:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6100:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6111:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6096:3:23"},"nodeType":"YulFunctionCall","src":"6096:18:23"},{"name":"value3","nodeType":"YulIdentifier","src":"6116:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6089:6:23"},"nodeType":"YulFunctionCall","src":"6089:34:23"},"nodeType":"YulExpressionStatement","src":"6089:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6143:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6154:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6139:3:23"},"nodeType":"YulFunctionCall","src":"6139:19:23"},{"name":"value4","nodeType":"YulIdentifier","src":"6160:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6132:6:23"},"nodeType":"YulFunctionCall","src":"6132:35:23"},"nodeType":"YulExpressionStatement","src":"6132:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6187:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6198:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6183:3:23"},"nodeType":"YulFunctionCall","src":"6183:19:23"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"6218:6:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6211:6:23"},"nodeType":"YulFunctionCall","src":"6211:14:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6204:6:23"},"nodeType":"YulFunctionCall","src":"6204:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6176:6:23"},"nodeType":"YulFunctionCall","src":"6176:51:23"},"nodeType":"YulExpressionStatement","src":"6176:51:23"}]},"name":"abi_encode_tuple_t_address_t_uint32_t_address_t_uint256_t_uint256_t_bool__to_t_address_t_uint32_t_address_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5779:9:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"5790:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5798:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5806:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5814:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5822:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5830:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5841:4:23","type":""}],"src":"5617:616:23"},{"body":{"nodeType":"YulBlock","src":"6371:102:23","statements":[{"nodeType":"YulAssignment","src":"6381:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6393:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6404:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6389:3:23"},"nodeType":"YulFunctionCall","src":"6389:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6381:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6423:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6438:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6454:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"6459:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6450:3:23"},"nodeType":"YulFunctionCall","src":"6450:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"6463:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6446:3:23"},"nodeType":"YulFunctionCall","src":"6446:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6434:3:23"},"nodeType":"YulFunctionCall","src":"6434:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6416:6:23"},"nodeType":"YulFunctionCall","src":"6416:51:23"},"nodeType":"YulExpressionStatement","src":"6416:51:23"}]},"name":"abi_encode_tuple_t_contract$_IInterchainGasPaymaster_$4451__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6340:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6351:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6362:4:23","type":""}],"src":"6238:235:23"},{"body":{"nodeType":"YulBlock","src":"6548:116:23","statements":[{"body":{"nodeType":"YulBlock","src":"6594:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6603:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6606:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6596:6:23"},"nodeType":"YulFunctionCall","src":"6596:12:23"},"nodeType":"YulExpressionStatement","src":"6596:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6569:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"6578:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6565:3:23"},"nodeType":"YulFunctionCall","src":"6565:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"6590:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6561:3:23"},"nodeType":"YulFunctionCall","src":"6561:32:23"},"nodeType":"YulIf","src":"6558:52:23"},{"nodeType":"YulAssignment","src":"6619:39:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6648:9:23"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6629:18:23"},"nodeType":"YulFunctionCall","src":"6629:29:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6619:6:23"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6514:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6525:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6537:6:23","type":""}],"src":"6478:186:23"},{"body":{"nodeType":"YulBlock","src":"6796:136:23","statements":[{"nodeType":"YulAssignment","src":"6806:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6818:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6829:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6814:3:23"},"nodeType":"YulFunctionCall","src":"6814:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6806:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6848:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6863:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6871:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6859:3:23"},"nodeType":"YulFunctionCall","src":"6859:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6841:6:23"},"nodeType":"YulFunctionCall","src":"6841:42:23"},"nodeType":"YulExpressionStatement","src":"6841:42:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6903:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6914:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6899:3:23"},"nodeType":"YulFunctionCall","src":"6899:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"6919:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6892:6:23"},"nodeType":"YulFunctionCall","src":"6892:34:23"},"nodeType":"YulExpressionStatement","src":"6892:34:23"}]},"name":"abi_encode_tuple_t_uint32_t_uint256__to_t_uint32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6757:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6768:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6776:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6787:4:23","type":""}],"src":"6669:263:23"},{"body":{"nodeType":"YulBlock","src":"7018:103:23","statements":[{"body":{"nodeType":"YulBlock","src":"7064:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7073:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7076:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7066:6:23"},"nodeType":"YulFunctionCall","src":"7066:12:23"},"nodeType":"YulExpressionStatement","src":"7066:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7039:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"7048:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7035:3:23"},"nodeType":"YulFunctionCall","src":"7035:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"7060:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7031:3:23"},"nodeType":"YulFunctionCall","src":"7031:32:23"},"nodeType":"YulIf","src":"7028:52:23"},{"nodeType":"YulAssignment","src":"7089:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7105:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7099:5:23"},"nodeType":"YulFunctionCall","src":"7099:16:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7089:6:23"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6984:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6995:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7007:6:23","type":""}],"src":"6937:184:23"},{"body":{"nodeType":"YulBlock","src":"7300:169:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7317:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7328:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7310:6:23"},"nodeType":"YulFunctionCall","src":"7310:21:23"},"nodeType":"YulExpressionStatement","src":"7310:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7351:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7362:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7347:3:23"},"nodeType":"YulFunctionCall","src":"7347:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"7367:2:23","type":"","value":"19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7340:6:23"},"nodeType":"YulFunctionCall","src":"7340:30:23"},"nodeType":"YulExpressionStatement","src":"7340:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7390:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7401:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7386:3:23"},"nodeType":"YulFunctionCall","src":"7386:18:23"},{"hexValue":"496e76616c69642044657374696e6174696f6e","kind":"string","nodeType":"YulLiteral","src":"7406:21:23","type":"","value":"Invalid Destination"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7379:6:23"},"nodeType":"YulFunctionCall","src":"7379:49:23"},"nodeType":"YulExpressionStatement","src":"7379:49:23"},{"nodeType":"YulAssignment","src":"7437:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7449:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7460:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7445:3:23"},"nodeType":"YulFunctionCall","src":"7445:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7437:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_c2556b2f0738cda755e8236a64d7e89ba3fe6369211a88de912f9face6e2903e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7277:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7291:4:23","type":""}],"src":"7126:343:23"},{"body":{"nodeType":"YulBlock","src":"7675:297:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7692:3:23"},{"name":"value0","nodeType":"YulIdentifier","src":"7697:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7685:6:23"},"nodeType":"YulFunctionCall","src":"7685:19:23"},"nodeType":"YulExpressionStatement","src":"7685:19:23"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7724:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7729:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7720:3:23"},"nodeType":"YulFunctionCall","src":"7720:12:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7742:3:23","type":"","value":"224"},{"name":"value1","nodeType":"YulIdentifier","src":"7747:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7738:3:23"},"nodeType":"YulFunctionCall","src":"7738:16:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7760:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"7765:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7756:3:23"},"nodeType":"YulFunctionCall","src":"7756:20:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7734:3:23"},"nodeType":"YulFunctionCall","src":"7734:43:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7713:6:23"},"nodeType":"YulFunctionCall","src":"7713:65:23"},"nodeType":"YulExpressionStatement","src":"7713:65:23"},{"nodeType":"YulVariableDeclaration","src":"7787:41:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7801:26:23","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7797:3:23"},"nodeType":"YulFunctionCall","src":"7797:31:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7791:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7848:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7853:2:23","type":"","value":"36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7844:3:23"},"nodeType":"YulFunctionCall","src":"7844:12:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7866:2:23","type":"","value":"96"},{"name":"value2","nodeType":"YulIdentifier","src":"7870:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7862:3:23"},"nodeType":"YulFunctionCall","src":"7862:15:23"},{"name":"_1","nodeType":"YulIdentifier","src":"7879:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7858:3:23"},"nodeType":"YulFunctionCall","src":"7858:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7837:6:23"},"nodeType":"YulFunctionCall","src":"7837:46:23"},"nodeType":"YulExpressionStatement","src":"7837:46:23"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7903:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7908:2:23","type":"","value":"56"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7899:3:23"},"nodeType":"YulFunctionCall","src":"7899:12:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7921:2:23","type":"","value":"96"},{"name":"value3","nodeType":"YulIdentifier","src":"7925:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7917:3:23"},"nodeType":"YulFunctionCall","src":"7917:15:23"},{"name":"_1","nodeType":"YulIdentifier","src":"7934:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7913:3:23"},"nodeType":"YulFunctionCall","src":"7913:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7892:6:23"},"nodeType":"YulFunctionCall","src":"7892:46:23"},"nodeType":"YulExpressionStatement","src":"7892:46:23"},{"nodeType":"YulAssignment","src":"7947:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7958:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"7963:2:23","type":"","value":"76"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7954:3:23"},"nodeType":"YulFunctionCall","src":"7954:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7947:3:23"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_uint32_t_address_t_address__to_t_bytes32_t_uint32_t_address_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7627:3:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7632:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7640:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7648:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7656:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7667:3:23","type":""}],"src":"7474:498:23"},{"body":{"nodeType":"YulBlock","src":"8151:162:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8168:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8179:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8161:6:23"},"nodeType":"YulFunctionCall","src":"8161:21:23"},"nodeType":"YulExpressionStatement","src":"8161:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8202:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8213:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8198:3:23"},"nodeType":"YulFunctionCall","src":"8198:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8218:2:23","type":"","value":"12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8191:6:23"},"nodeType":"YulFunctionCall","src":"8191:30:23"},"nodeType":"YulExpressionStatement","src":"8191:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8241:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8252:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8237:3:23"},"nodeType":"YulFunctionCall","src":"8237:18:23"},{"hexValue":"756e617574686f72697a6564","kind":"string","nodeType":"YulLiteral","src":"8257:14:23","type":"","value":"unauthorized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8230:6:23"},"nodeType":"YulFunctionCall","src":"8230:42:23"},"nodeType":"YulExpressionStatement","src":"8230:42:23"},{"nodeType":"YulAssignment","src":"8281:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8293:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8304:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8289:3:23"},"nodeType":"YulFunctionCall","src":"8289:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8281:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8128:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8142:4:23","type":""}],"src":"7977:336:23"},{"body":{"nodeType":"YulBlock","src":"8492:167:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8509:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8520:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8502:6:23"},"nodeType":"YulFunctionCall","src":"8502:21:23"},"nodeType":"YulExpressionStatement","src":"8502:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8543:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8554:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8539:3:23"},"nodeType":"YulFunctionCall","src":"8539:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8559:2:23","type":"","value":"17"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8532:6:23"},"nodeType":"YulFunctionCall","src":"8532:30:23"},"nodeType":"YulExpressionStatement","src":"8532:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8582:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8593:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8578:3:23"},"nodeType":"YulFunctionCall","src":"8578:18:23"},{"hexValue":"496e76616c69642050726f6d6f74696f6e","kind":"string","nodeType":"YulLiteral","src":"8598:19:23","type":"","value":"Invalid Promotion"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8571:6:23"},"nodeType":"YulFunctionCall","src":"8571:47:23"},"nodeType":"YulExpressionStatement","src":"8571:47:23"},{"nodeType":"YulAssignment","src":"8627:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8639:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8650:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8635:3:23"},"nodeType":"YulFunctionCall","src":"8635:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8627:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_6f40ae2896ad121a1cccc8ecbad485b8bf64b8051c59b33816d2ceafe3540118__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8469:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8483:4:23","type":""}],"src":"8318:341:23"},{"body":{"nodeType":"YulBlock","src":"8838:164:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8855:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8866:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8848:6:23"},"nodeType":"YulFunctionCall","src":"8848:21:23"},"nodeType":"YulExpressionStatement","src":"8848:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8889:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8900:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8885:3:23"},"nodeType":"YulFunctionCall","src":"8885:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"8905:2:23","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8878:6:23"},"nodeType":"YulFunctionCall","src":"8878:30:23"},"nodeType":"YulExpressionStatement","src":"8878:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8928:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8939:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8924:3:23"},"nodeType":"YulFunctionCall","src":"8924:18:23"},{"hexValue":"4e6f206d6f726520636c61696d73","kind":"string","nodeType":"YulLiteral","src":"8944:16:23","type":"","value":"No more claims"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8917:6:23"},"nodeType":"YulFunctionCall","src":"8917:44:23"},"nodeType":"YulExpressionStatement","src":"8917:44:23"},{"nodeType":"YulAssignment","src":"8970:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8982:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"8993:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8978:3:23"},"nodeType":"YulFunctionCall","src":"8978:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8970:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8815:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8829:4:23","type":""}],"src":"8664:338:23"},{"body":{"nodeType":"YulBlock","src":"9060:205:23","statements":[{"nodeType":"YulVariableDeclaration","src":"9070:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"9079:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"9074:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"9139:63:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9164:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"9169:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9160:3:23"},"nodeType":"YulFunctionCall","src":"9160:11:23"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"9183:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"9188:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9179:3:23"},"nodeType":"YulFunctionCall","src":"9179:11:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9173:5:23"},"nodeType":"YulFunctionCall","src":"9173:18:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9153:6:23"},"nodeType":"YulFunctionCall","src":"9153:39:23"},"nodeType":"YulExpressionStatement","src":"9153:39:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9100:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"9103:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9097:2:23"},"nodeType":"YulFunctionCall","src":"9097:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"9111:19:23","statements":[{"nodeType":"YulAssignment","src":"9113:15:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9122:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"9125:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9118:3:23"},"nodeType":"YulFunctionCall","src":"9118:10:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"9113:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"9093:3:23","statements":[]},"src":"9089:113:23"},{"body":{"nodeType":"YulBlock","src":"9228:31:23","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"9241:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"9246:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9237:3:23"},"nodeType":"YulFunctionCall","src":"9237:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"9255:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9230:6:23"},"nodeType":"YulFunctionCall","src":"9230:27:23"},"nodeType":"YulExpressionStatement","src":"9230:27:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"9217:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"9220:6:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9214:2:23"},"nodeType":"YulFunctionCall","src":"9214:13:23"},"nodeType":"YulIf","src":"9211:48:23"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9038:3:23","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9043:3:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"9048:6:23","type":""}],"src":"9007:258:23"},{"body":{"nodeType":"YulBlock","src":"9319:208:23","statements":[{"nodeType":"YulVariableDeclaration","src":"9329:26:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9349:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9343:5:23"},"nodeType":"YulFunctionCall","src":"9343:12:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9333:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9371:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"9376:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9364:6:23"},"nodeType":"YulFunctionCall","src":"9364:19:23"},"nodeType":"YulExpressionStatement","src":"9364:19:23"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9418:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"9425:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9414:3:23"},"nodeType":"YulFunctionCall","src":"9414:16:23"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9436:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"9441:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9432:3:23"},"nodeType":"YulFunctionCall","src":"9432:14:23"},{"name":"length","nodeType":"YulIdentifier","src":"9448:6:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9392:21:23"},"nodeType":"YulFunctionCall","src":"9392:63:23"},"nodeType":"YulExpressionStatement","src":"9392:63:23"},{"nodeType":"YulAssignment","src":"9464:57:23","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9479:3:23"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"9492:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"9500:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9488:3:23"},"nodeType":"YulFunctionCall","src":"9488:15:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9509:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"9505:3:23"},"nodeType":"YulFunctionCall","src":"9505:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9484:3:23"},"nodeType":"YulFunctionCall","src":"9484:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9475:3:23"},"nodeType":"YulFunctionCall","src":"9475:39:23"},{"kind":"number","nodeType":"YulLiteral","src":"9516:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9471:3:23"},"nodeType":"YulFunctionCall","src":"9471:50:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9464:3:23"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9296:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"9303:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9311:3:23","type":""}],"src":"9270:257:23"},{"body":{"nodeType":"YulBlock","src":"9705:201:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9722:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9737:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"9745:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9733:3:23"},"nodeType":"YulFunctionCall","src":"9733:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9715:6:23"},"nodeType":"YulFunctionCall","src":"9715:42:23"},"nodeType":"YulExpressionStatement","src":"9715:42:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9777:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9788:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9773:3:23"},"nodeType":"YulFunctionCall","src":"9773:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"9793:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9766:6:23"},"nodeType":"YulFunctionCall","src":"9766:34:23"},"nodeType":"YulExpressionStatement","src":"9766:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9820:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9831:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9816:3:23"},"nodeType":"YulFunctionCall","src":"9816:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"9836:2:23","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9809:6:23"},"nodeType":"YulFunctionCall","src":"9809:30:23"},"nodeType":"YulExpressionStatement","src":"9809:30:23"},{"nodeType":"YulAssignment","src":"9848:52:23","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9873:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9885:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"9896:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9881:3:23"},"nodeType":"YulFunctionCall","src":"9881:18:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"9856:16:23"},"nodeType":"YulFunctionCall","src":"9856:44:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9848:4:23"}]}]},"name":"abi_encode_tuple_t_uint32_t_bytes32_t_bytes_memory_ptr__to_t_uint32_t_bytes32_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9658:9:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9669:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9677:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9685:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9696:4:23","type":""}],"src":"9532:374:23"},{"body":{"nodeType":"YulBlock","src":"9992:103:23","statements":[{"body":{"nodeType":"YulBlock","src":"10038:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10047:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10050:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10040:6:23"},"nodeType":"YulFunctionCall","src":"10040:12:23"},"nodeType":"YulExpressionStatement","src":"10040:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10013:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"10022:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10009:3:23"},"nodeType":"YulFunctionCall","src":"10009:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"10034:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10005:3:23"},"nodeType":"YulFunctionCall","src":"10005:32:23"},"nodeType":"YulIf","src":"10002:52:23"},{"nodeType":"YulAssignment","src":"10063:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10079:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10073:5:23"},"nodeType":"YulFunctionCall","src":"10073:16:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10063:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9958:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9969:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9981:6:23","type":""}],"src":"9911:184:23"},{"body":{"nodeType":"YulBlock","src":"10274:166:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10291:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10302:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10284:6:23"},"nodeType":"YulFunctionCall","src":"10284:21:23"},"nodeType":"YulExpressionStatement","src":"10284:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10325:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10336:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10321:3:23"},"nodeType":"YulFunctionCall","src":"10321:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"10341:2:23","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10314:6:23"},"nodeType":"YulFunctionCall","src":"10314:30:23"},"nodeType":"YulExpressionStatement","src":"10314:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10364:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10375:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10360:3:23"},"nodeType":"YulFunctionCall","src":"10360:18:23"},{"hexValue":"496e73756666696369656e7420676173","kind":"string","nodeType":"YulLiteral","src":"10380:18:23","type":"","value":"Insufficient gas"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10353:6:23"},"nodeType":"YulFunctionCall","src":"10353:46:23"},"nodeType":"YulExpressionStatement","src":"10353:46:23"},{"nodeType":"YulAssignment","src":"10408:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10431:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:23"},"nodeType":"YulFunctionCall","src":"10416:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10408:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_c634a95a0c3be7dc2b531f1778120b691aa9c64ba93349380e714e28f6712829__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10251:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10265:4:23","type":""}],"src":"10100:340:23"},{"body":{"nodeType":"YulBlock","src":"10640:249:23","statements":[{"nodeType":"YulAssignment","src":"10650:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10662:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10673:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10658:3:23"},"nodeType":"YulFunctionCall","src":"10658:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10650:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10693:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"10704:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10686:6:23"},"nodeType":"YulFunctionCall","src":"10686:25:23"},"nodeType":"YulExpressionStatement","src":"10686:25:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10731:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10742:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10727:3:23"},"nodeType":"YulFunctionCall","src":"10727:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"10751:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"10759:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10747:3:23"},"nodeType":"YulFunctionCall","src":"10747:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10720:6:23"},"nodeType":"YulFunctionCall","src":"10720:51:23"},"nodeType":"YulExpressionStatement","src":"10720:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10791:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10802:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10787:3:23"},"nodeType":"YulFunctionCall","src":"10787:18:23"},{"name":"value2","nodeType":"YulIdentifier","src":"10807:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10780:6:23"},"nodeType":"YulFunctionCall","src":"10780:34:23"},"nodeType":"YulExpressionStatement","src":"10780:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10834:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"10845:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10830:3:23"},"nodeType":"YulFunctionCall","src":"10830:18:23"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"10854:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10870:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"10875:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10866:3:23"},"nodeType":"YulFunctionCall","src":"10866:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"10879:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10862:3:23"},"nodeType":"YulFunctionCall","src":"10862:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10850:3:23"},"nodeType":"YulFunctionCall","src":"10850:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10823:6:23"},"nodeType":"YulFunctionCall","src":"10823:60:23"},"nodeType":"YulExpressionStatement","src":"10823:60:23"}]},"name":"abi_encode_tuple_t_bytes32_t_uint32_t_rational_50000_by_1_t_address__to_t_bytes32_t_uint32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10585:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"10596:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"10604:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10612:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"10620:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10631:4:23","type":""}],"src":"10445:444:23"},{"body":{"nodeType":"YulBlock","src":"10926:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10943:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10950:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"10955:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"10946:3:23"},"nodeType":"YulFunctionCall","src":"10946:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10936:6:23"},"nodeType":"YulFunctionCall","src":"10936:31:23"},"nodeType":"YulExpressionStatement","src":"10936:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10983:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10986:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10976:6:23"},"nodeType":"YulFunctionCall","src":"10976:15:23"},"nodeType":"YulExpressionStatement","src":"10976:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11007:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11010:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11000:6:23"},"nodeType":"YulFunctionCall","src":"11000:15:23"},"nodeType":"YulExpressionStatement","src":"11000:15:23"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"10894:127:23"},{"body":{"nodeType":"YulBlock","src":"11074:80:23","statements":[{"body":{"nodeType":"YulBlock","src":"11101:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11103:16:23"},"nodeType":"YulFunctionCall","src":"11103:18:23"},"nodeType":"YulExpressionStatement","src":"11103:18:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11090:1:23"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11097:1:23"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"11093:3:23"},"nodeType":"YulFunctionCall","src":"11093:6:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"11087:2:23"},"nodeType":"YulFunctionCall","src":"11087:13:23"},"nodeType":"YulIf","src":"11084:39:23"},{"nodeType":"YulAssignment","src":"11132:16:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11143:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"11146:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11139:3:23"},"nodeType":"YulFunctionCall","src":"11139:9:23"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"11132:3:23"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11057:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"11060:1:23","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"11066:3:23","type":""}],"src":"11026:128:23"},{"body":{"nodeType":"YulBlock","src":"11398:367:23","statements":[{"nodeType":"YulAssignment","src":"11408:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11420:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11431:3:23","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11416:3:23"},"nodeType":"YulFunctionCall","src":"11416:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11408:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11451:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"11462:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11444:6:23"},"nodeType":"YulFunctionCall","src":"11444:25:23"},"nodeType":"YulExpressionStatement","src":"11444:25:23"},{"nodeType":"YulVariableDeclaration","src":"11478:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11496:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"11501:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11492:3:23"},"nodeType":"YulFunctionCall","src":"11492:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"11505:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11488:3:23"},"nodeType":"YulFunctionCall","src":"11488:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"11482:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11527:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11538:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11523:3:23"},"nodeType":"YulFunctionCall","src":"11523:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11547:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"11555:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11543:3:23"},"nodeType":"YulFunctionCall","src":"11543:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11516:6:23"},"nodeType":"YulFunctionCall","src":"11516:43:23"},"nodeType":"YulExpressionStatement","src":"11516:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11579:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11590:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11575:3:23"},"nodeType":"YulFunctionCall","src":"11575:18:23"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"11599:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"11607:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11595:3:23"},"nodeType":"YulFunctionCall","src":"11595:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11568:6:23"},"nodeType":"YulFunctionCall","src":"11568:43:23"},"nodeType":"YulExpressionStatement","src":"11568:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11631:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11642:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11627:3:23"},"nodeType":"YulFunctionCall","src":"11627:18:23"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"11651:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"11659:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11647:3:23"},"nodeType":"YulFunctionCall","src":"11647:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11620:6:23"},"nodeType":"YulFunctionCall","src":"11620:51:23"},"nodeType":"YulExpressionStatement","src":"11620:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11691:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11702:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11687:3:23"},"nodeType":"YulFunctionCall","src":"11687:19:23"},{"name":"value4","nodeType":"YulIdentifier","src":"11708:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11680:6:23"},"nodeType":"YulFunctionCall","src":"11680:35:23"},"nodeType":"YulExpressionStatement","src":"11680:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11735:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"11746:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11731:3:23"},"nodeType":"YulFunctionCall","src":"11731:19:23"},{"name":"value5","nodeType":"YulIdentifier","src":"11752:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11724:6:23"},"nodeType":"YulFunctionCall","src":"11724:35:23"},"nodeType":"YulExpressionStatement","src":"11724:35:23"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint32_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint32_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11327:9:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"11338:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11346:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11354:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11362:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11370:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11378:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11389:4:23","type":""}],"src":"11159:606:23"},{"body":{"nodeType":"YulBlock","src":"12071:485:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12088:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12099:3:23","type":"","value":"192"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12081:6:23"},"nodeType":"YulFunctionCall","src":"12081:22:23"},"nodeType":"YulExpressionStatement","src":"12081:22:23"},{"nodeType":"YulVariableDeclaration","src":"12112:59:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12143:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12155:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12166:3:23","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12151:3:23"},"nodeType":"YulFunctionCall","src":"12151:19:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"12126:16:23"},"nodeType":"YulFunctionCall","src":"12126:45:23"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"12116:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12191:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12202:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12187:3:23"},"nodeType":"YulFunctionCall","src":"12187:18:23"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"12211:6:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"12219:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12207:3:23"},"nodeType":"YulFunctionCall","src":"12207:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12180:6:23"},"nodeType":"YulFunctionCall","src":"12180:50:23"},"nodeType":"YulExpressionStatement","src":"12180:50:23"},{"nodeType":"YulVariableDeclaration","src":"12239:46:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12270:6:23"},{"name":"tail_1","nodeType":"YulIdentifier","src":"12278:6:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"12253:16:23"},"nodeType":"YulFunctionCall","src":"12253:32:23"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"12243:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12305:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12316:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12301:3:23"},"nodeType":"YulFunctionCall","src":"12301:18:23"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"12325:6:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"12333:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12321:3:23"},"nodeType":"YulFunctionCall","src":"12321:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12294:6:23"},"nodeType":"YulFunctionCall","src":"12294:50:23"},"nodeType":"YulExpressionStatement","src":"12294:50:23"},{"nodeType":"YulAssignment","src":"12353:40:23","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"12378:6:23"},{"name":"tail_2","nodeType":"YulIdentifier","src":"12386:6:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"12361:16:23"},"nodeType":"YulFunctionCall","src":"12361:32:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12353:4:23"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12413:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12424:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12409:3:23"},"nodeType":"YulFunctionCall","src":"12409:18:23"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"12433:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12449:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12454:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12445:3:23"},"nodeType":"YulFunctionCall","src":"12445:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"12458:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12441:3:23"},"nodeType":"YulFunctionCall","src":"12441:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12429:3:23"},"nodeType":"YulFunctionCall","src":"12429:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12402:6:23"},"nodeType":"YulFunctionCall","src":"12402:60:23"},"nodeType":"YulExpressionStatement","src":"12402:60:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12482:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12493:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12478:3:23"},"nodeType":"YulFunctionCall","src":"12478:19:23"},{"name":"value4","nodeType":"YulIdentifier","src":"12499:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12471:6:23"},"nodeType":"YulFunctionCall","src":"12471:35:23"},"nodeType":"YulExpressionStatement","src":"12471:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12526:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"12537:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12522:3:23"},"nodeType":"YulFunctionCall","src":"12522:19:23"},{"name":"value5","nodeType":"YulIdentifier","src":"12543:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12515:6:23"},"nodeType":"YulFunctionCall","src":"12515:35:23"},"nodeType":"YulExpressionStatement","src":"12515:35:23"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_bytes32__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12000:9:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12011:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12019:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12027:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12035:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12043:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12051:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12062:4:23","type":""}],"src":"11770:786:23"},{"body":{"nodeType":"YulBlock","src":"12934:772:23","statements":[{"nodeType":"YulVariableDeclaration","src":"12944:27:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12964:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12958:5:23"},"nodeType":"YulFunctionCall","src":"12958:13:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12948:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13006:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13014:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13002:3:23"},"nodeType":"YulFunctionCall","src":"13002:17:23"},{"name":"pos","nodeType":"YulIdentifier","src":"13021:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"13026:6:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"12980:21:23"},"nodeType":"YulFunctionCall","src":"12980:53:23"},"nodeType":"YulExpressionStatement","src":"12980:53:23"},{"nodeType":"YulVariableDeclaration","src":"13042:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13059:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"13064:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13055:3:23"},"nodeType":"YulFunctionCall","src":"13055:16:23"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"13046:5:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13080:29:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13102:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13096:5:23"},"nodeType":"YulFunctionCall","src":"13096:13:23"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"13084:8:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13144:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13152:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13140:3:23"},"nodeType":"YulFunctionCall","src":"13140:17:23"},{"name":"end_1","nodeType":"YulIdentifier","src":"13159:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"13166:8:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"13118:21:23"},"nodeType":"YulFunctionCall","src":"13118:57:23"},"nodeType":"YulExpressionStatement","src":"13118:57:23"},{"nodeType":"YulVariableDeclaration","src":"13184:33:23","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"13201:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"13208:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13197:3:23"},"nodeType":"YulFunctionCall","src":"13197:20:23"},"variables":[{"name":"end_2","nodeType":"YulTypedName","src":"13188:5:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13226:41:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13240:26:23","type":"","value":"0xffffffffffffffffffffffff"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"13236:3:23"},"nodeType":"YulFunctionCall","src":"13236:31:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13230:2:23","type":""}]},{"expression":{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"13283:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13298:2:23","type":"","value":"96"},{"name":"value2","nodeType":"YulIdentifier","src":"13302:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13294:3:23"},"nodeType":"YulFunctionCall","src":"13294:15:23"},{"name":"_1","nodeType":"YulIdentifier","src":"13311:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13290:3:23"},"nodeType":"YulFunctionCall","src":"13290:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13276:6:23"},"nodeType":"YulFunctionCall","src":"13276:39:23"},"nodeType":"YulExpressionStatement","src":"13276:39:23"},{"expression":{"arguments":[{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"13335:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13342:2:23","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13331:3:23"},"nodeType":"YulFunctionCall","src":"13331:14:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13355:3:23","type":"","value":"224"},{"name":"value3","nodeType":"YulIdentifier","src":"13360:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13351:3:23"},"nodeType":"YulFunctionCall","src":"13351:16:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13373:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"13378:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13369:3:23"},"nodeType":"YulFunctionCall","src":"13369:20:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13347:3:23"},"nodeType":"YulFunctionCall","src":"13347:43:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13324:6:23"},"nodeType":"YulFunctionCall","src":"13324:67:23"},"nodeType":"YulExpressionStatement","src":"13324:67:23"},{"expression":{"arguments":[{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"13411:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13418:2:23","type":"","value":"24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13407:3:23"},"nodeType":"YulFunctionCall","src":"13407:14:23"},{"name":"value4","nodeType":"YulIdentifier","src":"13423:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13400:6:23"},"nodeType":"YulFunctionCall","src":"13400:30:23"},"nodeType":"YulExpressionStatement","src":"13400:30:23"},{"nodeType":"YulVariableDeclaration","src":"13439:29:23","value":{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"13461:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13455:5:23"},"nodeType":"YulFunctionCall","src":"13455:13:23"},"variables":[{"name":"length_2","nodeType":"YulTypedName","src":"13443:8:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"13503:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"13511:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13499:3:23"},"nodeType":"YulFunctionCall","src":"13499:17:23"},{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"13522:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"13529:2:23","type":"","value":"56"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13518:3:23"},"nodeType":"YulFunctionCall","src":"13518:14:23"},{"name":"length_2","nodeType":"YulIdentifier","src":"13534:8:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"13477:21:23"},"nodeType":"YulFunctionCall","src":"13477:66:23"},"nodeType":"YulExpressionStatement","src":"13477:66:23"},{"nodeType":"YulVariableDeclaration","src":"13552:30:23","value":{"arguments":[{"name":"end_2","nodeType":"YulIdentifier","src":"13566:5:23"},{"name":"length_2","nodeType":"YulIdentifier","src":"13573:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13562:3:23"},"nodeType":"YulFunctionCall","src":"13562:20:23"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"13556:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13602:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"13606:2:23","type":"","value":"56"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13598:3:23"},"nodeType":"YulFunctionCall","src":"13598:11:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13619:2:23","type":"","value":"96"},{"name":"value6","nodeType":"YulIdentifier","src":"13623:6:23"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13615:3:23"},"nodeType":"YulFunctionCall","src":"13615:15:23"},{"name":"_1","nodeType":"YulIdentifier","src":"13632:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13611:3:23"},"nodeType":"YulFunctionCall","src":"13611:24:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13591:6:23"},"nodeType":"YulFunctionCall","src":"13591:45:23"},"nodeType":"YulExpressionStatement","src":"13591:45:23"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13656:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"13660:2:23","type":"","value":"76"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13652:3:23"},"nodeType":"YulFunctionCall","src":"13652:11:23"},{"name":"value7","nodeType":"YulIdentifier","src":"13665:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13645:6:23"},"nodeType":"YulFunctionCall","src":"13645:27:23"},"nodeType":"YulExpressionStatement","src":"13645:27:23"},{"nodeType":"YulAssignment","src":"13681:19:23","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"13692:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"13696:3:23","type":"","value":"108"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13688:3:23"},"nodeType":"YulFunctionCall","src":"13688:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13681:3:23"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint32_t_uint256_t_string_memory_ptr_t_address_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint32_t_uint256_t_string_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12854:3:23","type":""},{"name":"value7","nodeType":"YulTypedName","src":"12859:6:23","type":""},{"name":"value6","nodeType":"YulTypedName","src":"12867:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"12875:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"12883:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"12891:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12899:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12907:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12915:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12926:3:23","type":""}],"src":"12561:1145:23"},{"body":{"nodeType":"YulBlock","src":"13885:166:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13902:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13913:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13895:6:23"},"nodeType":"YulFunctionCall","src":"13895:21:23"},"nodeType":"YulExpressionStatement","src":"13895:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13936:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13947:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13932:3:23"},"nodeType":"YulFunctionCall","src":"13932:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"13952:2:23","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13925:6:23"},"nodeType":"YulFunctionCall","src":"13925:30:23"},"nodeType":"YulExpressionStatement","src":"13925:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13975:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"13986:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13971:3:23"},"nodeType":"YulFunctionCall","src":"13971:18:23"},{"hexValue":"50726f6d6f74696f6e20657869737473","kind":"string","nodeType":"YulLiteral","src":"13991:18:23","type":"","value":"Promotion exists"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13964:6:23"},"nodeType":"YulFunctionCall","src":"13964:46:23"},"nodeType":"YulExpressionStatement","src":"13964:46:23"},{"nodeType":"YulAssignment","src":"14019:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14031:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14042:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14027:3:23"},"nodeType":"YulFunctionCall","src":"14027:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14019:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_ae9e3c5666d5ca47b45182ea29825923fa4f9977167406567efff75efd4f4ebd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13862:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13876:4:23","type":""}],"src":"13711:340:23"},{"body":{"nodeType":"YulBlock","src":"14105:76:23","statements":[{"body":{"nodeType":"YulBlock","src":"14127:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"14129:16:23"},"nodeType":"YulFunctionCall","src":"14129:18:23"},"nodeType":"YulExpressionStatement","src":"14129:18:23"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14121:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"14124:1:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"14118:2:23"},"nodeType":"YulFunctionCall","src":"14118:8:23"},"nodeType":"YulIf","src":"14115:34:23"},{"nodeType":"YulAssignment","src":"14158:17:23","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"14170:1:23"},{"name":"y","nodeType":"YulIdentifier","src":"14173:1:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14166:3:23"},"nodeType":"YulFunctionCall","src":"14166:9:23"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"14158:4:23"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"14087:1:23","type":""},{"name":"y","nodeType":"YulTypedName","src":"14090:1:23","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"14096:4:23","type":""}],"src":"14056:125:23"},{"body":{"nodeType":"YulBlock","src":"14315:119:23","statements":[{"nodeType":"YulAssignment","src":"14325:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14337:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14348:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14333:3:23"},"nodeType":"YulFunctionCall","src":"14333:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14325:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14367:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"14378:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14360:6:23"},"nodeType":"YulFunctionCall","src":"14360:25:23"},"nodeType":"YulExpressionStatement","src":"14360:25:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14405:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14416:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14401:3:23"},"nodeType":"YulFunctionCall","src":"14401:18:23"},{"name":"value1","nodeType":"YulIdentifier","src":"14421:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14394:6:23"},"nodeType":"YulFunctionCall","src":"14394:34:23"},"nodeType":"YulExpressionStatement","src":"14394:34:23"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14276:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14287:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14295:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14306:4:23","type":""}],"src":"14186:248:23"},{"body":{"nodeType":"YulBlock","src":"14726:434:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14743:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"14754:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14736:6:23"},"nodeType":"YulFunctionCall","src":"14736:25:23"},"nodeType":"YulExpressionStatement","src":"14736:25:23"},{"nodeType":"YulVariableDeclaration","src":"14770:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14788:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14793:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14784:3:23"},"nodeType":"YulFunctionCall","src":"14784:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"14797:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14780:3:23"},"nodeType":"YulFunctionCall","src":"14780:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14774:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14819:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14830:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14815:3:23"},"nodeType":"YulFunctionCall","src":"14815:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14839:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"14847:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14835:3:23"},"nodeType":"YulFunctionCall","src":"14835:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14808:6:23"},"nodeType":"YulFunctionCall","src":"14808:43:23"},"nodeType":"YulExpressionStatement","src":"14808:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14871:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14882:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14867:3:23"},"nodeType":"YulFunctionCall","src":"14867:18:23"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14891:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"14899:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14887:3:23"},"nodeType":"YulFunctionCall","src":"14887:23:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14860:6:23"},"nodeType":"YulFunctionCall","src":"14860:51:23"},"nodeType":"YulExpressionStatement","src":"14860:51:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14931:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14942:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14927:3:23"},"nodeType":"YulFunctionCall","src":"14927:18:23"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"14951:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"14959:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14947:3:23"},"nodeType":"YulFunctionCall","src":"14947:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14920:6:23"},"nodeType":"YulFunctionCall","src":"14920:43:23"},"nodeType":"YulExpressionStatement","src":"14920:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14983:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"14994:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14979:3:23"},"nodeType":"YulFunctionCall","src":"14979:19:23"},{"name":"value4","nodeType":"YulIdentifier","src":"15000:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14972:6:23"},"nodeType":"YulFunctionCall","src":"14972:35:23"},"nodeType":"YulExpressionStatement","src":"14972:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15027:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15038:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15023:3:23"},"nodeType":"YulFunctionCall","src":"15023:19:23"},{"name":"value5","nodeType":"YulIdentifier","src":"15044:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15016:6:23"},"nodeType":"YulFunctionCall","src":"15016:35:23"},"nodeType":"YulExpressionStatement","src":"15016:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15071:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15082:3:23","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15067:3:23"},"nodeType":"YulFunctionCall","src":"15067:19:23"},{"kind":"number","nodeType":"YulLiteral","src":"15088:3:23","type":"","value":"224"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15060:6:23"},"nodeType":"YulFunctionCall","src":"15060:32:23"},"nodeType":"YulExpressionStatement","src":"15060:32:23"},{"nodeType":"YulAssignment","src":"15101:53:23","value":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"15126:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15138:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15149:3:23","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15134:3:23"},"nodeType":"YulFunctionCall","src":"15134:19:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"15109:16:23"},"nodeType":"YulFunctionCall","src":"15109:45:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15101:4:23"}]}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint32_t_address_t_uint256_t_uint256_t_string_memory_ptr__to_t_bytes32_t_address_t_uint32_t_address_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14647:9:23","type":""},{"name":"value6","nodeType":"YulTypedName","src":"14658:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"14666:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14674:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14682:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14690:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14698:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14706:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14717:4:23","type":""}],"src":"14439:721:23"},{"body":{"nodeType":"YulBlock","src":"15339:162:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15356:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15367:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15349:6:23"},"nodeType":"YulFunctionCall","src":"15349:21:23"},"nodeType":"YulExpressionStatement","src":"15349:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15390:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15401:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15386:3:23"},"nodeType":"YulFunctionCall","src":"15386:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"15406:2:23","type":"","value":"12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15379:6:23"},"nodeType":"YulFunctionCall","src":"15379:30:23"},"nodeType":"YulExpressionStatement","src":"15379:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15429:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15440:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15425:3:23"},"nodeType":"YulFunctionCall","src":"15425:18:23"},{"hexValue":"556e617574686f72697a6564","kind":"string","nodeType":"YulLiteral","src":"15445:14:23","type":"","value":"Unauthorized"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15418:6:23"},"nodeType":"YulFunctionCall","src":"15418:42:23"},"nodeType":"YulExpressionStatement","src":"15418:42:23"},{"nodeType":"YulAssignment","src":"15469:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15481:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15492:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15477:3:23"},"nodeType":"YulFunctionCall","src":"15477:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15469:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15316:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15330:4:23","type":""}],"src":"15165:336:23"},{"body":{"nodeType":"YulBlock","src":"15680:160:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15697:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15708:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15690:6:23"},"nodeType":"YulFunctionCall","src":"15690:21:23"},"nodeType":"YulExpressionStatement","src":"15690:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15731:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15742:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15727:3:23"},"nodeType":"YulFunctionCall","src":"15727:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"15747:2:23","type":"","value":"10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15720:6:23"},"nodeType":"YulFunctionCall","src":"15720:30:23"},"nodeType":"YulExpressionStatement","src":"15720:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15770:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15781:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15766:3:23"},"nodeType":"YulFunctionCall","src":"15766:18:23"},{"hexValue":"4e6f2062616c616e6365","kind":"string","nodeType":"YulLiteral","src":"15786:12:23","type":"","value":"No balance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15759:6:23"},"nodeType":"YulFunctionCall","src":"15759:40:23"},"nodeType":"YulExpressionStatement","src":"15759:40:23"},{"nodeType":"YulAssignment","src":"15808:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15820:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"15831:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15816:3:23"},"nodeType":"YulFunctionCall","src":"15816:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15808:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_397f20c9ee670e88dbc97000732216e0936c9de3d4dedf79ef5a506c8a043cf4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15657:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15671:4:23","type":""}],"src":"15506:334:23"},{"body":{"nodeType":"YulBlock","src":"16036:14:23","statements":[{"nodeType":"YulAssignment","src":"16038:10:23","value":{"name":"pos","nodeType":"YulIdentifier","src":"16045:3:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16038:3:23"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16020:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16028:3:23","type":""}],"src":"15845:205:23"},{"body":{"nodeType":"YulBlock","src":"16229:155:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16246:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16257:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16239:6:23"},"nodeType":"YulFunctionCall","src":"16239:21:23"},"nodeType":"YulExpressionStatement","src":"16239:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16280:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16291:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16276:3:23"},"nodeType":"YulFunctionCall","src":"16276:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"16296:1:23","type":"","value":"6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16269:6:23"},"nodeType":"YulFunctionCall","src":"16269:29:23"},"nodeType":"YulExpressionStatement","src":"16269:29:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16318:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16329:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16314:3:23"},"nodeType":"YulFunctionCall","src":"16314:18:23"},{"hexValue":"4661696c6564","kind":"string","nodeType":"YulLiteral","src":"16334:8:23","type":"","value":"Failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16307:6:23"},"nodeType":"YulFunctionCall","src":"16307:36:23"},"nodeType":"YulExpressionStatement","src":"16307:36:23"},{"nodeType":"YulAssignment","src":"16352:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16364:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16375:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16360:3:23"},"nodeType":"YulFunctionCall","src":"16360:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16352:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_329b6695cc078fec6f5eaa1763a4568ff856dfa63ebfa86719d6a43e911ffb23__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16206:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16220:4:23","type":""}],"src":"16055:329:23"},{"body":{"nodeType":"YulBlock","src":"16563:228:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16580:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16591:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16573:6:23"},"nodeType":"YulFunctionCall","src":"16573:21:23"},"nodeType":"YulExpressionStatement","src":"16573:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16614:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16625:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16610:3:23"},"nodeType":"YulFunctionCall","src":"16610:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"16630:2:23","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16603:6:23"},"nodeType":"YulFunctionCall","src":"16603:30:23"},"nodeType":"YulExpressionStatement","src":"16603:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16653:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16664:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16649:3:23"},"nodeType":"YulFunctionCall","src":"16649:18:23"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"16669:34:23","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16642:6:23"},"nodeType":"YulFunctionCall","src":"16642:62:23"},"nodeType":"YulExpressionStatement","src":"16642:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16724:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16735:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16720:3:23"},"nodeType":"YulFunctionCall","src":"16720:18:23"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"16740:8:23","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16713:6:23"},"nodeType":"YulFunctionCall","src":"16713:36:23"},"nodeType":"YulExpressionStatement","src":"16713:36:23"},{"nodeType":"YulAssignment","src":"16758:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16770:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16781:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16766:3:23"},"nodeType":"YulFunctionCall","src":"16766:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16758:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16540:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16554:4:23","type":""}],"src":"16389:402:23"},{"body":{"nodeType":"YulBlock","src":"16970:182:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16987:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"16998:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16980:6:23"},"nodeType":"YulFunctionCall","src":"16980:21:23"},"nodeType":"YulExpressionStatement","src":"16980:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17021:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17032:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17017:3:23"},"nodeType":"YulFunctionCall","src":"17017:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"17037:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17010:6:23"},"nodeType":"YulFunctionCall","src":"17010:30:23"},"nodeType":"YulExpressionStatement","src":"17010:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17060:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17071:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17056:3:23"},"nodeType":"YulFunctionCall","src":"17056:18:23"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"17076:34:23","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17049:6:23"},"nodeType":"YulFunctionCall","src":"17049:62:23"},"nodeType":"YulExpressionStatement","src":"17049:62:23"},{"nodeType":"YulAssignment","src":"17120:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17132:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17143:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17128:3:23"},"nodeType":"YulFunctionCall","src":"17128:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17120:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16947:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16961:4:23","type":""}],"src":"16796:356:23"},{"body":{"nodeType":"YulBlock","src":"17458:515:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17475:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17486:3:23","type":"","value":"192"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17468:6:23"},"nodeType":"YulFunctionCall","src":"17468:22:23"},"nodeType":"YulExpressionStatement","src":"17468:22:23"},{"nodeType":"YulVariableDeclaration","src":"17499:59:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17530:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17542:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17553:3:23","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17538:3:23"},"nodeType":"YulFunctionCall","src":"17538:19:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17513:16:23"},"nodeType":"YulFunctionCall","src":"17513:45:23"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"17503:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17578:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17589:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17574:3:23"},"nodeType":"YulFunctionCall","src":"17574:18:23"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"17598:6:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"17606:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17594:3:23"},"nodeType":"YulFunctionCall","src":"17594:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17567:6:23"},"nodeType":"YulFunctionCall","src":"17567:50:23"},"nodeType":"YulExpressionStatement","src":"17567:50:23"},{"nodeType":"YulVariableDeclaration","src":"17626:46:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17657:6:23"},{"name":"tail_1","nodeType":"YulIdentifier","src":"17665:6:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17640:16:23"},"nodeType":"YulFunctionCall","src":"17640:32:23"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"17630:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17692:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17703:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17688:3:23"},"nodeType":"YulFunctionCall","src":"17688:18:23"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"17712:6:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"17720:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17708:3:23"},"nodeType":"YulFunctionCall","src":"17708:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17681:6:23"},"nodeType":"YulFunctionCall","src":"17681:50:23"},"nodeType":"YulExpressionStatement","src":"17681:50:23"},{"nodeType":"YulAssignment","src":"17740:40:23","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"17765:6:23"},{"name":"tail_2","nodeType":"YulIdentifier","src":"17773:6:23"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17748:16:23"},"nodeType":"YulFunctionCall","src":"17748:32:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17740:4:23"}]},{"nodeType":"YulVariableDeclaration","src":"17789:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17807:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"17812:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17803:3:23"},"nodeType":"YulFunctionCall","src":"17803:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"17816:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17799:3:23"},"nodeType":"YulFunctionCall","src":"17799:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"17793:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17838:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17849:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17834:3:23"},"nodeType":"YulFunctionCall","src":"17834:18:23"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"17858:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"17866:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17854:3:23"},"nodeType":"YulFunctionCall","src":"17854:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17827:6:23"},"nodeType":"YulFunctionCall","src":"17827:43:23"},"nodeType":"YulExpressionStatement","src":"17827:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17890:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17901:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17886:3:23"},"nodeType":"YulFunctionCall","src":"17886:19:23"},{"name":"value4","nodeType":"YulIdentifier","src":"17907:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17879:6:23"},"nodeType":"YulFunctionCall","src":"17879:35:23"},"nodeType":"YulExpressionStatement","src":"17879:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17934:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"17945:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17930:3:23"},"nodeType":"YulFunctionCall","src":"17930:19:23"},{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"17955:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"17963:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17951:3:23"},"nodeType":"YulFunctionCall","src":"17951:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17923:6:23"},"nodeType":"YulFunctionCall","src":"17923:44:23"},"nodeType":"YulExpressionStatement","src":"17923:44:23"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17387:9:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"17398:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"17406:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"17414:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"17422:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17430:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17438:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17449:4:23","type":""}],"src":"17157:816:23"},{"body":{"nodeType":"YulBlock","src":"18161:283:23","statements":[{"nodeType":"YulVariableDeclaration","src":"18171:27:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18191:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18185:5:23"},"nodeType":"YulFunctionCall","src":"18185:13:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"18175:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18233:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"18241:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18229:3:23"},"nodeType":"YulFunctionCall","src":"18229:17:23"},{"name":"pos","nodeType":"YulIdentifier","src":"18248:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"18253:6:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"18207:21:23"},"nodeType":"YulFunctionCall","src":"18207:53:23"},"nodeType":"YulExpressionStatement","src":"18207:53:23"},{"nodeType":"YulVariableDeclaration","src":"18269:29:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18286:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"18291:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18282:3:23"},"nodeType":"YulFunctionCall","src":"18282:16:23"},"variables":[{"name":"end_1","nodeType":"YulTypedName","src":"18273:5:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"18307:29:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18329:6:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"18323:5:23"},"nodeType":"YulFunctionCall","src":"18323:13:23"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"18311:8:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18371:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"18379:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18367:3:23"},"nodeType":"YulFunctionCall","src":"18367:17:23"},{"name":"end_1","nodeType":"YulIdentifier","src":"18386:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"18393:8:23"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"18345:21:23"},"nodeType":"YulFunctionCall","src":"18345:57:23"},"nodeType":"YulExpressionStatement","src":"18345:57:23"},{"nodeType":"YulAssignment","src":"18411:27:23","value":{"arguments":[{"name":"end_1","nodeType":"YulIdentifier","src":"18422:5:23"},{"name":"length_1","nodeType":"YulIdentifier","src":"18429:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18418:3:23"},"nodeType":"YulFunctionCall","src":"18418:20:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18411:3:23"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18129:3:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18134:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18142:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18153:3:23","type":""}],"src":"17978:466:23"},{"body":{"nodeType":"YulBlock","src":"18650:193:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18667:3:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18676:6:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18688:3:23","type":"","value":"248"},{"kind":"number","nodeType":"YulLiteral","src":"18693:3:23","type":"","value":"255"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"18684:3:23"},"nodeType":"YulFunctionCall","src":"18684:13:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"18672:3:23"},"nodeType":"YulFunctionCall","src":"18672:26:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18660:6:23"},"nodeType":"YulFunctionCall","src":"18660:39:23"},"nodeType":"YulExpressionStatement","src":"18660:39:23"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18719:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"18724:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18715:3:23"},"nodeType":"YulFunctionCall","src":"18715:11:23"},{"name":"value1","nodeType":"YulIdentifier","src":"18728:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18708:6:23"},"nodeType":"YulFunctionCall","src":"18708:27:23"},"nodeType":"YulExpressionStatement","src":"18708:27:23"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18755:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"18760:2:23","type":"","value":"33"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18751:3:23"},"nodeType":"YulFunctionCall","src":"18751:12:23"},{"name":"value2","nodeType":"YulIdentifier","src":"18765:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18744:6:23"},"nodeType":"YulFunctionCall","src":"18744:28:23"},"nodeType":"YulExpressionStatement","src":"18744:28:23"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18792:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"18797:2:23","type":"","value":"65"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18788:3:23"},"nodeType":"YulFunctionCall","src":"18788:12:23"},{"name":"value3","nodeType":"YulIdentifier","src":"18802:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18781:6:23"},"nodeType":"YulFunctionCall","src":"18781:28:23"},"nodeType":"YulExpressionStatement","src":"18781:28:23"},{"nodeType":"YulAssignment","src":"18818:19:23","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18829:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"18834:2:23","type":"","value":"97"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18825:3:23"},"nodeType":"YulFunctionCall","src":"18825:12:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18818:3:23"}]}]},"name":"abi_encode_tuple_packed_t_bytes1_t_bytes32_t_bytes32_t_bytes32__to_t_bytes1_t_bytes32_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18602:3:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"18607:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"18615:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"18623:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"18631:6:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18642:3:23","type":""}],"src":"18449:394:23"},{"body":{"nodeType":"YulBlock","src":"19022:181:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19039:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19050:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19032:6:23"},"nodeType":"YulFunctionCall","src":"19032:21:23"},"nodeType":"YulExpressionStatement","src":"19032:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19073:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19084:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19069:3:23"},"nodeType":"YulFunctionCall","src":"19069:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"19089:2:23","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19062:6:23"},"nodeType":"YulFunctionCall","src":"19062:30:23"},"nodeType":"YulExpressionStatement","src":"19062:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19112:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19123:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19108:3:23"},"nodeType":"YulFunctionCall","src":"19108:18:23"},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","kind":"string","nodeType":"YulLiteral","src":"19128:33:23","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19101:6:23"},"nodeType":"YulFunctionCall","src":"19101:61:23"},"nodeType":"YulExpressionStatement","src":"19101:61:23"},{"nodeType":"YulAssignment","src":"19171:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19183:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19194:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19179:3:23"},"nodeType":"YulFunctionCall","src":"19179:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19171:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18999:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19013:4:23","type":""}],"src":"18848:355:23"},{"body":{"nodeType":"YulBlock","src":"19240:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19257:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19264:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"19269:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"19260:3:23"},"nodeType":"YulFunctionCall","src":"19260:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19250:6:23"},"nodeType":"YulFunctionCall","src":"19250:31:23"},"nodeType":"YulExpressionStatement","src":"19250:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19297:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"19300:4:23","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19290:6:23"},"nodeType":"YulFunctionCall","src":"19290:15:23"},"nodeType":"YulExpressionStatement","src":"19290:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"19321:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"19324:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"19314:6:23"},"nodeType":"YulFunctionCall","src":"19314:15:23"},"nodeType":"YulExpressionStatement","src":"19314:15:23"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"19208:127:23"},{"body":{"nodeType":"YulBlock","src":"19514:174:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19531:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19542:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19524:6:23"},"nodeType":"YulFunctionCall","src":"19524:21:23"},"nodeType":"YulExpressionStatement","src":"19524:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19565:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19576:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19561:3:23"},"nodeType":"YulFunctionCall","src":"19561:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"19581:2:23","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19554:6:23"},"nodeType":"YulFunctionCall","src":"19554:30:23"},"nodeType":"YulExpressionStatement","src":"19554:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19604:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19615:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19600:3:23"},"nodeType":"YulFunctionCall","src":"19600:18:23"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"19620:26:23","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19593:6:23"},"nodeType":"YulFunctionCall","src":"19593:54:23"},"nodeType":"YulExpressionStatement","src":"19593:54:23"},{"nodeType":"YulAssignment","src":"19656:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19668:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19679:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19664:3:23"},"nodeType":"YulFunctionCall","src":"19664:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19656:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19491:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19505:4:23","type":""}],"src":"19340:348:23"},{"body":{"nodeType":"YulBlock","src":"19867:181:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19884:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19895:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19877:6:23"},"nodeType":"YulFunctionCall","src":"19877:21:23"},"nodeType":"YulExpressionStatement","src":"19877:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19918:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19929:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19914:3:23"},"nodeType":"YulFunctionCall","src":"19914:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"19934:2:23","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19907:6:23"},"nodeType":"YulFunctionCall","src":"19907:30:23"},"nodeType":"YulExpressionStatement","src":"19907:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19957:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"19968:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19953:3:23"},"nodeType":"YulFunctionCall","src":"19953:18:23"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"19973:33:23","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19946:6:23"},"nodeType":"YulFunctionCall","src":"19946:61:23"},"nodeType":"YulExpressionStatement","src":"19946:61:23"},{"nodeType":"YulAssignment","src":"20016:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20028:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20039:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20024:3:23"},"nodeType":"YulFunctionCall","src":"20024:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20016:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19844:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19858:4:23","type":""}],"src":"19693:355:23"},{"body":{"nodeType":"YulBlock","src":"20227:224:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20244:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20255:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20237:6:23"},"nodeType":"YulFunctionCall","src":"20237:21:23"},"nodeType":"YulExpressionStatement","src":"20237:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20278:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20289:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20274:3:23"},"nodeType":"YulFunctionCall","src":"20274:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"20294:2:23","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20267:6:23"},"nodeType":"YulFunctionCall","src":"20267:30:23"},"nodeType":"YulExpressionStatement","src":"20267:30:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20317:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20328:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20313:3:23"},"nodeType":"YulFunctionCall","src":"20313:18:23"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"20333:34:23","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20306:6:23"},"nodeType":"YulFunctionCall","src":"20306:62:23"},"nodeType":"YulExpressionStatement","src":"20306:62:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20388:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20399:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20384:3:23"},"nodeType":"YulFunctionCall","src":"20384:18:23"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"20404:4:23","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20377:6:23"},"nodeType":"YulFunctionCall","src":"20377:32:23"},"nodeType":"YulExpressionStatement","src":"20377:32:23"},{"nodeType":"YulAssignment","src":"20418:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20430:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20441:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20426:3:23"},"nodeType":"YulFunctionCall","src":"20426:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20418:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20204:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20218:4:23","type":""}],"src":"20053:398:23"},{"body":{"nodeType":"YulBlock","src":"20637:217:23","statements":[{"nodeType":"YulAssignment","src":"20647:27:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20659:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20670:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20655:3:23"},"nodeType":"YulFunctionCall","src":"20655:19:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20647:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20690:9:23"},{"name":"value0","nodeType":"YulIdentifier","src":"20701:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20683:6:23"},"nodeType":"YulFunctionCall","src":"20683:25:23"},"nodeType":"YulExpressionStatement","src":"20683:25:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20728:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20739:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20724:3:23"},"nodeType":"YulFunctionCall","src":"20724:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"20748:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"20756:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"20744:3:23"},"nodeType":"YulFunctionCall","src":"20744:17:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20717:6:23"},"nodeType":"YulFunctionCall","src":"20717:45:23"},"nodeType":"YulExpressionStatement","src":"20717:45:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20782:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20793:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20778:3:23"},"nodeType":"YulFunctionCall","src":"20778:18:23"},{"name":"value2","nodeType":"YulIdentifier","src":"20798:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20771:6:23"},"nodeType":"YulFunctionCall","src":"20771:34:23"},"nodeType":"YulExpressionStatement","src":"20771:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20825:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"20836:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20821:3:23"},"nodeType":"YulFunctionCall","src":"20821:18:23"},{"name":"value3","nodeType":"YulIdentifier","src":"20841:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20814:6:23"},"nodeType":"YulFunctionCall","src":"20814:34:23"},"nodeType":"YulExpressionStatement","src":"20814:34:23"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20582:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"20593:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"20601:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"20609:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"20617:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20628:4:23","type":""}],"src":"20456:398:23"}]},"contents":"{\n    { }\n    function abi_decode_uint32(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_uint32(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint32t_addresst_address(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_uint32(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_uint32t_bytes_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_uint32(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value2 := add(_2, 32)\n        value3 := length\n        value4 := abi_decode_address(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IInterchainQueryRouter_$4467__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_bool__to_t_bytes32_t_address_t_bool__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), iszero(iszero(value2)))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint32t_uint256t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        value2 := abi_decode_uint32(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value4 := abi_decode_string(add(headStart, offset_2), dataEnd)\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint32_t_address_t_uint256_t_bool__to_t_uint32_t_address_t_uint256_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function abi_encode_tuple_t_contract$_IMailbox_$4488__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint32_t_address_t_uint256_t_uint256_t_bool__to_t_address_t_uint32_t_address_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), iszero(iszero(value5)))\n    }\n    function abi_encode_tuple_t_contract$_IInterchainGasPaymaster_$4451__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint32_t_uint256__to_t_uint32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_c2556b2f0738cda755e8236a64d7e89ba3fe6369211a88de912f9face6e2903e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Invalid Destination\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_uint32_t_address_t_address__to_t_bytes32_t_uint32_t_address_t_address__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(224, value1), shl(224, 0xffffffff)))\n        let _1 := not(0xffffffffffffffffffffffff)\n        mstore(add(pos, 36), and(shl(96, value2), _1))\n        mstore(add(pos, 56), and(shl(96, value3), _1))\n        end := add(pos, 76)\n    }\n    function abi_encode_tuple_t_stringliteral_926a1b84b861d31f2d45224162461e1d5ff4377725d977d8f792bb84825a0348__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"unauthorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_6f40ae2896ad121a1cccc8ecbad485b8bf64b8051c59b33816d2ceafe3540118__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Invalid Promotion\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e374ecf007e51a99989b725f1f0c5e7bff683ba40bd3c464d9902307bc346dd8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"No more claims\")\n        tail := add(headStart, 96)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_uint32_t_bytes32_t_bytes_memory_ptr__to_t_uint32_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_bytes(value2, add(headStart, 96))\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_c634a95a0c3be7dc2b531f1778120b691aa9c64ba93349380e714e28f6712829__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Insufficient gas\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint32_t_rational_50000_by_1_t_address__to_t_bytes32_t_uint32_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint32_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint32_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), and(value3, 0xffffffff))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_bytes32__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_bytes(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_bytes(value2, tail_2)\n        mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint32_t_uint256_t_string_memory_ptr_t_address_t_uint256__to_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint32_t_uint256_t_string_memory_ptr_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value7, value6, value5, value4, value3, value2, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        let end_2 := add(end_1, length_1)\n        let _1 := not(0xffffffffffffffffffffffff)\n        mstore(end_2, and(shl(96, value2), _1))\n        mstore(add(end_2, 20), and(shl(224, value3), shl(224, 0xffffffff)))\n        mstore(add(end_2, 24), value4)\n        let length_2 := mload(value5)\n        copy_memory_to_memory(add(value5, 0x20), add(end_2, 56), length_2)\n        let _2 := add(end_2, length_2)\n        mstore(add(_2, 56), and(shl(96, value6), _1))\n        mstore(add(_2, 76), value7)\n        end := add(_2, 108)\n    }\n    function abi_encode_tuple_t_stringliteral_ae9e3c5666d5ca47b45182ea29825923fa4f9977167406567efff75efd4f4ebd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Promotion exists\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint32_t_address_t_uint256_t_uint256_t_string_memory_ptr__to_t_bytes32_t_address_t_uint32_t_address_t_uint256_t_uint256_t_string_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffffff))\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), 224)\n        tail := abi_encode_bytes(value6, add(headStart, 224))\n    }\n    function abi_encode_tuple_t_stringliteral_1b2638459828301e8cd6c7c02856073bacf975379e0867f689bb14feacb780c5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 12)\n        mstore(add(headStart, 64), \"Unauthorized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_397f20c9ee670e88dbc97000732216e0936c9de3d4dedf79ef5a506c8a043cf4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 10)\n        mstore(add(headStart, 64), \"No balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_329b6695cc078fec6f5eaa1763a4568ff856dfa63ebfa86719d6a43e911ffb23__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 6)\n        mstore(add(headStart, 64), \"Failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_bytes(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_bytes(value2, tail_2)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), and(value5, _1))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes_memory_ptr_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_packed_t_bytes1_t_bytes32_t_bytes32_t_bytes32__to_t_bytes1_t_bytes32_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, and(value0, shl(248, 255)))\n        mstore(add(pos, 1), value1)\n        mstore(add(pos, 33), value2)\n        mstore(add(pos, 65), value3)\n        end := add(pos, 97)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405260043610620001075760003560e01c806392256c0e1162000095578063ea272e391162000060578063ea272e391462000394578063f28b2daa1462000444578063f2fde38b146200046e578063f8717e8d146200049357600080fd5b806392256c0e1462000295578063cade147d146200032e578063d5438eae1462000353578063d8b0857f146200037d57600080fd5b8063715018a611620000d6578063715018a614620001d35780638b203dd414620001eb5780638da5cb5b146200025e5780639060cd4f146200027e57600080fd5b80630ff96663146200010c5780632deb22d9146200014457806359da575a146200016b57806360cb07d01462000190575b600080fd5b3480156200011957600080fd5b50620001316200012b366004620018eb565b620004c4565b6040519081526020015b60405180910390f35b3480156200015157600080fd5b50620001696200016336600462001928565b62000557565b005b3480156200017857600080fd5b50620001696200018a36600462001972565b620005e8565b3480156200019d57600080fd5b50620001ba73f782c6c4a02f2c71bb8a1db0166fab40ea95681881565b6040516001600160a01b0390911681526020016200013b565b348015620001e057600080fd5b506200016962000cc8565b348015620001f857600080fd5b50620002386200020a366004620018eb565b600560205260009081526040902080546001909101546001600160a01b03811690600160a01b900460ff1683565b604080519384526001600160a01b0390921660208401521515908201526060016200013b565b3480156200026b57600080fd5b506000546001600160a01b0316620001ba565b620001696200028f36600462001ac4565b62000ce0565b348015620002a257600080fd5b50620002fc620002b436600462001b7b565b600360209081526000928352604080842090915290825290208054600182015460029092015463ffffffff8216926401000000009092046001600160a01b0316919060ff1684565b6040805163ffffffff90951685526001600160a01b03909316602085015291830152151560608201526080016200013b565b3480156200033b57600080fd5b50620001696200034d36600462001b7b565b6200118a565b3480156200036057600080fd5b50620001ba73cc737a94fecaec165abcf12ded095bb13f03768581565b620001696200038e36600462001baa565b62001337565b348015620003a157600080fd5b50620003ff620003b336600462001baa565b6002602081905260009182526040909120805460018201549282015460038301546004909301546001600160a01b0380841695600160a01b90940463ffffffff16949316929060ff1686565b604080516001600160a01b03978816815263ffffffff96909616602087015293909516928401929092526060830152608082015290151560a082015260c0016200013b565b3480156200045157600080fd5b50620001ba73f90cb82a76492614d07b82a7658917f3ac811ac181565b3480156200047b57600080fd5b50620001696200048d36600462001bc4565b620013a6565b348015620004a057600080fd5b5062000131620004b236600462001baa565b60046020526000908152604090205481565b60405163a692979360e01b815263ffffffff8216600482015261c35060248201819052600091829073f90cb82a76492614d07b82a7658917f3ac811ac19063a692979390604401602060405180830381865afa15801562000529573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200054f919062001be2565b949350505050565b6200056162001425565b60405180606001604052806200057d846001600160a01b031690565b81526001600160a01b039283166020808301919091526001604092830181905263ffffffff90961660009081526005825282902083518155908301519501805492909101511515600160a01b026001600160a81b031990921694909216939093179290921790915550565b63ffffffff8416600090815260056020526040902060010154600160a01b900460ff16620006535760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b60448201526064015b60405180910390fd5b6000600260008781526020019081526020016000206040518060c00160405290816000820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090506000600360008881526020019081526020016000206000846001600160a01b03166001600160a01b031681526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905060008260000151905060008888833360405160200162000847949392919093845260e09290921b6001600160e01b0319166020840152606090811b6bffffffffffffffffffffffff19908116602485015291901b166038820152604c0190565b604051602081830303815290604052805190602001209050846001600160a01b0316620008ad88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508693925050620014819050565b6001600160a01b031614620008f45760405162461bcd60e51b815260206004820152600c60248201526b1d5b985d5d1a1bdc9a5e995960a21b60448201526064016200064a565b8360a001516200093b5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b210283937b6b7ba34b7b760791b60448201526064016200064a565b8260600151158062000954575082604001518460800151115b620009935760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016200064a565b604080516001600160a01b03871660208201526000910160408051808303601f190181529190529050600073cc737a94fecaec165abcf12ded095bb13f03768563fa31de018b6001600160a01b038716856040518463ffffffff1660e01b815260040162000a049392919062001c5d565b6020604051808303816000875af115801562000a24573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a4a919062001be2565b9050600062000a598b620004c4565b60008d81526004602052604090205490915081111562000aaf5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b60448201526064016200064a565b6040878101519051630237e58360e31b81526004810184905263ffffffff8d16602482015261c35060448201526001600160a01b03909116606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000b2757600080fd5b505af115801562000b3c573d6000803e3d6000fd5b505050505060008660400151905060405180608001604052808d63ffffffff168152602001876001600160a01b0316815260200182600162000b7f919062001ca3565b815260200160011515815250600360008f815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154816001600160a01b0302191690836001600160a01b031602179055506040820151816001015560608201518160020160006101000a81548160ff0219169083151502179055509050507f1d784a2e6117c9c7790cd6effb9ad66fee4286853a212a375d7a5c8c7bf175a78d87338f85600162000c76919062001ca3565b604080519586526001600160a01b039485166020870152929093169184019190915263ffffffff16606083015260808201524260a082015260c00160405180910390a150505050505050505050505050565b62000cd262001425565b62000cde6000620014a9565b565b63ffffffff8416600090815260056020526040902060010154600160a01b900460ff1662000d475760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b2102232b9ba34b730ba34b7b760691b60448201526064016200064a565b60405160009062000d679088908890869033908990889060200162001cbe565b60408051601f1981840301815282825263ffffffff8816600090815260056020529182205463fa31de0160e01b8452909350909173cc737a94fecaec165abcf12ded095bb13f0376859163fa31de019162000dc9918a91879060040162001c5d565b6020604051808303816000875af115801562000de9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e0f919062001be2565b9050600062000e23898989898989620014f9565b905060008989838a8a8a334260405160200162000e4898979695949392919062001d25565b60408051601f1981840301815291815281516020928301206000818152600290935291206004015490915060ff161562000eb85760405162461bcd60e51b815260206004820152601060248201526f50726f6d6f74696f6e2065786973747360801b60448201526064016200064a565b600062000ec589620004c4565b90508034101562000f0c5760405162461bcd60e51b815260206004820152601060248201526f496e73756666696369656e742067617360801b60448201526064016200064a565b62000f18813462001dbd565b6000838152600460205260408120805490919062000f3890849062001ca3565b9091555050604051630237e58360e31b81526004810185905263ffffffff8a16602482015261c350604482015233606482015273f90cb82a76492614d07b82a7658917f3ac811ac1906311bf2c189083906084016000604051808303818588803b15801562000fa657600080fd5b505af115801562000fbb573d6000803e3d6000fd5b50505050506040518060c00160405280846001600160a01b031681526020018a63ffffffff168152602001336001600160a01b03168152602001428152602001898152602001600115158152506002600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff16021790555060408201518160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff0219169083151502179055509050506000600460008481526020019081526020016000205411156200113857600082815260046020908152604091829020548251858152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a15b7fd4a6ee30ad1cd3b2f4f9f76e9abd1d4954e098a7aebc8af7c92439acd488907682848b33428d8d60405162001175979695949392919062001dd7565b60405180910390a15050505050505050505050565b62001194620015f9565b6000828152600260205260409020600101546001600160a01b03163314620011ee5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016200064a565b600082815260046020526040902054620012385760405162461bcd60e51b815260206004820152600a6024820152694e6f2062616c616e636560b01b60448201526064016200064a565b60008281526004602052604080822054905182916001600160a01b038516918381818185875af1925050503d806000811462001291576040519150601f19603f3d011682016040523d82523d6000602084013e62001296565b606091505b50915091508115620012f5576000848152600460209081526040808320805493905580518781529182018390527f5aafa436e7bcce48335a89fd368e909dee8d7387d9349daaed3b167446d6841c910160405180910390a15062001327565b60405162461bcd60e51b815260206004820152600660248201526511985a5b195960d21b60448201526064016200064a565b50506200133360018055565b5050565b600081815260046020526040812080543492906200135790849062001ca3565b9091555050600081815260046020908152604091829020548251848152918201527f1b70566610f058a3248c965ad2923a4829beb0d4cbe6a069e49c71ff46ce07ea910160405180910390a150565b620013b062001425565b6001600160a01b038116620014175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016200064a565b6200142281620014a9565b50565b6000546001600160a01b0316331462000cde5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200064a565b600080600062001492858562001654565b91509150620014a1816200169d565b509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604051806020016200150e90620018c3565b601f1982820381018352601f90910116604081815263ffffffff8916600090815260056020908152919020600101546200155d928c928c928a9233928d926001600160a01b0316910162001e32565b60408051601f19818403018152908290526200157d929160200162001e9d565b60408051808303601f1901815282825263ffffffff8916600090815260056020908152928120548251848401206001600160f81b031994860194909452602185015260418401879052606184019290925292509060810160408051808303601f1901815291905280516020909101209998505050505050505050565b6002600154036200164d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016200064a565b6002600155565b60008082516041036200168e5760208301516040840151606085015160001a6200168187828585620017fa565b9450945050505062001696565b506000905060025b9250929050565b6000816004811115620016b457620016b462001ed0565b03620016bd5750565b6001816004811115620016d457620016d462001ed0565b03620017235760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016200064a565b60028160048111156200173a576200173a62001ed0565b03620017895760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016200064a565b6003816004811115620017a057620017a062001ed0565b03620014225760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016200064a565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115620018335750600090506003620018ba565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801562001888573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116620018b357600060019250925050620018ba565b9150600090505b94509492505050565b6120988062001ee783390190565b803563ffffffff81168114620018e657600080fd5b919050565b600060208284031215620018fe57600080fd5b6200190982620018d1565b9392505050565b80356001600160a01b0381168114620018e657600080fd5b6000806000606084860312156200193e57600080fd5b6200194984620018d1565b9250620019596020850162001910565b9150620019696040850162001910565b90509250925092565b6000806000806000608086880312156200198b57600080fd5b853594506200199d60208701620018d1565b9350604086013567ffffffffffffffff80821115620019bb57600080fd5b818801915088601f830112620019d057600080fd5b813581811115620019e057600080fd5b896020828501011115620019f357600080fd5b60208301955080945050505062001a0d6060870162001910565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262001a4157600080fd5b813567ffffffffffffffff8082111562001a5f5762001a5f62001a19565b604051601f8301601f19908116603f0116810190828211818310171562001a8a5762001a8a62001a19565b8160405283815286602085880101111562001aa457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121562001ade57600080fd5b863567ffffffffffffffff8082111562001af757600080fd5b62001b058a838b0162001a2f565b9750602089013591508082111562001b1c57600080fd5b62001b2a8a838b0162001a2f565b965062001b3a60408a01620018d1565b955060608901359450608089013591508082111562001b5857600080fd5b5062001b6789828a0162001a2f565b92505060a087013590509295509295509295565b6000806040838503121562001b8f57600080fd5b8235915062001ba16020840162001910565b90509250929050565b60006020828403121562001bbd57600080fd5b5035919050565b60006020828403121562001bd757600080fd5b620019098262001910565b60006020828403121562001bf557600080fd5b5051919050565b60005b8381101562001c1957818101518382015260200162001bff565b8381111562001c29576000848401525b50505050565b6000815180845262001c4981602086016020860162001bfc565b601f01601f19169290920160200192915050565b63ffffffff8416815282602082015260606040820152600062001c84606083018462001c2f565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b6000821982111562001cb95762001cb962001c8d565b500190565b60c08152600062001cd360c083018962001c2f565b828103602084015262001ce7818962001c2f565b9050828103604084015262001cfd818862001c2f565b6001600160a01b039690961660608401525050608081019290925260a0909101529392505050565b6000895162001d39818460208e0162001bfc565b89519083019062001d4f818360208e0162001bfc565b8082019150506bffffffffffffffffffffffff19808a60601b16825263ffffffff60e01b8960e01b166014830152876018830152865162001d98816038850160208b0162001bfc565b60609690961b16940160388101949094525050604c820152606c019695505050505050565b60008282101562001dd25762001dd262001c8d565b500390565b8781526001600160a01b03878116602083015263ffffffff87166040830152851660608201526080810184905260a0810183905260e060c0820181905260009062001e259083018462001c2f565b9998505050505050505050565b60c08152600062001e4760c083018962001c2f565b828103602084015262001e5b818962001c2f565b9050828103604084015262001e71818862001c2f565b6001600160a01b03968716606085015260808401959095525050921660a0909201919091529392505050565b6000835162001eb181846020880162001bfc565b83519083019062001ec781836020880162001bfc565b01949350505050565b634e487b7160e01b600052602160045260246000fdfe60a06040523480156200001157600080fd5b50604051620020983803806200209883398101604081905262000034916200032b565b8551869086906200004d9060009060208501906200019b565b508051620000639060019060208401906200019b565b505050620000806200007a620000c160201b60201c565b620000c5565b6200008b8462000117565b600a919091556001600160a01b03908116608052600c80546001600160a01b031916929091169190911790555062000426915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001216200013a565b8051620001369060099060208401906200019b565b5050565b6007546001600160a01b03163314620001995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b828054620001a990620003ea565b90600052602060002090601f016020900481019282620001cd576000855562000218565b82601f10620001e857805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000218578251825591602001919060010190620001fb565b50620002269291506200022a565b5090565b5b808211156200022657600081556001016200022b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026957600080fd5b81516001600160401b038082111562000286576200028662000241565b604051601f8301601f19908116603f01168101908282118183101715620002b157620002b162000241565b81604052838152602092508683858801011115620002ce57600080fd5b600091505b83821015620002f25785820183015181830184015290820190620002d3565b83821115620003045760008385830101525b9695505050505050565b80516001600160a01b03811681146200032657600080fd5b919050565b60008060008060008060c087890312156200034557600080fd5b86516001600160401b03808211156200035d57600080fd5b6200036b8a838b0162000257565b975060208901519150808211156200038257600080fd5b620003908a838b0162000257565b96506040890151915080821115620003a757600080fd5b50620003b689828a0162000257565b945050620003c7606088016200030e565b925060808701519150620003de60a088016200030e565b90509295509295509295565b600181811c90821680620003ff57607f821691505b6020821081036200042057634e487b7160e01b600052602260045260246000fd5b50919050565b608051611c4f62000449600039600081816102b401526106420152611c4f6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116b9565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061172e565b610197610192366004611741565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461176f565b610443565b005b6101c26101d236600461179b565b61055d565b6101c26101e536600461179b565b61058e565b6101776105a9565b6101c26102003660046117dc565b610637565b610197610213366004611741565b610713565b600c54610197906001600160a01b031681565b61023e61023936600461186e565b610773565b604051908152602001610166565b6101c26107f9565b6007546001600160a01b0316610197565b61017761080d565b6101c261027b36600461188b565b61081c565b61023e600a5481565b6101c2610297366004611955565b61082b565b6101776102aa366004611741565b610863565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119d5565b61086e565b61015a6102f7366004611a1e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461186e565b610889565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a4c565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610902565b506000908152600460205260409020546001600160a01b031690565b600061044e82610713565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b6105588383610961565b505050565b61056733826109cf565b6105835760405162461bcd60e51b81526004016104b790611a86565b610558838383610a4e565b6105588383836040518060200160405280600081525061082b565b600980546105b690611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611a4c565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066c57600080fd5b600061067a8284018461186e565b6001600160a01b0381166000908152600b6020526040812054919250036106a9576106a481610bbf565b61070c565b600a546001600160a01b0382166000908152600b6020526040902054106107035760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61070c81610d2b565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107dd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b610801610dad565b61080b6000610e07565b565b60606001805461039990611a4c565b610827338383610e59565b5050565b61083533836109cf565b6108515760405162461bcd60e51b81526004016104b790611a86565b61085d84848484610f27565b50505050565b606061038482610f5a565b610876610dad565b805161082790600990602084019061160a565b610891610dad565b6001600160a01b0381166108f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b6108ff81610e07565b50565b6000818152600260205260409020546001600160a01b03166108ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061099682610713565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109db83610713565b9050806001600160a01b0316846001600160a01b03161480610a2257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a465750836001600160a01b0316610a3b8461041c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a6182610713565b6001600160a01b031614610a875760405162461bcd60e51b81526004016104b790611ad3565b6001600160a01b038216610ae95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b610af68383836001611062565b826001600160a01b0316610b0982610713565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016104b790611ad3565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600b602052604090205415610c185760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610c2360085490565b9050610c33600880546001019055565b610c3d82826110aa565b610cd18160098054610c4e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90611a4c565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b50505050506110c4565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610d54908490611b18565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b0316331461080b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610eba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f32848484610a4e565b610f3e8484848461115e565b61085d5760405162461bcd60e51b81526004016104b790611b3e565b6060610f6582610902565b60008281526006602052604081208054610f7e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90611a4c565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050509050600061101560408051602081019091526000815290565b90508051600003611027575092915050565b815115611059578082604051602001611041929190611b90565b60405160208183030381529060405292505050919050565b610a468461125f565b60405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74207472616e73666572207468697320746f6b656e00000000000060448201526064016104b7565b6108278282604051806020016040528060008152506112d3565b6000828152600260205260409020546001600160a01b031661113f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b600082815260066020908152604090912082516105589284019061160a565b60006001600160a01b0384163b1561125457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a2903390899088908890600401611bbf565b6020604051808303816000875af19250505080156111dd575060408051601f3d908101601f191682019092526111da91810190611bfc565b60015b61123a573d80801561120b576040519150601f19603f3d011682016040523d82523d6000602084013e611210565b606091505b5080516000036112325760405162461bcd60e51b81526004016104b790611b3e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a46565b506001949350505050565b606061126a82610902565b600061128160408051602081019091526000815290565b905060008151116112a157604051806020016040528060008152506112cc565b806112ab84611306565b6040516020016112bc929190611b90565b6040516020818303038152906040525b9392505050565b6112dd8383611399565b6112ea600084848461115e565b6105585760405162461bcd60e51b81526004016104b790611b3e565b6060600061131383611532565b600101905060008167ffffffffffffffff811115611333576113336118c9565b6040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136757509392505050565b6001600160a01b0382166113ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114545760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b611462600083836001611062565b6000818152600260205260409020546001600160a01b0316156114c75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106115715772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061159d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115bb57662386f26fc10000830492506010015b6305f5e10083106115d3576305f5e100830492506008015b61271083106115e757612710830492506004015b606483106115f9576064830492506002015b600a83106103845760010192915050565b82805461161690611a4c565b90600052602060002090601f016020900481019282611638576000855561167e565b82601f1061165157805160ff191683800117855561167e565b8280016001018555821561167e579182015b8281111561167e578251825591602001919060010190611663565b5061168a92915061168e565b5090565b5b8082111561168a576000815560010161168f565b6001600160e01b0319811681146108ff57600080fd5b6000602082840312156116cb57600080fd5b81356112cc816116a3565b60005b838110156116f15781810151838201526020016116d9565b8381111561085d5750506000910152565b6000815180845261171a8160208601602086016116d6565b601f01601f19169290920160200192915050565b6020815260006112cc6020830184611702565b60006020828403121561175357600080fd5b5035919050565b6001600160a01b03811681146108ff57600080fd5b6000806040838503121561178257600080fd5b823561178d8161175a565b946020939093013593505050565b6000806000606084860312156117b057600080fd5b83356117bb8161175a565b925060208401356117cb8161175a565b929592945050506040919091013590565b600080600080606085870312156117f257600080fd5b843563ffffffff8116811461180657600080fd5b935060208501359250604085013567ffffffffffffffff8082111561182a57600080fd5b818701915087601f83011261183e57600080fd5b81358181111561184d57600080fd5b88602082850101111561185f57600080fd5b95989497505060200194505050565b60006020828403121561188057600080fd5b81356112cc8161175a565b6000806040838503121561189e57600080fd5b82356118a98161175a565b9150602083013580151581146118be57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118fa576118fa6118c9565b604051601f8501601f19908116603f01168101908282118183101715611922576119226118c9565b8160405280935085815286868601111561193b57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561196b57600080fd5b84356119768161175a565b935060208501356119868161175a565b925060408501359150606085013567ffffffffffffffff8111156119a957600080fd5b8501601f810187136119ba57600080fd5b6119c9878235602084016118df565b91505092959194509250565b6000602082840312156119e757600080fd5b813567ffffffffffffffff8111156119fe57600080fd5b8201601f81018413611a0f57600080fd5b610a46848235602084016118df565b60008060408385031215611a3157600080fd5b8235611a3c8161175a565b915060208301356118be8161175a565b600181811c90821680611a6057607f821691505b602082108103611a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60008219821115611b3957634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611ba28184602088016116d6565b835190830190611bb68183602088016116d6565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf290830184611702565b9695505050505050565b600060208284031215611c0e57600080fd5b81516112cc816116a356fea26469706673582212208d47f1edfdaced66a3bde214a4d9a4f299526bd5fa060c7c58c18d45ae5a80d164736f6c634300080e0033a26469706673582212200b5100f6b473e37b40404d56d58fbcf818a78ae24b532bc0e0731fb1647426fb64736f6c634300080e0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x107 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x92256C0E GT PUSH3 0x95 JUMPI DUP1 PUSH4 0xEA272E39 GT PUSH3 0x60 JUMPI DUP1 PUSH4 0xEA272E39 EQ PUSH3 0x394 JUMPI DUP1 PUSH4 0xF28B2DAA EQ PUSH3 0x444 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x46E JUMPI DUP1 PUSH4 0xF8717E8D EQ PUSH3 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x92256C0E EQ PUSH3 0x295 JUMPI DUP1 PUSH4 0xCADE147D EQ PUSH3 0x32E JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH3 0x353 JUMPI DUP1 PUSH4 0xD8B0857F EQ PUSH3 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH3 0xD6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH3 0x1D3 JUMPI DUP1 PUSH4 0x8B203DD4 EQ PUSH3 0x1EB JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x25E JUMPI DUP1 PUSH4 0x9060CD4F EQ PUSH3 0x27E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xFF96663 EQ PUSH3 0x10C JUMPI DUP1 PUSH4 0x2DEB22D9 EQ PUSH3 0x144 JUMPI DUP1 PUSH4 0x59DA575A EQ PUSH3 0x16B JUMPI DUP1 PUSH4 0x60CB07D0 EQ PUSH3 0x190 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x131 PUSH3 0x12B CALLDATASIZE PUSH1 0x4 PUSH3 0x18EB JUMP JUMPDEST PUSH3 0x4C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x163 CALLDATASIZE PUSH1 0x4 PUSH3 0x1928 JUMP JUMPDEST PUSH3 0x557 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x18A CALLDATASIZE PUSH1 0x4 PUSH3 0x1972 JUMP JUMPDEST PUSH3 0x5E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1BA PUSH20 0xF782C6C4A02F2C71BB8A1DB0166FAB40EA956818 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0xCC8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x238 PUSH3 0x20A CALLDATASIZE PUSH1 0x4 PUSH3 0x18EB JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE ISZERO ISZERO SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1BA JUMP JUMPDEST PUSH3 0x169 PUSH3 0x28F CALLDATASIZE PUSH1 0x4 PUSH3 0x1AC4 JUMP JUMPDEST PUSH3 0xCE0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x2FC PUSH3 0x2B4 CALLDATASIZE PUSH1 0x4 PUSH3 0x1B7B JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH4 0xFFFFFFFF DUP3 AND SWAP3 PUSH5 0x100000000 SWAP1 SWAP3 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x33B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x34D CALLDATASIZE PUSH1 0x4 PUSH3 0x1B7B JUMP JUMPDEST PUSH3 0x118A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1BA PUSH20 0xCC737A94FECAEC165ABCF12DED095BB13F037685 DUP2 JUMP JUMPDEST PUSH3 0x169 PUSH3 0x38E CALLDATASIZE PUSH1 0x4 PUSH3 0x1BAA JUMP JUMPDEST PUSH3 0x1337 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3FF PUSH3 0x3B3 CALLDATASIZE PUSH1 0x4 PUSH3 0x1BAA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 SWAP1 SWAP4 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP6 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 SWAP5 DIV PUSH4 0xFFFFFFFF AND SWAP5 SWAP4 AND SWAP3 SWAP1 PUSH1 0xFF AND DUP7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP8 DUP9 AND DUP2 MSTORE PUSH4 0xFFFFFFFF SWAP7 SWAP1 SWAP7 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP4 SWAP1 SWAP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH3 0x13B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x451 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1BA PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x47B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x169 PUSH3 0x48D CALLDATASIZE PUSH1 0x4 PUSH3 0x1BC4 JUMP JUMPDEST PUSH3 0x13A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 0x4A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x131 PUSH3 0x4B2 CALLDATASIZE PUSH1 0x4 PUSH3 0x1BAA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA6929793 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH2 0xC350 PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP1 PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 SWAP1 PUSH4 0xA6929793 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x529 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x54F SWAP2 SWAP1 PUSH3 0x1BE2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH3 0x561 PUSH3 0x1425 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH3 0x57D DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x40 SWAP3 DUP4 ADD DUP2 SWAP1 MSTORE PUSH4 0xFFFFFFFF SWAP1 SWAP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 DUP3 MSTORE DUP3 SWAP1 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP1 DUP4 ADD MLOAD SWAP6 ADD DUP1 SLOAD SWAP3 SWAP1 SWAP2 ADD MLOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT SWAP1 SWAP3 AND SWAP5 SWAP1 SWAP3 AND SWAP4 SWAP1 SWAP4 OR SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH3 0x653 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x24B73B30B634B2102232B9BA34B730BA34B7B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x4 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP9 DUP9 DUP4 CALLER PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x847 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP4 DUP5 MSTORE PUSH1 0xE0 SWAP3 SWAP1 SWAP3 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 DUP2 AND PUSH1 0x24 DUP6 ADD MSTORE SWAP2 SWAP1 SHL AND PUSH1 0x38 DUP3 ADD MSTORE PUSH1 0x4C ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x8AD DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP7 SWAP4 SWAP3 POP POP PUSH3 0x1481 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH3 0x8F4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x1D5B985D5D1A1BDC9A5E9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST DUP4 PUSH1 0xA0 ADD MLOAD PUSH3 0x93B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x24B73B30B634B210283937B6B7BA34B7B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST DUP3 PUSH1 0x60 ADD MLOAD ISZERO DUP1 PUSH3 0x954 JUMPI POP DUP3 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD GT JUMPDEST PUSH3 0x993 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE SWAP1 POP PUSH1 0x0 PUSH20 0xCC737A94FECAEC165ABCF12DED095BB13F037685 PUSH4 0xFA31DE01 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP6 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0xA04 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1C5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0xA24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xA4A SWAP2 SWAP1 PUSH3 0x1BE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0xA59 DUP12 PUSH3 0x4C4 JUMP JUMPDEST PUSH1 0x0 DUP14 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH3 0xAAF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x496E73756666696369656E7420676173 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x40 DUP8 DUP2 ADD MLOAD SWAP1 MLOAD PUSH4 0x237E583 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP14 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xC350 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x64 DUP3 ADD MSTORE PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 SWAP1 PUSH4 0x11BF2C18 SWAP1 DUP4 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xB27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xB3C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x0 DUP7 PUSH1 0x40 ADD MLOAD SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP14 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x1 PUSH3 0xB7F SWAP2 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x3 PUSH1 0x0 DUP16 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x4 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH32 0x1D784A2E6117C9C7790CD6EFFB9AD66FEE4286853A212A375D7A5C8C7BF175A7 DUP14 DUP8 CALLER DUP16 DUP6 PUSH1 0x1 PUSH3 0xC76 SWAP2 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x20 DUP8 ADD MSTORE SWAP3 SWAP1 SWAP4 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE TIMESTAMP PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0xCD2 PUSH3 0x1425 JUMP JUMPDEST PUSH3 0xCDE PUSH1 0x0 PUSH3 0x14A9 JUMP JUMPDEST JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH3 0xD47 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x24B73B30B634B2102232B9BA34B730BA34B7B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH3 0xD67 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP7 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x20 ADD PUSH3 0x1CBE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE PUSH4 0xFFFFFFFF DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE SWAP2 DUP3 KECCAK256 SLOAD PUSH4 0xFA31DE01 PUSH1 0xE0 SHL DUP5 MSTORE SWAP1 SWAP4 POP SWAP1 SWAP2 PUSH20 0xCC737A94FECAEC165ABCF12DED095BB13F037685 SWAP2 PUSH4 0xFA31DE01 SWAP2 PUSH3 0xDC9 SWAP2 DUP11 SWAP2 DUP8 SWAP1 PUSH1 0x4 ADD PUSH3 0x1C5D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 0xDE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xE0F SWAP2 SWAP1 PUSH3 0x1BE2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0xE23 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH3 0x14F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP10 DUP10 DUP4 DUP11 DUP11 DUP11 CALLER TIMESTAMP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0xE48 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1D25 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH3 0xEB8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x50726F6D6F74696F6E20657869737473 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 PUSH3 0xEC5 DUP10 PUSH3 0x4C4 JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH3 0xF0C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x496E73756666696369656E7420676173 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH3 0xF18 DUP2 CALLVALUE PUSH3 0x1DBD JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH3 0xF38 SWAP1 DUP5 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH4 0x237E583 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH4 0xFFFFFFFF DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xC350 PUSH1 0x44 DUP3 ADD MSTORE CALLER PUSH1 0x64 DUP3 ADD MSTORE PUSH20 0xF90CB82A76492614D07B82A7658917F3AC811AC1 SWAP1 PUSH4 0x11BF2C18 SWAP1 DUP4 SWAP1 PUSH1 0x84 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xFA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0xFBB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH4 0xFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD TIMESTAMP DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x2 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH4 0xFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH4 0xFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x80 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD DUP2 PUSH1 0x4 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD GT ISZERO PUSH3 0x1138 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP6 DUP2 MSTORE SWAP2 DUP3 ADD MSTORE PUSH32 0x1B70566610F058A3248C965AD2923A4829BEB0D4CBE6A069E49C71FF46CE07EA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH32 0xD4A6EE30AD1CD3B2F4F9F76E9ABD1D4954E098A7AEBC8AF7C92439ACD4889076 DUP3 DUP5 DUP12 CALLER TIMESTAMP DUP14 DUP14 PUSH1 0x40 MLOAD PUSH3 0x1175 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x1DD7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x1194 PUSH3 0x15F9 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x11EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x155B985D5D1A1BDC9A5E9959 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x1238 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x4E6F2062616C616E6365 PUSH1 0xB0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x1291 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x1296 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH3 0x12F5 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP4 SWAP1 SSTORE DUP1 MLOAD DUP8 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x5AAFA436E7BCCE48335A89FD368E909DEE8D7387D9349DAAED3B167446D6841C SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH3 0x1327 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x6 PUSH1 0x24 DUP3 ADD MSTORE PUSH6 0x11985A5B1959 PUSH1 0xD2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST POP POP PUSH3 0x1333 PUSH1 0x1 DUP1 SSTORE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD CALLVALUE SWAP3 SWAP1 PUSH3 0x1357 SWAP1 DUP5 SWAP1 PUSH3 0x1CA3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD MSTORE PUSH32 0x1B70566610F058A3248C965AD2923A4829BEB0D4CBE6A069E49C71FF46CE07EA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH3 0x13B0 PUSH3 0x1425 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x1417 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x64A JUMP JUMPDEST PUSH3 0x1422 DUP2 PUSH3 0x14A9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0xCDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH3 0x1492 DUP6 DUP6 PUSH3 0x1654 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH3 0x14A1 DUP2 PUSH3 0x169D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH3 0x150E SWAP1 PUSH3 0x18C3 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 DUP3 SUB DUP2 ADD DUP4 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD AND PUSH1 0x40 DUP2 DUP2 MSTORE PUSH4 0xFFFFFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP2 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH3 0x155D SWAP3 DUP13 SWAP3 DUP13 SWAP3 DUP11 SWAP3 CALLER SWAP3 DUP14 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 ADD PUSH3 0x1E32 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x157D SWAP3 SWAP2 PUSH1 0x20 ADD PUSH3 0x1E9D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE DUP3 DUP3 MSTORE PUSH4 0xFFFFFFFF DUP10 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP3 DUP2 KECCAK256 SLOAD DUP3 MLOAD DUP5 DUP5 ADD KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP5 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x21 DUP6 ADD MSTORE PUSH1 0x41 DUP5 ADD DUP8 SWAP1 MSTORE PUSH1 0x61 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP3 POP SWAP1 PUSH1 0x81 ADD PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD SUB PUSH3 0x164D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH3 0x168E JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH3 0x1681 DUP8 DUP3 DUP6 DUP6 PUSH3 0x17FA JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH3 0x1696 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x16B4 JUMPI PUSH3 0x16B4 PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x16BD JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x16D4 JUMPI PUSH3 0x16D4 PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x1723 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x173A JUMPI PUSH3 0x173A PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x1789 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH3 0x17A0 JUMPI PUSH3 0x17A0 PUSH3 0x1ED0 JUMP JUMPDEST SUB PUSH3 0x1422 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH3 0x64A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH3 0x1833 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH3 0x18BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x1888 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x18B3 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH3 0x18BA JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2098 DUP1 PUSH3 0x1EE7 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x18FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1909 DUP3 PUSH3 0x18D1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x18E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x193E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1949 DUP5 PUSH3 0x18D1 JUMP JUMPDEST SWAP3 POP PUSH3 0x1959 PUSH1 0x20 DUP6 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP2 POP PUSH3 0x1969 PUSH1 0x40 DUP6 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x198B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH3 0x199D PUSH1 0x20 DUP8 ADD PUSH3 0x18D1 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x19BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x19D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH3 0x19E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x19F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH3 0x1A0D PUSH1 0x60 DUP8 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1A41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1A5F JUMPI PUSH3 0x1A5F PUSH3 0x1A19 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x1A8A JUMPI PUSH3 0x1A8A PUSH3 0x1A19 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x1AA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x1ADE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x1AF7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1B05 DUP11 DUP4 DUP12 ADD PUSH3 0x1A2F JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x1B1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1B2A DUP11 DUP4 DUP12 ADD PUSH3 0x1A2F JUMP JUMPDEST SWAP7 POP PUSH3 0x1B3A PUSH1 0x40 DUP11 ADD PUSH3 0x18D1 JUMP JUMPDEST SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x80 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x1B58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1B67 DUP10 DUP3 DUP11 ADD PUSH3 0x1A2F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH3 0x1BA1 PUSH1 0x20 DUP5 ADD PUSH3 0x1910 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1BBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1BD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1909 DUP3 PUSH3 0x1910 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1BF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x1C19 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1BFF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x1C29 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH3 0x1C49 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH3 0x1BFC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH3 0x1C84 PUSH1 0x60 DUP4 ADD DUP5 PUSH3 0x1C2F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH3 0x1CB9 JUMPI PUSH3 0x1CB9 PUSH3 0x1C8D JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1CD3 PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x1C2F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1CE7 DUP2 DUP10 PUSH3 0x1C2F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x1CFD DUP2 DUP9 PUSH3 0x1C2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 0x60 DUP5 ADD MSTORE POP POP PUSH1 0x80 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP10 MLOAD PUSH3 0x1D39 DUP2 DUP5 PUSH1 0x20 DUP15 ADD PUSH3 0x1BFC JUMP JUMPDEST DUP10 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH3 0x1D4F DUP2 DUP4 PUSH1 0x20 DUP15 ADD PUSH3 0x1BFC JUMP JUMPDEST DUP1 DUP3 ADD SWAP2 POP POP PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT DUP1 DUP11 PUSH1 0x60 SHL AND DUP3 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP10 PUSH1 0xE0 SHL AND PUSH1 0x14 DUP4 ADD MSTORE DUP8 PUSH1 0x18 DUP4 ADD MSTORE DUP7 MLOAD PUSH3 0x1D98 DUP2 PUSH1 0x38 DUP6 ADD PUSH1 0x20 DUP12 ADD PUSH3 0x1BFC JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 SHL AND SWAP5 ADD PUSH1 0x38 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE POP POP PUSH1 0x4C DUP3 ADD MSTORE PUSH1 0x6C ADD SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x1DD2 JUMPI PUSH3 0x1DD2 PUSH3 0x1C8D JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH4 0xFFFFFFFF DUP8 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xE0 PUSH1 0xC0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x1E25 SWAP1 DUP4 ADD DUP5 PUSH3 0x1C2F JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x1E47 PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x1C2F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x1E5B DUP2 DUP10 PUSH3 0x1C2F JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x1E71 DUP2 DUP9 PUSH3 0x1C2F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP SWAP3 AND PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH3 0x1EB1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH3 0x1BFC JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH3 0x1EC7 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH3 0x1BFC JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2098 CODESIZE SUB DUP1 PUSH3 0x2098 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x32B JUMP JUMPDEST DUP6 MLOAD DUP7 SWAP1 DUP7 SWAP1 PUSH3 0x4D SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x63 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP POP PUSH3 0x80 PUSH3 0x7A PUSH3 0xC1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xC5 JUMP JUMPDEST PUSH3 0x8B DUP5 PUSH3 0x117 JUMP JUMPDEST PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x426 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x121 PUSH3 0x13A JUMP JUMPDEST DUP1 MLOAD PUSH3 0x136 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x199 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1A9 SWAP1 PUSH3 0x3EA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1CD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1E8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x218 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x218 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1FB JUMP JUMPDEST POP PUSH3 0x226 SWAP3 SWAP2 POP PUSH3 0x22A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x226 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x22B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2B1 JUMPI PUSH3 0x2B1 PUSH3 0x241 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x2F2 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x304 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x36B DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x390 DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3B6 DUP10 DUP3 DUP11 ADD PUSH3 0x257 JUMP JUMPDEST SWAP5 POP POP PUSH3 0x3C7 PUSH1 0x60 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD SWAP2 POP PUSH3 0x3DE PUSH1 0xA0 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x3FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x420 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1C4F PUSH3 0x449 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B4 ADD MSTORE PUSH2 0x642 ADD MSTORE PUSH2 0x1C4F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xB212BA9F EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4F8AAAC6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6769A0C4 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST PUSH2 0x197 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x443 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x55D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x177 PUSH2 0x5A9 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DC JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x197 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x7F9 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x197 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH2 0x23E PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x82B JUMP JUMPDEST PUSH2 0x177 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x197 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D5 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x369 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x384 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3C5 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x412 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x412 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x427 DUP3 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E DUP3 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x4C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4DC JUMPI POP PUSH2 0x4DC DUP2 CALLER PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 PUSH2 0x961 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x567 CALLER DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x82B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x5B6 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5E2 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x62F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x604 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x62F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x612 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x67A DUP3 DUP5 ADD DUP5 PUSH2 0x186E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SUB PUSH2 0x6A9 JUMPI PUSH2 0x6A4 DUP2 PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x70C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x70C DUP2 PUSH2 0xD2B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x801 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x80B PUSH1 0x0 PUSH2 0xE07 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST PUSH2 0x827 CALLER DUP4 DUP4 PUSH2 0xE59 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x835 CALLER DUP4 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x85D DUP5 DUP5 DUP5 DUP5 PUSH2 0xF27 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x384 DUP3 PUSH2 0xF5A JUMP JUMPDEST PUSH2 0x876 PUSH2 0xDAD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x827 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH2 0x891 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x8FF DUP2 PUSH2 0xE07 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x996 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9DB DUP4 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xA22 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA46 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA3B DUP5 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA61 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0xAF6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB09 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xC18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x105B1C9958591E481BDDDB9CC8139195 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xC33 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC3D DUP3 DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH1 0x9 DUP1 SLOAD PUSH2 0xC4E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC7A SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCC7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC9C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCAA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xD54 SWAP1 DUP5 SWAP1 PUSH2 0x1B18 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF32 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0xF3E DUP5 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF65 DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF7E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFAA SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFF7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFCC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFF7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFDA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1015 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1027 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1059 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1041 SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA46 DUP5 PUSH2 0x125F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E73666572207468697320746F6B656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x827 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12D3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x113F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x558 SWAP3 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x11A2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11DD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11DA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x123A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1232 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA46 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x126A DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12CC JUMP JUMPDEST DUP1 PUSH2 0x12AB DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12BC SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x12DD DUP4 DUP4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x12EA PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1313 DUP4 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH2 0x1333 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1367 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1454 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x1462 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1571 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x159D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15BB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x15D3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x15E7 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x15F9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x384 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1616 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1638 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1651 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x167E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x167E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1663 JUMP JUMPDEST POP PUSH2 0x168A SWAP3 SWAP2 POP PUSH2 0x168E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x168A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x168F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16F1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x85D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x171A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x178D DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x17BB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x17CB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x185F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x18A9 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x18C9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1976 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1986 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C9 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A3C DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x18BE DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A60 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A80 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B39 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1BA2 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BB6 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SELFBALANCE CALL 0xED REVERT 0xAC 0xED PUSH7 0xA3BDE214A4D9A4 CALLCODE SWAP10 MSTORE PUSH12 0xD5FA060C7C58C18D45AE5A80 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND MLOAD STOP 0xF6 0xB4 PUSH20 0xE37B40404D56D58FBCF818A78AE24B532BC0E073 0x1F 0xB1 PUSH5 0x7426FB6473 PUSH16 0x6C634300080E00330000000000000000 ","sourceMap":"458:8219:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8197:310;;;;;;;;;;-1:-1:-1;8197:310:16;;;;;:::i;:::-;;:::i;:::-;;;517:25:23;;;505:2;490:18;8197:310:16;;;;;;;;2158:322;;;;;;;;;;-1:-1:-1;2158:322:16;;;;;:::i;:::-;;:::i;:::-;;5622:1778;;;;;;;;;;-1:-1:-1;5622:1778:16;;;;;:::i;:::-;;:::i;1525:126::-;;;;;;;;;;;;1608:42;1525:126;;;;;-1:-1:-1;;;;;2074:32:23;;;2056:51;;2044:2;2029:18;1525:126:16;1879:234:23;1831:101:0;;;;;;;;;;;;;:::i;1243:41:16:-;;;;;;;;;;-1:-1:-1;1243:41:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1243:41:16;;;-1:-1:-1;;;1243:41:16;;;;;;;;;;2314:25:23;;;-1:-1:-1;;;;;2375:32:23;;;2370:2;2355:18;;2348:60;2451:14;2444:22;2424:18;;;2417:50;2302:2;2287:18;1243:41:16;2118:355:23;1201:85:0;;;;;;;;;;-1:-1:-1;1247:7:0;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;3408:2206:16;;;;;;:::i;:::-;;:::i;1126:59::-;;;;;;;;;;-1:-1:-1;1126:59:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1126:59:16;;;;;;;;;;;5013:10:23;5001:23;;;4983:42;;-1:-1:-1;;;;;5061:32:23;;;5056:2;5041:18;;5034:60;5110:18;;;5103:34;5180:14;5173:22;5168:2;5153:18;;5146:50;4970:3;4955:19;1126:59:16;4760:442:23;7589:584:16;;;;;;;;;;-1:-1:-1;7589:584:16;;;;;:::i;:::-;;:::i;1293:96::-;;;;;;;;;;;;1346:42;1293:96;;7408:173;;;;;;:::i;:::-;;:::i;1043:47::-;;;;;;;;;;-1:-1:-1;1043:47:16;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1043:47:16;;;;-1:-1:-1;;;1043:47:16;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5952:15:23;;;5934:34;;6016:10;6004:23;;;;5999:2;5984:18;;5977:51;6064:15;;;;6044:18;;;6037:43;;;;6111:2;6096:18;;6089:34;6154:3;6139:19;;6132:35;6211:14;;6204:22;5914:3;6183:19;;6176:51;5883:3;5868:19;1043:47:16;5617:616:23;1396:122:16;;;;;;;;;;;;1475:42;1396:122;;2081:198:0;;;;;;;;;;-1:-1:-1;2081:198:0;;;;;:::i;:::-;;:::i;1194:42:16:-;;;;;;;;;;-1:-1:-1;1194:42:16;;;;;:::i;:::-;;;;;;;;;;;;;;8197:310;8382:86;;-1:-1:-1;;;8382:86:16;;6871:10:23;6859:23;;8382:86:16;;;6841:42:23;8342:5:16;6899:18:23;;;6892:34;;;8297:7:16;;;;1475:42;;8382:19;;6814:18:23;;8382:86:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8358:110;8197:310;-1:-1:-1;;;;8197:310:16:o;2158:322::-;1094:13:0;:11;:13::i;:::-;2349:123:16::1;;;;;;;;2372:37;2389:19;-1:-1:-1::0;;;;;8642:23:16;;8543:131;2372:37:::1;2349:123:::0;;-1:-1:-1;;;;;2349:123:16;;::::1;;::::0;;::::1;::::0;;;;2457:4:::1;2349:123:::0;;;;;;;2321:25:::1;::::0;;::::1;-1:-1:-1::0;2321:25:16;;;:6:::1;:25:::0;;;;;:151;;;;;;::::1;::::0;;::::1;::::0;;;;;::::1;::::0;::::1;;-1:-1:-1::0;;;2321:151:16::1;-1:-1:-1::0;;;;;;2321:151:16;;;;;;::::1;::::0;;;;;;;::::1;::::0;;;-1:-1:-1;2158:322:16:o;5622:1778::-;5806:25;;;;;;;:6;:25;;;;;:34;;;-1:-1:-1;;;5806:34:16;;;;5798:66;;;;-1:-1:-1;;;5798:66:16;;7328:2:23;5798:66:16;;;7310:21:23;7367:2;7347:18;;;7340:30;-1:-1:-1;;;7386:18:23;;;7379:49;7445:18;;5798:66:16;;;;;;;;;5875:27;5903:10;:24;5914:12;5903:24;;;;;;;;;;;5875:52;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5875:52:16;-1:-1:-1;;;;;5875:52:16;-1:-1:-1;;;;;5875:52:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5875:52:16;-1:-1:-1;;;;;5875:52:16;-1:-1:-1;;;;;5875:52:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5938:19;5958:6;:20;5965:12;5958:20;;;;;;;;;;;:29;5979:7;-1:-1:-1;;;;;5958:29:16;-1:-1:-1;;;;;5958:29:16;;;;;;;;;;;;5938:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5938:49:16;-1:-1:-1;;;;;5938:49:16;-1:-1:-1;;;;;5938:49:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5998:24;6023:10;:27;;;5998:52;;6061:12;6135;6166:17;6202:16;6237:10;6100:163;;;;;;;;;;7685:19:23;;;7760:3;7738:16;;;;-1:-1:-1;;;;;;7734:43:23;7729:2;7720:12;;7713:65;7866:2;7862:15;;;-1:-1:-1;;7858:24:23;;;7853:2;7844:12;;7837:46;7917:15;;;7913:24;7908:2;7899:12;;7892:46;7963:2;7954:12;;7474:498;6100:163:16;;;;;;;;;;;;;6076:198;;;;;;6061:213;;6320:7;-1:-1:-1;;;;;6293:34:16;:23;6306:9;;6293:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6293:4:16;;:23;-1:-1:-1;;6293:12:16;:23;-1:-1:-1;6293:23:16:i;:::-;-1:-1:-1;;;;;6293:34:16;;6285:59;;;;-1:-1:-1;;;6285:59:16;;8179:2:23;6285:59:16;;;8161:21:23;8218:2;8198:18;;;8191:30;-1:-1:-1;;;8237:18:23;;;8230:42;8289:18;;6285:59:16;7977:336:23;6285:59:16;6363:10;:19;;;6355:49;;;;-1:-1:-1;;;6355:49:16;;8520:2:23;6355:49:16;;;8502:21:23;8559:2;8539:18;;;8532:30;-1:-1:-1;;;8578:18:23;;;8571:47;8635:18;;6355:49:16;8318:341:23;6355:49:16;6438:6;:15;;;6437:16;:101;;;;6520:6;:18;;;6474:10;:26;;;:64;6437:101;6415:165;;;;-1:-1:-1;;;6415:165:16;;8866:2:23;6415:165:16;;;8848:21:23;8905:2;8885:18;;;8878:30;-1:-1:-1;;;8924:18:23;;;8917:44;8978:18;;6415:165:16;8664:338:23;6415:165:16;6616:19;;;-1:-1:-1;;;;;2074:32:23;;6616:19:16;;;2056:51:23;6593:20:16;;2029:18:23;6616:19:16;;;;;;-1:-1:-1;;6616:19:16;;;;;;;-1:-1:-1;6646:17:16;1346:42;6666:16;6697:17;-1:-1:-1;;;;;8642:23:16;;6778:7;6666:130;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6646:150;;6809:21;6833:35;6850:17;6833:16;:35::i;:::-;6887:21;;;;:7;:21;;;;;;6809:59;;-1:-1:-1;6887:38:16;-1:-1:-1;6887:38:16;6879:67;;;;-1:-1:-1;;;6879:67:16;;10302:2:23;6879:67:16;;;10284:21:23;10341:2;10321:18;;;10314:30;-1:-1:-1;;;10360:18:23;;;10353:46;10416:18;;6879:67:16;10100:340:23;6879:67:16;7083:18;;;;;6957:155;;-1:-1:-1;;;6957:155:16;;;;;10686:25:23;;;6957:155:16;10747:23:23;;10727:18;;;10720:51;7063:5:16;10787:18:23;;;10780:34;-1:-1:-1;;;;;10850:32:23;;;10830:18;;;10823:60;1475:42:16;;6957:13;;6978;;10658:19:23;;6957:155:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7123:19;7143:6;:18;;;7123:38;;7202:63;;;;;;;;7208:17;7202:63;;;;;;7226:16;-1:-1:-1;;;;;7202:63:16;;;;;7243:14;7258:1;7243:16;;;;:::i;:::-;7202:63;;;;7260:4;7202:63;;;;;7172:6;:20;7179:12;7172:20;;;;;;;;;;;:29;7193:7;-1:-1:-1;;;;;7172:29:16;-1:-1:-1;;;;;7172:29:16;;;;;;;;;;;;:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7172:93:16;;;;;-1:-1:-1;;;;;7172:93:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7283:109;7300:12;7313:16;7330:10;7341:17;7359:14;7374:1;7359:16;;;;:::i;:::-;7283:109;;;11444:25:23;;;-1:-1:-1;;;;;11543:15:23;;;11538:2;11523:18;;11516:43;11595:15;;;;11575:18;;;11568:43;;;;11659:10;11647:23;11642:2;11627:18;;11620:51;11702:3;11687:19;;11680:35;7376:15:16;11496:3:23;11731:19;;11724:35;11431:3;11416:19;7283:109:16;;;;;;;5787:1613;;;;;;;;5622:1778;;;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;3408:2206:16:-;3654:25;;;;;;;:6;:25;;;;;:34;;;-1:-1:-1;;;3654:34:16;;;;3646:66;;;;-1:-1:-1;;;3646:66:16;;7328:2:23;3646:66:16;;;7310:21:23;7367:2;7347:18;;;7340:30;-1:-1:-1;;;7386:18:23;;;7379:49;7445:18;;3646:66:16;7126:343:23;3646:66:16;3824:168;;3801:20;;3824:168;;3849:4;;3868:6;;3889:8;;3912:10;;3937:15;;3975:5;;3824:168;;;:::i;:::-;;;;-1:-1:-1;;3824:168:16;;;;;;;;;4089:25;;;4006:17;4089:25;;;:6;3824:168;4089:25;;;;:52;-1:-1:-1;;;4026:148:16;;3824:168;;-1:-1:-1;4006:17:16;;1346:42;;4026:16;;:148;;4057:17;;3824:168;;4026:148;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4006:168;;4185:25;4211:73;4223:4;4228:6;4235:17;4253:15;4269:8;4278:5;4211:11;:73::i;:::-;4185:99;;4295:20;4377:4;4400:6;4425:17;4461;4497:15;4531:8;4558:10;4587:15;4342:275;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4342:275:16;;;;;;;;;4318:310;;4342:275;4318:310;;;;4647:24;;;;:10;:24;;;;;:33;;;4318:310;;-1:-1:-1;4647:33:16;;:40;4639:68;;;;-1:-1:-1;;;4639:68:16;;13913:2:23;4639:68:16;;;13895:21:23;13952:2;13932:18;;;13925:30;-1:-1:-1;;;13971:18:23;;;13964:46;14027:18;;4639:68:16;13711:340:23;4639:68:16;4754:21;4778:35;4795:17;4778:16;:35::i;:::-;4754:59;;4845:13;4832:9;:26;;4824:55;;;;-1:-1:-1;;;4824:55:16;;10302:2:23;4824:55:16;;;10284:21:23;10341:2;10321:18;;;10314:30;-1:-1:-1;;;10360:18:23;;;10353:46;10416:18;;4824:55:16;10100:340:23;4824:55:16;4916:23;4926:13;4916:9;:23;:::i;:::-;4890:21;;;;:7;:21;;;;;:50;;:21;;;:50;;;;;:::i;:::-;;;;-1:-1:-1;;4991:147:16;;-1:-1:-1;;;4991:147:16;;;;;10686:25:23;;;10759:10;10747:23;;10727:18;;;10720:51;5097:5:16;10787:18:23;;;10780:34;5117:10:16;10830:18:23;;;10823:60;1475:42:16;;4991:13;;5012;;10658:19:23;;4991:147:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5214:94;;;;;;;;5224:17;-1:-1:-1;;;;;5214:94:16;;;;;5242:17;5214:94;;;;;;5260:10;-1:-1:-1;;;;;5214:94:16;;;;;5271:15;5214:94;;;;5287:15;5214:94;;;;5303:4;5214:94;;;;;5189:10;:24;5200:12;5189:24;;;;;;;;;;;:119;;;;;;;;;;;;;-1:-1:-1;;;;;5189:119:16;;;;;-1:-1:-1;;;;;5189:119:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5189:119:16;;;;;-1:-1:-1;;;;;5189:119:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5373:1;5351:7;:21;5359:12;5351:21;;;;;;;;;;;;:23;5348:119;;;5433:21;;;;:7;:21;;;;;;;;;;5405:50;;14360:25:23;;;14401:18;;;14394:34;5405:50:16;;14333:18:23;5405:50:16;;;;;;;5348:119;5482:122;5499:12;5513:17;5532;5550:10;5561:15;5578;5595:8;5482:122;;;;;;;;;;;;:::i;:::-;;;;;;;;3635:1979;;;;;3408:2206;;;;;;:::o;7589:584::-;2261:21:1;:19;:21::i;:::-;7696:24:16::1;::::0;;;:10:::1;:24;::::0;;;;:32:::1;;::::0;-1:-1:-1;;;;;7696:32:16::1;7682:10;:46;7674:71;;;::::0;-1:-1:-1;;;7674:71:16;;15367:2:23;7674:71:16::1;::::0;::::1;15349:21:23::0;15406:2;15386:18;;;15379:30;-1:-1:-1;;;15425:18:23;;;15418:42;15477:18;;7674:71:16::1;15165:336:23::0;7674:71:16::1;7788:1;7764:21:::0;;;:7:::1;:21;::::0;;;;;7756:48:::1;;;::::0;-1:-1:-1;;;7756:48:16;;15708:2:23;7756:48:16::1;::::0;::::1;15690:21:23::0;15747:2;15727:18;;;15720:30;-1:-1:-1;;;15766:18:23;;;15759:40;15816:18;;7756:48:16::1;15506:334:23::0;7756:48:16::1;7816:12;7890:21:::0;;;:7:::1;:21;::::0;;;;;;7851:75;;7816:12;;-1:-1:-1;;;;;7851:17:16;::::1;::::0;7816:12;7851:75;7816:12;7851:75;7890:21;7851:17;:75:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7815:111;;;;7941:7;7937:229;;;7965:15;7983:21:::0;;;:7:::1;:21;::::0;;;;;;;;;8019:25;;;8064:41;;14360:25:23;;;14401:18;;;14394:34;;;8064:41:16::1;::::0;14333:18:23;8064:41:16::1;;;;;;;7950:167;7937:229;;;8138:16;::::0;-1:-1:-1;;;8138:16:16;;16257:2:23;8138:16:16::1;::::0;::::1;16239:21:23::0;16296:1;16276:18;;;16269:29;-1:-1:-1;;;16314:18:23;;;16307:36;16360:18;;8138:16:16::1;16055:329:23::0;7937:229:16::1;7663:510;;2303:20:1::0;1716:1;2809:22;;2629:209;2303:20;7589:584:16;;:::o;7408:173::-;7473:21;;;;:7;:21;;;;;:34;;7498:9;;7473:21;:34;;7498:9;;7473:34;:::i;:::-;;;;-1:-1:-1;;7551:21:16;;;;:7;:21;;;;;;;;;;7523:50;;14360:25:23;;;14401:18;;;14394:34;7523:50:16;;14333:18:23;7523:50:16;;;;;;;7408:173;:::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;16591:2:23;2161:73:0::1;::::0;::::1;16573:21:23::0;16630:2;16610:18;;;16603:30;16669:34;16649:18;;;16642:62;-1:-1:-1;;;16720:18:23;;;16713:36;16766:19;;2161:73:0::1;16389:402:23::0;2161:73:0::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;1359:130::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:8;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;16998:2:23;1414:68:0;;;16980:21:23;;;17017:18;;;17010:30;17076:34;17056:18;;;17049:62;17128:18;;1414:68:0;16796:356:23;3661:227:11;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;-1:-1:-1;3872:9:11;3661:227;-1:-1:-1;;;3661:227:11:o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;2488:908:16:-;2714:7;2734:21;2789:34;;;;;;;;:::i;:::-;-1:-1:-1;;2789:34:16;;;;;;;;;;;;;;;;3005:25;;;;;;;:6;2789:34;3005:25;;;;;;:44;;;2838:226;;2867:4;;2890:6;;2915:8;;2942:10;;2971:15;;-1:-1:-1;;;;;3005:44:16;;2838:226;;:::i;:::-;;;;-1:-1:-1;;2838:226:16;;;;;;;;;;2758:317;;;2838:226;2758:317;;:::i;:::-;;;;;;;-1:-1:-1;;2758:317:16;;;;;;3191:25;;;3086:12;3191:25;;;:6;2758:317;3191:25;;;;;;:52;3295:19;;;;;;-1:-1:-1;;;;;;3125:204:16;;;18660:39:23;;;;18715:11;;;18708:27;18751:12;;;18744:28;;;18788:12;;;18781:28;;;;2758:317:16;-1:-1:-1;3086:12:16;18825::23;;3125:204:16;;;;;;-1:-1:-1;;3125:204:16;;;;;;3101:239;;3125:204;3101:239;;;;;2488:908;-1:-1:-1;;;;;;;;;2488:908:16:o;2336:287:1:-;1759:1;2468:7;;:19;2460:63;;;;-1:-1:-1;;;2460:63:1;;19050:2:23;2460:63:1;;;19032:21:23;19089:2;19069:18;;;19062:30;19128:33;19108:18;;;19101:61;19179:18;;2460:63:1;18848:355:23;2460:63:1;1759:1;2598:7;:18;2336:287::o;2145:730:11:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:11;;-1:-1:-1;2822:35:11;2259:610;2145:730;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;788:34;;-1:-1:-1;;;788:34:11;;19542:2:23;788:34:11;;;19524:21:23;19581:2;19561:18;;;19554:30;19620:26;19600:18;;;19593:54;19664:18;;788:34:11;19340:348:23;730:345:11;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;903:41;;-1:-1:-1;;;903:41:11;;19895:2:23;903:41:11;;;19877:21:23;19934:2;19914:18;;;19907:30;19973:33;19953:18;;;19946:61;20024:18;;903:41:11;19693:355:23;839:236:11;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;1020:44;;-1:-1:-1;;;1020:44:11;;20255:2:23;1020:44:11;;;20237:21:23;20294:2;20274:18;;;20267:30;20333:34;20313:18;;;20306:62;-1:-1:-1;;;20384:18:23;;;20377:32;20426:19;;1020:44:11;20053:398:23;5069:1494:11;5195:7;;6119:66;6106:79;;6102:161;;;-1:-1:-1;6217:1:11;;-1:-1:-1;6221:30:11;6201:51;;6102:161;6374:24;;;6357:14;6374:24;;;;;;;;;20683:25:23;;;20756:4;20744:17;;20724:18;;;20717:45;;;;20778:18;;;20771:34;;;20821:18;;;20814:34;;;6374:24:11;;20655:19:23;;6374:24:11;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6374:24:11;;-1:-1:-1;;6374:24:11;;;-1:-1:-1;;;;;;;6412:20:11;;6408:101;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;-1:-1:-1;6535:20:11;;-1:-1:-1;5069:1494:11;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;:::o;14:163:23:-;81:20;;141:10;130:22;;120:33;;110:61;;167:1;164;157:12;110:61;14:163;;;:::o;182:184::-;240:6;293:2;281:9;272:7;268:23;264:32;261:52;;;309:1;306;299:12;261:52;332:28;350:9;332:28;:::i;:::-;322:38;182:184;-1:-1:-1;;;182:184:23:o;553:173::-;621:20;;-1:-1:-1;;;;;670:31:23;;660:42;;650:70;;716:1;713;706:12;731:332;807:6;815;823;876:2;864:9;855:7;851:23;847:32;844:52;;;892:1;889;882:12;844:52;915:28;933:9;915:28;:::i;:::-;905:38;;962;996:2;985:9;981:18;962:38;:::i;:::-;952:48;;1019:38;1053:2;1042:9;1038:18;1019:38;:::i;:::-;1009:48;;731:332;;;;;:::o;1068:806::-;1164:6;1172;1180;1188;1196;1249:3;1237:9;1228:7;1224:23;1220:33;1217:53;;;1266:1;1263;1256:12;1217:53;1302:9;1289:23;1279:33;;1331:37;1364:2;1353:9;1349:18;1331:37;:::i;:::-;1321:47;;1419:2;1408:9;1404:18;1391:32;1442:18;1483:2;1475:6;1472:14;1469:34;;;1499:1;1496;1489:12;1469:34;1537:6;1526:9;1522:22;1512:32;;1582:7;1575:4;1571:2;1567:13;1563:27;1553:55;;1604:1;1601;1594:12;1553:55;1644:2;1631:16;1670:2;1662:6;1659:14;1656:34;;;1686:1;1683;1676:12;1656:34;1731:7;1726:2;1717:6;1713:2;1709:15;1705:24;1702:37;1699:57;;;1752:1;1749;1742:12;1699:57;1783:2;1779;1775:11;1765:21;;1805:6;1795:16;;;;;1830:38;1864:2;1853:9;1849:18;1830:38;:::i;:::-;1820:48;;1068:806;;;;;;;;:::o;2686:127::-;2747:10;2742:3;2738:20;2735:1;2728:31;2778:4;2775:1;2768:15;2802:4;2799:1;2792:15;2818:719;2861:5;2914:3;2907:4;2899:6;2895:17;2891:27;2881:55;;2932:1;2929;2922:12;2881:55;2968:6;2955:20;2994:18;3031:2;3027;3024:10;3021:36;;;3037:18;;:::i;:::-;3112:2;3106:9;3080:2;3166:13;;-1:-1:-1;;3162:22:23;;;3186:2;3158:31;3154:40;3142:53;;;3210:18;;;3230:22;;;3207:46;3204:72;;;3256:18;;:::i;:::-;3296:10;3292:2;3285:22;3331:2;3323:6;3316:18;3377:3;3370:4;3365:2;3357:6;3353:15;3349:26;3346:35;3343:55;;;3394:1;3391;3384:12;3343:55;3458:2;3451:4;3443:6;3439:17;3432:4;3424:6;3420:17;3407:54;3505:1;3498:4;3493:2;3485:6;3481:15;3477:26;3470:37;3525:6;3516:15;;;;;;2818:719;;;;:::o;3542:954::-;3675:6;3683;3691;3699;3707;3715;3768:3;3756:9;3747:7;3743:23;3739:33;3736:53;;;3785:1;3782;3775:12;3736:53;3825:9;3812:23;3854:18;3895:2;3887:6;3884:14;3881:34;;;3911:1;3908;3901:12;3881:34;3934:50;3976:7;3967:6;3956:9;3952:22;3934:50;:::i;:::-;3924:60;;4037:2;4026:9;4022:18;4009:32;3993:48;;4066:2;4056:8;4053:16;4050:36;;;4082:1;4079;4072:12;4050:36;4105:52;4149:7;4138:8;4127:9;4123:24;4105:52;:::i;:::-;4095:62;;4176:37;4209:2;4198:9;4194:18;4176:37;:::i;:::-;4166:47;;4260:2;4249:9;4245:18;4232:32;4222:42;;4317:3;4306:9;4302:19;4289:33;4273:49;;4347:2;4337:8;4334:16;4331:36;;;4363:1;4360;4353:12;4331:36;;4386:52;4430:7;4419:8;4408:9;4404:24;4386:52;:::i;:::-;4376:62;;;4485:3;4474:9;4470:19;4457:33;4447:43;;3542:954;;;;;;;;:::o;4501:254::-;4569:6;4577;4630:2;4618:9;4609:7;4605:23;4601:32;4598:52;;;4646:1;4643;4636:12;4598:52;4682:9;4669:23;4659:33;;4711:38;4745:2;4734:9;4730:18;4711:38;:::i;:::-;4701:48;;4501:254;;;;;:::o;5432:180::-;5491:6;5544:2;5532:9;5523:7;5519:23;5515:32;5512:52;;;5560:1;5557;5550:12;5512:52;-1:-1:-1;5583:23:23;;5432:180;-1:-1:-1;5432:180:23:o;6478:186::-;6537:6;6590:2;6578:9;6569:7;6565:23;6561:32;6558:52;;;6606:1;6603;6596:12;6558:52;6629:29;6648:9;6629:29;:::i;6937:184::-;7007:6;7060:2;7048:9;7039:7;7035:23;7031:32;7028:52;;;7076:1;7073;7066:12;7028:52;-1:-1:-1;7099:16:23;;6937:184;-1:-1:-1;6937:184:23:o;9007:258::-;9079:1;9089:113;9103:6;9100:1;9097:13;9089:113;;;9179:11;;;9173:18;9160:11;;;9153:39;9125:2;9118:10;9089:113;;;9220:6;9217:1;9214:13;9211:48;;;9255:1;9246:6;9241:3;9237:16;9230:27;9211:48;;9007:258;;;:::o;9270:257::-;9311:3;9349:5;9343:12;9376:6;9371:3;9364:19;9392:63;9448:6;9441:4;9436:3;9432:14;9425:4;9418:5;9414:16;9392:63;:::i;:::-;9509:2;9488:15;-1:-1:-1;;9484:29:23;9475:39;;;;9516:4;9471:50;;9270:257;-1:-1:-1;;9270:257:23:o;9532:374::-;9745:10;9737:6;9733:23;9722:9;9715:42;9793:6;9788:2;9777:9;9773:18;9766:34;9836:2;9831;9820:9;9816:18;9809:30;9696:4;9856:44;9896:2;9885:9;9881:18;9873:6;9856:44;:::i;:::-;9848:52;9532:374;-1:-1:-1;;;;;9532:374:23:o;10894:127::-;10955:10;10950:3;10946:20;10943:1;10936:31;10986:4;10983:1;10976:15;11010:4;11007:1;11000:15;11026:128;11066:3;11097:1;11093:6;11090:1;11087:13;11084:39;;;11103:18;;:::i;:::-;-1:-1:-1;11139:9:23;;11026:128::o;11770:786::-;12099:3;12088:9;12081:22;12062:4;12126:45;12166:3;12155:9;12151:19;12143:6;12126:45;:::i;:::-;12219:9;12211:6;12207:22;12202:2;12191:9;12187:18;12180:50;12253:32;12278:6;12270;12253:32;:::i;:::-;12239:46;;12333:9;12325:6;12321:22;12316:2;12305:9;12301:18;12294:50;12361:32;12386:6;12378;12361:32;:::i;:::-;-1:-1:-1;;;;;12429:32:23;;;;12424:2;12409:18;;12402:60;-1:-1:-1;;12493:3:23;12478:19;;12471:35;;;;12449:3;12522:19;;;12515:35;12429:32;12353:40;-1:-1:-1;;;11770:786:23:o;12561:1145::-;12926:3;12964:6;12958:13;12980:53;13026:6;13021:3;13014:4;13006:6;13002:17;12980:53;:::i;:::-;13096:13;;13055:16;;;;13118:57;13096:13;13055:16;13152:4;13140:17;;13118:57;:::i;:::-;13208:8;13201:5;13197:20;13184:33;;;13240:26;13236:31;13311:2;13302:6;13298:2;13294:15;13290:24;13283:5;13276:39;13378:10;13373:3;13369:20;13360:6;13355:3;13351:16;13347:43;13342:2;13335:5;13331:14;13324:67;13423:6;13418:2;13411:5;13407:14;13400:30;13461:6;13455:13;13477:66;13534:8;13529:2;13522:5;13518:14;13511:4;13503:6;13499:17;13477:66;:::i;:::-;13619:2;13615:15;;;;13611:24;13562:20;;13606:2;13598:11;;13591:45;;;;-1:-1:-1;;13660:2:23;13652:11;;13645:27;13696:3;13688:12;;;-1:-1:-1;;;;;;12561:1145:23:o;14056:125::-;14096:4;14124:1;14121;14118:8;14115:34;;;14129:18;;:::i;:::-;-1:-1:-1;14166:9:23;;14056:125::o;14439:721::-;14736:25;;;-1:-1:-1;;;;;14835:15:23;;;14830:2;14815:18;;14808:43;14899:10;14887:23;;14882:2;14867:18;;14860:51;14947:15;;14942:2;14927:18;;14920:43;14994:3;14979:19;;14972:35;;;14788:3;15023:19;;15016:35;;;15088:3;15082;15067:19;;15060:32;;;14717:4;;15109:45;;15134:19;;15126:6;15109:45;:::i;:::-;15101:53;14439:721;-1:-1:-1;;;;;;;;;14439:721:23:o;17157:816::-;17486:3;17475:9;17468:22;17449:4;17513:45;17553:3;17542:9;17538:19;17530:6;17513:45;:::i;:::-;17606:9;17598:6;17594:22;17589:2;17578:9;17574:18;17567:50;17640:32;17665:6;17657;17640:32;:::i;:::-;17626:46;;17720:9;17712:6;17708:22;17703:2;17692:9;17688:18;17681:50;17748:32;17773:6;17765;17748:32;:::i;:::-;-1:-1:-1;;;;;17854:15:23;;;17849:2;17834:18;;17827:43;17901:3;17886:19;;17879:35;;;;-1:-1:-1;;17951:15:23;;17807:3;17930:19;;;17923:44;;;;17879:35;17740:40;-1:-1:-1;;;17157:816:23:o;17978:466::-;18153:3;18191:6;18185:13;18207:53;18253:6;18248:3;18241:4;18233:6;18229:17;18207:53;:::i;:::-;18323:13;;18282:16;;;;18345:57;18323:13;18282:16;18379:4;18367:17;;18345:57;:::i;:::-;18418:20;;17978:466;-1:-1:-1;;;;17978:466:23:o;19208:127::-;19269:10;19264:3;19260:20;19257:1;19250:31;19300:4;19297:1;19290:15;19324:4;19321:1;19314:15"},"gasEstimates":{"creation":{"codeDepositCost":"3261600","executionCost":"51566","totalCost":"3313166"},"external":{"addChain(uint32,address,address)":"infinite","chains(uint32)":"4777","claimPromotion(bytes32,uint32,bytes,address)":"infinite","claims(bytes32,address)":"7007","createPromotion(string,string,uint32,uint256,string,uint256)":"infinite","fillGas(bytes32)":"28157","gasTank(bytes32)":"2515","getQuotedPayment(uint32)":"infinite","igp()":"260","iqsRouter()":"306","mailbox()":"283","owner()":"2398","promotions(bytes32)":"11129","refundGas(bytes32,address)":"infinite","renounceOwnership()":"infinite","transferOwnership(address)":"28399"},"internal":{"_getAddress(string memory,string memory,uint32,uint256,string memory,uint256)":"infinite","addressToBytes32(address)":"infinite"}},"methodIdentifiers":{"addChain(uint32,address,address)":"2deb22d9","chains(uint32)":"8b203dd4","claimPromotion(bytes32,uint32,bytes,address)":"59da575a","claims(bytes32,address)":"92256c0e","createPromotion(string,string,uint32,uint256,string,uint256)":"9060cd4f","fillGas(bytes32)":"d8b0857f","gasTank(bytes32)":"f8717e8d","getQuotedPayment(uint32)":"0ff96663","igp()":"f28b2daa","iqsRouter()":"60cb07d0","mailbox()":"d5438eae","owner()":"8da5cb5b","promotions(bytes32)":"ea272e39","refundGas(bytes32,address)":"cade147d","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimedAt\",\"type\":\"uint256\"}],\"name\":\"ClaimedPromotion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasTankFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GasTankRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"name\":\"NewChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"promotionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimsPerPerson\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"badgeURI\",\"type\":\"string\"}],\"name\":\"PromotionCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationMailbox\",\"type\":\"address\"}],\"name\":\"addChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chains\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationReceiverAddress\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"destinationMailbox\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_promotionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimPromotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimsCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"claimsPerPerson\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"badgeURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"createPromotion\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_promotionId\",\"type\":\"bytes32\"}],\"name\":\"fillGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"gasTank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"name\":\"getQuotedPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"igp\",\"outputs\":[{\"internalType\":\"contract IInterchainGasPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iqsRouter\",\"outputs\":[{\"internalType\":\"contract IInterchainQueryRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"promotions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"promotionAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimsPerPerson\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_promotionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"refundGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PromotionMain.sol\":\"PromotionMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721Promotion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/IMessageRecipient.sol\\\";\\r\\n\\r\\ncontract ERC721Promotion is\\r\\n    ERC721,\\r\\n    ERC721URIStorage,\\r\\n    Ownable,\\r\\n    IMessageRecipient\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public badgeTokenURI;\\r\\n    uint256 public amountOfClaimsPerPerson;\\r\\n    mapping(address => uint) claimerToClaimsCount;\\r\\n    address public immutable mailbox;\\r\\n    address public promoter;\\r\\n\\r\\n    event ClaimedPromotion(address claimer, uint claimCount);\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory _tokenURI,\\r\\n        address _promoterAddress,\\r\\n        uint _amountOfClaimsPerPerson,\\r\\n        address _mailboxAddress\\r\\n    ) ERC721(name, symbol) {\\r\\n        setTokenURI(_tokenURI);\\r\\n        amountOfClaimsPerPerson = _amountOfClaimsPerPerson;\\r\\n        mailbox = _mailboxAddress;\\r\\n        promoter = _promoterAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyMailbox() {\\r\\n        require(msg.sender == mailbox);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external onlyMailbox {\\r\\n        address claimer = abi.decode(_body, (address));\\r\\n        if (claimerToClaimsCount[claimer] == 0) {\\r\\n            safeMint(claimer);\\r\\n        } else {\\r\\n            require(\\r\\n                claimerToClaimsCount[claimer] < amountOfClaimsPerPerson,\\r\\n                \\\"No more claims\\\"\\r\\n            );\\r\\n            addClaim(claimer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) internal {\\r\\n        require(claimerToClaimsCount[to] == 0, \\\"Already owns NFT\\\");\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, badgeTokenURI);\\r\\n        claimerToClaimsCount[to] = 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, 1);\\r\\n    }\\r\\n\\r\\n    function addClaim(address to) internal {\\r\\n        claimerToClaimsCount[to] += 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, claimerToClaimsCount[to]);\\r\\n    }\\r\\n\\r\\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\\r\\n        badgeTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n    // Soulbound Token\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal override {\\r\\n        revert(\\\"Cannot transfer this token\\\");\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        revert(\\\"Disabled\\\");\\r\\n        // super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe26b0678d208cb0be04dc35cbce68539fd711b890fce8b1deadfc2cb58cef297\",\"license\":\"MIT\"},\"contracts/PromotionMain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IInterchainQueryRouter.sol\\\";\\r\\nimport \\\"./interfaces/IMailbox.sol\\\";\\r\\nimport \\\"./interfaces/IInterchainGasPaymaster.sol\\\";\\r\\nimport \\\"./interfaces/IReceiver.sol\\\";\\r\\nimport \\\"./ERC721Promotion.sol\\\";\\r\\n\\r\\ncontract PromotionMain is Ownable, ReentrancyGuard {\\r\\n    using ECDSA for bytes32;\\r\\n    struct Receiver {\\r\\n        bytes32 destinationReceiverAddress;\\r\\n        address destinationMailbox;\\r\\n        bool isExists;\\r\\n    }\\r\\n\\r\\n    struct Promotion {\\r\\n        address promotionAddress;\\r\\n        uint32 destinationDomain;\\r\\n        address creator;\\r\\n        uint createdAt;\\r\\n        uint claimsPerPerson;\\r\\n        bool isExists;\\r\\n    }\\r\\n\\r\\n    struct Claim {\\r\\n        uint32 destinationDomain;\\r\\n        address promotionAddress;\\r\\n        uint claimsCount;\\r\\n        bool isExists;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 => Promotion) public promotions; // Promotion Id => Promotion\\r\\n    mapping(bytes32 => mapping(address => Claim)) public claims;\\r\\n\\r\\n    mapping(bytes32 => uint256) public gasTank;\\r\\n    mapping(uint32 => Receiver) public chains;\\r\\n\\r\\n    IMailbox public constant mailbox =\\r\\n        IMailbox(0xCC737a94FecaeC165AbCf12dED095BB13F037685);\\r\\n    IInterchainGasPaymaster public constant igp =\\r\\n        IInterchainGasPaymaster(0xF90cB82a76492614D07B82a7658917f3aC811Ac1);\\r\\n    IInterchainQueryRouter public constant iqsRouter =\\r\\n        IInterchainQueryRouter(0xF782C6C4A02f2c71BB8a1Db0166FAB40ea956818);\\r\\n\\r\\n    event NewChainAdded(uint32 destinationDomain);\\r\\n    event GasTankFilled(bytes32 promotionId, uint256 amount);\\r\\n    event GasTankRefunded(bytes32 promotionId, uint256 amount);\\r\\n    event PromotionCreated(bytes32 promotionId,address promotionAddress,uint32 destinationDomain,address creator,uint createdAt,uint claimsPerPerson,string badgeURI);\\r\\n    event ClaimedPromotion(bytes32 promotionId,address promotionAddress,address claimer,uint32 destinationDomain,uint claimsCount,uint claimedAt);\\r\\n\\r\\n    function addChain(\\r\\n        uint32 destinationDomain,\\r\\n        address destinationReceiver,\\r\\n        address destinationMailbox\\r\\n    ) public onlyOwner {\\r\\n        chains[destinationDomain] = Receiver(\\r\\n            addressToBytes32(destinationReceiver),\\r\\n            destinationMailbox,\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _getAddress(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint32 destinationDomain,\\r\\n        uint claimsPerPerson,\\r\\n        string memory badgeURI,\\r\\n        uint _salt\\r\\n    ) internal returns (address) {\\r\\n        bytes memory bytecode = abi.encodePacked(\\r\\n            type(ERC721Promotion).creationCode,\\r\\n            abi.encode(\\r\\n                name,\\r\\n                symbol,\\r\\n                badgeURI,\\r\\n                msg.sender,\\r\\n                claimsPerPerson,\\r\\n                chains[destinationDomain].destinationMailbox\\r\\n            )\\r\\n        );\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                bytes1(0xff),\\r\\n                chains[destinationDomain].destinationReceiverAddress,\\r\\n                bytes32(_salt),\\r\\n                keccak256(bytecode)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        return address(uint160(uint(hash)));\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function createPromotion(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint32 destinationDomain,\\r\\n        uint claimsPerPerson,\\r\\n        string memory badgeURI,\\r\\n        uint _salt\\r\\n    ) public payable {\\r\\n        require(chains[destinationDomain].isExists, \\\"Invalid Destination\\\");\\r\\n        // 1. Create PromotionNFT contract in destination chain and Fill Gas\\r\\n        bytes memory message = abi.encode(\\r\\n            name,\\r\\n            symbol,\\r\\n            badgeURI,\\r\\n            msg.sender,\\r\\n            claimsPerPerson,\\r\\n            bytes32(_salt)\\r\\n        ); \\r\\n\\r\\n        bytes32 messageId = mailbox.dispatch(\\r\\n            destinationDomain,\\r\\n            chains[destinationDomain].destinationReceiverAddress,\\r\\n            message\\r\\n        );\\r\\n        address _promotionAddress=_getAddress(name,symbol,destinationDomain,claimsPerPerson,badgeURI,_salt);\\r\\n        bytes32 _promotionId = keccak256(\\r\\n            abi.encodePacked(\\r\\n                name,\\r\\n                symbol,\\r\\n                _promotionAddress,\\r\\n                destinationDomain,\\r\\n                claimsPerPerson,\\r\\n                badgeURI,\\r\\n                msg.sender,\\r\\n                block.timestamp\\r\\n            )\\r\\n        );\\r\\n        require(promotions[_promotionId].isExists==false,\\\"Promotion exists\\\");\\r\\n    \\r\\n        // 2. Get gas amount\\r\\n        uint256 quotedPayment = getQuotedPayment(destinationDomain);\\r\\n        require(msg.value >= quotedPayment, \\\"Insufficient gas\\\");\\r\\n        gasTank[_promotionId] += (msg.value-quotedPayment);\\r\\n\\r\\n        // 3. Pay for Interchain Gas\\r\\n        igp.payForGas{value: quotedPayment}(\\r\\n            messageId,\\r\\n            destinationDomain,\\r\\n            50000,\\r\\n            msg.sender\\r\\n        );\\r\\n\\r\\n        // 4. Update State Variables\\r\\n        promotions[_promotionId]=Promotion(_promotionAddress,destinationDomain,msg.sender,block.timestamp,claimsPerPerson,true);\\r\\n\\r\\n        // 5. Emit events\\r\\n        if(gasTank[_promotionId]>0)\\r\\n        {\\r\\n            emit GasTankFilled(_promotionId, gasTank[_promotionId]);\\r\\n        }\\r\\n        emit PromotionCreated(_promotionId, _promotionAddress, destinationDomain,msg.sender,block.timestamp, claimsPerPerson, badgeURI);\\r\\n\\r\\n    }\\r\\n\\r\\n    function claimPromotion(\\r\\n        bytes32 _promotionId,\\r\\n        uint32 destinationDomain,\\r\\n        bytes calldata signature,\\r\\n        address claimer\\r\\n    ) public {\\r\\n        require(chains[destinationDomain].isExists, \\\"Invalid Destination\\\");\\r\\n        Promotion memory _promotion=promotions[_promotionId];\\r\\n        Claim memory _claim=claims[_promotionId][claimer];\\r\\n        address _contractAddress=_promotion.promotionAddress;\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\r\\n                _promotionId,\\r\\n                destinationDomain,\\r\\n                _contractAddress,\\r\\n                msg.sender \\r\\n            )\\r\\n        );\\r\\n        require(hash.recover(signature) == claimer, \\\"unauthorized\\\");\\r\\n        require(_promotion.isExists, \\\"Invalid Promotion\\\");\\r\\n        require(\\r\\n            !_claim.isExists ||\\r\\n                _promotion.claimsPerPerson >\\r\\n                _claim.claimsCount,\\r\\n            \\\"No more claims\\\"\\r\\n        );\\r\\n\\r\\n        bytes memory message = abi.encode(claimer);\\r\\n        bytes32 messageId = mailbox.dispatch(\\r\\n            destinationDomain,\\r\\n            addressToBytes32(_contractAddress),\\r\\n            message\\r\\n        );\\r\\n\\r\\n        uint256 quotedPayment = getQuotedPayment(destinationDomain);\\r\\n        require(gasTank[_promotionId] >= quotedPayment, \\\"Insufficient gas\\\");\\r\\n        igp.payForGas{value: quotedPayment}(\\r\\n            messageId,\\r\\n            destinationDomain,\\r\\n            50000,\\r\\n            _promotion.creator\\r\\n        );\\r\\n        uint _currentClaims=_claim.claimsCount;\\r\\n        claims[_promotionId][claimer]=Claim(destinationDomain,_contractAddress,_currentClaims+1,true);\\r\\n\\r\\n        emit ClaimedPromotion(_promotionId,_contractAddress,msg.sender,destinationDomain,_currentClaims+1,block.timestamp);\\r\\n    }\\r\\n\\r\\n    function fillGas(bytes32 _promotionId) public payable {\\r\\n        gasTank[_promotionId] += msg.value;\\r\\n        emit GasTankFilled(_promotionId, gasTank[_promotionId]);\\r\\n    }\\r\\n\\r\\n    function refundGas(bytes32 _promotionId, address _to) public nonReentrant {\\r\\n        require(msg.sender == promotions[_promotionId].creator, \\\"Unauthorized\\\");\\r\\n        require(gasTank[_promotionId] > 0, \\\"No balance\\\");\\r\\n        (bool success, bytes memory data) = payable(_to).call{\\r\\n            value: gasTank[_promotionId]\\r\\n        }(\\\"\\\");\\r\\n        if (success) {\\r\\n            uint _gasAmount = gasTank[_promotionId];\\r\\n            gasTank[_promotionId] = 0;\\r\\n            emit GasTankRefunded(_promotionId, _gasAmount);\\r\\n        } else {\\r\\n            revert(\\\"Failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // GETTERS\\r\\n    function getQuotedPayment(uint32 destinationDomain)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 gasAmount = 50000;\\r\\n        uint256 quotedPayment = igp.quoteGasPayment(\\r\\n            destinationDomain,\\r\\n            gasAmount\\r\\n        );\\r\\n        return quotedPayment;\\r\\n    }\\r\\n\\r\\n    // LIBRARY FUNCTIONS\\r\\n\\r\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\r\\n        return bytes32(uint256(uint160(_addr)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x98cb2b1a789b2fc275e2fd9034d8daaaf3e7c5cc65581541e3291730f9788adc\",\"license\":\"MIT\"},\"contracts/interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/**\\r\\n * @title IInterchainGasPaymaster\\r\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\r\\n * messages to destination chains.\\r\\n */\\r\\ninterface IInterchainGasPaymaster {\\r\\n    /**\\r\\n     * @notice Emitted when a payment is made for a message's gas costs.\\r\\n     * @param messageId The ID of the message to pay for.\\r\\n     * @param gasAmount The amount of destination gas paid for.\\r\\n     * @param payment The amount of native tokens paid.\\r\\n     */\\r\\n    event GasPayment(\\r\\n        bytes32 indexed messageId,\\r\\n        uint256 gasAmount,\\r\\n        uint256 payment\\r\\n    );\\r\\n\\r\\n    function payForGas(\\r\\n        bytes32 _messageId,\\r\\n        uint32 _destinationDomain,\\r\\n        uint256 _gasAmount,\\r\\n        address _refundAddress\\r\\n    ) external payable;\\r\\n\\r\\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x69780ca2e1ee4defcb8bf53175b6832a01b7232726c103082b31eb1ac7c33227\",\"license\":\"MIT\"},\"contracts/interfaces/IInterchainQueryRouter.sol\":{\"content\":\"interface IInterchainQueryRouter {\\r\\n    /**\\r\\n     * @param _destinationDomain Domain of destination chain\\r\\n     * @param target The address of the contract to query on destination chain.\\r\\n     * @param queryData The calldata of the view call to make on the destination\\r\\n     * chain.\\r\\n     * @param callback Callback function selector on `msg.sender` and optionally\\r\\n     * abi-encoded prefix arguments.\\r\\n     * @return messageId The ID of the Hyperlane message encoding the query.\\r\\n     */\\r\\n    function query(\\r\\n        uint32 _destinationDomain,\\r\\n        address target,\\r\\n        bytes calldata queryData,\\r\\n        bytes calldata callback\\r\\n    ) external returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xd38022d2da4b2e4c77fd731126edec27e4cc4176c616cce631bdd26e27d39299\"},\"contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IMailbox {\\r\\n    function dispatch(\\r\\n        uint32 _destinationDomain,\\r\\n        bytes32 _recipientAddress,\\r\\n        bytes calldata _messageBody\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function process(bytes calldata _metadata, bytes calldata _message)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd6cb0a2e1d9a69f4f7b8ac3dc51bfebf547620d2f08ee1f9f2e627d759d6ccc2\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IMessageRecipient {\\r\\n    /**\\r\\n     * @notice Handle an interchain message\\r\\n     * @param _origin Domain ID of the chain from which the message came\\r\\n     * @param _sender Address of the message sender on the origin chain as bytes32\\r\\n     * @param _body Raw bytes content of message body\\r\\n     */\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb973c9a025339a6ee49248143ae8ab0801340675ac19f635df5130e56d8d1250\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/interfaces/IReceiver.sol\":{\"content\":\"interface IReceiver {\\r\\n    function getLatestPromotionDeployment(address claimer)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ac0a7a0339a0ec44b7a46a2aa0564773b7fcbe184a9da8787abffc8614aa04a\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":123,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":3552,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"promotions","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(Promotion)3538_storage)"},{"astId":3559,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"claims","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_mapping(t_address,t_struct(Claim)3547_storage))"},{"astId":3563,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"gasTank","offset":0,"slot":"4","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":3568,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"chains","offset":0,"slot":"5","type":"t_mapping(t_uint32,t_struct(Receiver)3525_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_struct(Claim)3547_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct PromotionMain.Claim)","numberOfBytes":"32","value":"t_struct(Claim)3547_storage"},"t_mapping(t_bytes32,t_mapping(t_address,t_struct(Claim)3547_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(address => struct PromotionMain.Claim))","numberOfBytes":"32","value":"t_mapping(t_address,t_struct(Claim)3547_storage)"},"t_mapping(t_bytes32,t_struct(Promotion)3538_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PromotionMain.Promotion)","numberOfBytes":"32","value":"t_struct(Promotion)3538_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint32,t_struct(Receiver)3525_storage)":{"encoding":"mapping","key":"t_uint32","label":"mapping(uint32 => struct PromotionMain.Receiver)","numberOfBytes":"32","value":"t_struct(Receiver)3525_storage"},"t_struct(Claim)3547_storage":{"encoding":"inplace","label":"struct PromotionMain.Claim","members":[{"astId":3540,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"destinationDomain","offset":0,"slot":"0","type":"t_uint32"},{"astId":3542,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"promotionAddress","offset":4,"slot":"0","type":"t_address"},{"astId":3544,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"claimsCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":3546,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"isExists","offset":0,"slot":"2","type":"t_bool"}],"numberOfBytes":"96"},"t_struct(Promotion)3538_storage":{"encoding":"inplace","label":"struct PromotionMain.Promotion","members":[{"astId":3527,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"promotionAddress","offset":0,"slot":"0","type":"t_address"},{"astId":3529,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"destinationDomain","offset":20,"slot":"0","type":"t_uint32"},{"astId":3531,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"creator","offset":0,"slot":"1","type":"t_address"},{"astId":3533,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"createdAt","offset":0,"slot":"2","type":"t_uint256"},{"astId":3535,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"claimsPerPerson","offset":0,"slot":"3","type":"t_uint256"},{"astId":3537,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"isExists","offset":0,"slot":"4","type":"t_bool"}],"numberOfBytes":"160"},"t_struct(Receiver)3525_storage":{"encoding":"inplace","label":"struct PromotionMain.Receiver","members":[{"astId":3520,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"destinationReceiverAddress","offset":0,"slot":"0","type":"t_bytes32"},{"astId":3522,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"destinationMailbox","offset":0,"slot":"1","type":"t_address"},{"astId":3524,"contract":"contracts/PromotionMain.sol:PromotionMain","label":"isExists","offset":20,"slot":"1","type":"t_bool"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint32":{"encoding":"inplace","label":"uint32","numberOfBytes":"4"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Receiver.sol":{"Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"_mailboxAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"promotionNFTAddress","type":"address"}],"name":"PromotionNFTDeployed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"contractAddress","type":"address"},{"indexed":false,"internalType":"address","name":"creator","type":"address"},{"indexed":false,"internalType":"string","name":"newURI","type":"string"}],"name":"TokenURIChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_bytes32","type":"bytes32"}],"name":"bytes32ToString","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"string","name":"newURI","type":"string"}],"name":"changeTokenURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"deploymentCreator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"promoter","type":"address"}],"name":"getLatestPromotionDeployment","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"bytes","name":"_body","type":"bytes"}],"name":"handle","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"latestPromotionDeployment","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mailbox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"handle(uint32,bytes32,bytes)":{"params":{"_body":"Raw bytes content of message body","_origin":"Domain ID of the chain from which the message came","_sender":"Address of the message sender on the origin chain as bytes32"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4219":{"entryPoint":null,"id":4219,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":64,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:306:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"95:209:23","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:23"},"nodeType":"YulFunctionCall","src":"143:12:23"},"nodeType":"YulExpressionStatement","src":"143:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"116:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"125:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"112:3:23"},"nodeType":"YulFunctionCall","src":"112:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"137:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"108:3:23"},"nodeType":"YulFunctionCall","src":"108:32:23"},"nodeType":"YulIf","src":"105:52:23"},{"nodeType":"YulVariableDeclaration","src":"166:29:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"185:9:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"179:5:23"},"nodeType":"YulFunctionCall","src":"179:16:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"170:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"258:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"267:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"270:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"260:6:23"},"nodeType":"YulFunctionCall","src":"260:12:23"},"nodeType":"YulExpressionStatement","src":"260:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"217:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"228:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"243:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"248:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"239:3:23"},"nodeType":"YulFunctionCall","src":"239:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"252:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"235:3:23"},"nodeType":"YulFunctionCall","src":"235:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"224:3:23"},"nodeType":"YulFunctionCall","src":"224:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"214:2:23"},"nodeType":"YulFunctionCall","src":"214:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"207:6:23"},"nodeType":"YulFunctionCall","src":"207:50:23"},"nodeType":"YulIf","src":"204:70:23"},{"nodeType":"YulAssignment","src":"283:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"293:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"283:6:23"}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"61:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"72:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"84:6:23","type":""}],"src":"14:290:23"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b50604051612adf380380612adf83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051612a466100996000396000818161018c015281816101b9015261020f0152612a466000f3fe60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639201de5511620000625780639201de55146200011a57806397eb01131462000140578063c1c253a9146200016f578063d5438eae146200018657600080fd5b80632b951aa3146200008c57806356d5d47514620000d55780637d45933b14620000ee575b600080fd5b620000b86200009d36600462000535565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ec620000e6366004620005a1565b620001ae565b005b620000b8620000ff36600462000535565b6001602052600090815260409020546001600160a01b031681565b620001316200012b3660046200060b565b620002bb565b604051620000cc919062000675565b620000b86200015136600462000535565b6001600160a01b039081166000908152602081905260409020541690565b620000ec620001803660046200068a565b6200040c565b620000b87f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620001e457600080fd5b60008080808080620001f98789018962000790565b95509550955095509550955060008187878733877f00000000000000000000000000000000000000000000000000000000000000006040516200023c906200050e565b6200024d9695949392919062000849565b8190604051809103906000f59050801580156200026e573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f1b71783b8dedd09b09a23e4631acfd5d04520f7e3c3c9ff1a7fa55aa32834ed29060200160405180910390a15050505050505050505050565b606060005b60208160ff16108015620002f85750828160ff1660208110620002e757620002e7620008b4565b1a60f81b6001600160f81b03191615155b156200031357806200030a81620008ca565b915050620002c0565b60008160ff1667ffffffffffffffff811115620003345762000334620006e5565b6040519080825280601f01601f1916602001820160405280156200035f576020820181803683370190505b509050600091505b60208260ff161080156200039f5750838260ff16602081106200038e576200038e620008b4565b1a60f81b6001600160f81b03191615155b156200040557838260ff1660208110620003bd57620003bd620008b4565b1a60f81b818360ff1681518110620003d957620003d9620008b4565b60200101906001600160f81b031916908160001a90535081620003fc81620008ca565b92505062000367565b9392505050565b6001600160a01b03838116600090815260016020526040902054163314620004665760405162461bcd60e51b8152602060048201526009602482015268139bdd081bdddb995960ba1b604482015260640160405180910390fd5b60405163e0df5b6f60e01b81526001600160a01b0384169063e0df5b6f9062000496908590859060040162000921565b600060405180830381600087803b158015620004b157600080fd5b505af1158015620004c6573d6000803e3d6000fd5b505050507f4c76bac06cb8c6c3a184c7ca049a43e32e126ecccc406b612f103653d9cb0717833384846040516200050194939291906200093f565b60405180910390a1505050565b612098806200097983390190565b6001600160a01b03811681146200053257600080fd5b50565b6000602082840312156200054857600080fd5b813562000405816200051c565b60008083601f8401126200056857600080fd5b50813567ffffffffffffffff8111156200058157600080fd5b6020830191508360208285010111156200059a57600080fd5b9250929050565b60008060008060608587031215620005b857600080fd5b843563ffffffff81168114620005cd57600080fd5b935060208501359250604085013567ffffffffffffffff811115620005f157600080fd5b620005ff8782880162000555565b95989497509550505050565b6000602082840312156200061e57600080fd5b5035919050565b6000815180845260005b818110156200064d576020818501810151868301820152016200062f565b8181111562000660576000602083870101525b50601f01601f19169290920160200192915050565b60208152600062000405602083018462000625565b600080600060408486031215620006a057600080fd5b8335620006ad816200051c565b9250602084013567ffffffffffffffff811115620006ca57600080fd5b620006d88682870162000555565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200070d57600080fd5b813567ffffffffffffffff808211156200072b576200072b620006e5565b604051601f8301601f19908116603f01168101908282118183101715620007565762000756620006e5565b816040528381528660208588010111156200077057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215620007aa57600080fd5b863567ffffffffffffffff80821115620007c357600080fd5b620007d18a838b01620006fb565b97506020890135915080821115620007e857600080fd5b620007f68a838b01620006fb565b965060408901359150808211156200080d57600080fd5b506200081c89828a01620006fb565b94505060608701356200082f816200051c565b9598949750929560808101359460a0909101359350915050565b60c0815260006200085e60c083018962000625565b828103602084015262000872818962000625565b9050828103604084015262000888818862000625565b6001600160a01b03968716606085015260808401959095525050921660a0909201919091529392505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8103620008ef57634e487b7160e01b600052601160045260246000fd5b60010192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600062000937602083018486620008f8565b949350505050565b6001600160a01b038581168252841660208201526060604082018190526000906200096e9083018486620008f8565b969550505050505056fe60a06040523480156200001157600080fd5b50604051620020983803806200209883398101604081905262000034916200032b565b8551869086906200004d9060009060208501906200019b565b508051620000639060019060208401906200019b565b505050620000806200007a620000c160201b60201c565b620000c5565b6200008b8462000117565b600a919091556001600160a01b03908116608052600c80546001600160a01b031916929091169190911790555062000426915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001216200013a565b8051620001369060099060208401906200019b565b5050565b6007546001600160a01b03163314620001995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b828054620001a990620003ea565b90600052602060002090601f016020900481019282620001cd576000855562000218565b82601f10620001e857805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000218578251825591602001919060010190620001fb565b50620002269291506200022a565b5090565b5b808211156200022657600081556001016200022b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026957600080fd5b81516001600160401b038082111562000286576200028662000241565b604051601f8301601f19908116603f01168101908282118183101715620002b157620002b162000241565b81604052838152602092508683858801011115620002ce57600080fd5b600091505b83821015620002f25785820183015181830184015290820190620002d3565b83821115620003045760008385830101525b9695505050505050565b80516001600160a01b03811681146200032657600080fd5b919050565b60008060008060008060c087890312156200034557600080fd5b86516001600160401b03808211156200035d57600080fd5b6200036b8a838b0162000257565b975060208901519150808211156200038257600080fd5b620003908a838b0162000257565b96506040890151915080821115620003a757600080fd5b50620003b689828a0162000257565b945050620003c7606088016200030e565b925060808701519150620003de60a088016200030e565b90509295509295509295565b600181811c90821680620003ff57607f821691505b6020821081036200042057634e487b7160e01b600052602260045260246000fd5b50919050565b608051611c4f62000449600039600081816102b401526106420152611c4f6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116b9565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061172e565b610197610192366004611741565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461176f565b610443565b005b6101c26101d236600461179b565b61055d565b6101c26101e536600461179b565b61058e565b6101776105a9565b6101c26102003660046117dc565b610637565b610197610213366004611741565b610713565b600c54610197906001600160a01b031681565b61023e61023936600461186e565b610773565b604051908152602001610166565b6101c26107f9565b6007546001600160a01b0316610197565b61017761080d565b6101c261027b36600461188b565b61081c565b61023e600a5481565b6101c2610297366004611955565b61082b565b6101776102aa366004611741565b610863565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119d5565b61086e565b61015a6102f7366004611a1e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461186e565b610889565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a4c565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610902565b506000908152600460205260409020546001600160a01b031690565b600061044e82610713565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b6105588383610961565b505050565b61056733826109cf565b6105835760405162461bcd60e51b81526004016104b790611a86565b610558838383610a4e565b6105588383836040518060200160405280600081525061082b565b600980546105b690611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611a4c565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066c57600080fd5b600061067a8284018461186e565b6001600160a01b0381166000908152600b6020526040812054919250036106a9576106a481610bbf565b61070c565b600a546001600160a01b0382166000908152600b6020526040902054106107035760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61070c81610d2b565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107dd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b610801610dad565b61080b6000610e07565b565b60606001805461039990611a4c565b610827338383610e59565b5050565b61083533836109cf565b6108515760405162461bcd60e51b81526004016104b790611a86565b61085d84848484610f27565b50505050565b606061038482610f5a565b610876610dad565b805161082790600990602084019061160a565b610891610dad565b6001600160a01b0381166108f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b6108ff81610e07565b50565b6000818152600260205260409020546001600160a01b03166108ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061099682610713565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109db83610713565b9050806001600160a01b0316846001600160a01b03161480610a2257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a465750836001600160a01b0316610a3b8461041c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a6182610713565b6001600160a01b031614610a875760405162461bcd60e51b81526004016104b790611ad3565b6001600160a01b038216610ae95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b610af68383836001611062565b826001600160a01b0316610b0982610713565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016104b790611ad3565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600b602052604090205415610c185760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610c2360085490565b9050610c33600880546001019055565b610c3d82826110aa565b610cd18160098054610c4e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90611a4c565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b50505050506110c4565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610d54908490611b18565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b0316331461080b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610eba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f32848484610a4e565b610f3e8484848461115e565b61085d5760405162461bcd60e51b81526004016104b790611b3e565b6060610f6582610902565b60008281526006602052604081208054610f7e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90611a4c565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050509050600061101560408051602081019091526000815290565b90508051600003611027575092915050565b815115611059578082604051602001611041929190611b90565b60405160208183030381529060405292505050919050565b610a468461125f565b60405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74207472616e73666572207468697320746f6b656e00000000000060448201526064016104b7565b6108278282604051806020016040528060008152506112d3565b6000828152600260205260409020546001600160a01b031661113f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b600082815260066020908152604090912082516105589284019061160a565b60006001600160a01b0384163b1561125457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a2903390899088908890600401611bbf565b6020604051808303816000875af19250505080156111dd575060408051601f3d908101601f191682019092526111da91810190611bfc565b60015b61123a573d80801561120b576040519150601f19603f3d011682016040523d82523d6000602084013e611210565b606091505b5080516000036112325760405162461bcd60e51b81526004016104b790611b3e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a46565b506001949350505050565b606061126a82610902565b600061128160408051602081019091526000815290565b905060008151116112a157604051806020016040528060008152506112cc565b806112ab84611306565b6040516020016112bc929190611b90565b6040516020818303038152906040525b9392505050565b6112dd8383611399565b6112ea600084848461115e565b6105585760405162461bcd60e51b81526004016104b790611b3e565b6060600061131383611532565b600101905060008167ffffffffffffffff811115611333576113336118c9565b6040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136757509392505050565b6001600160a01b0382166113ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114545760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b611462600083836001611062565b6000818152600260205260409020546001600160a01b0316156114c75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106115715772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061159d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115bb57662386f26fc10000830492506010015b6305f5e10083106115d3576305f5e100830492506008015b61271083106115e757612710830492506004015b606483106115f9576064830492506002015b600a83106103845760010192915050565b82805461161690611a4c565b90600052602060002090601f016020900481019282611638576000855561167e565b82601f1061165157805160ff191683800117855561167e565b8280016001018555821561167e579182015b8281111561167e578251825591602001919060010190611663565b5061168a92915061168e565b5090565b5b8082111561168a576000815560010161168f565b6001600160e01b0319811681146108ff57600080fd5b6000602082840312156116cb57600080fd5b81356112cc816116a3565b60005b838110156116f15781810151838201526020016116d9565b8381111561085d5750506000910152565b6000815180845261171a8160208601602086016116d6565b601f01601f19169290920160200192915050565b6020815260006112cc6020830184611702565b60006020828403121561175357600080fd5b5035919050565b6001600160a01b03811681146108ff57600080fd5b6000806040838503121561178257600080fd5b823561178d8161175a565b946020939093013593505050565b6000806000606084860312156117b057600080fd5b83356117bb8161175a565b925060208401356117cb8161175a565b929592945050506040919091013590565b600080600080606085870312156117f257600080fd5b843563ffffffff8116811461180657600080fd5b935060208501359250604085013567ffffffffffffffff8082111561182a57600080fd5b818701915087601f83011261183e57600080fd5b81358181111561184d57600080fd5b88602082850101111561185f57600080fd5b95989497505060200194505050565b60006020828403121561188057600080fd5b81356112cc8161175a565b6000806040838503121561189e57600080fd5b82356118a98161175a565b9150602083013580151581146118be57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118fa576118fa6118c9565b604051601f8501601f19908116603f01168101908282118183101715611922576119226118c9565b8160405280935085815286868601111561193b57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561196b57600080fd5b84356119768161175a565b935060208501356119868161175a565b925060408501359150606085013567ffffffffffffffff8111156119a957600080fd5b8501601f810187136119ba57600080fd5b6119c9878235602084016118df565b91505092959194509250565b6000602082840312156119e757600080fd5b813567ffffffffffffffff8111156119fe57600080fd5b8201601f81018413611a0f57600080fd5b610a46848235602084016118df565b60008060408385031215611a3157600080fd5b8235611a3c8161175a565b915060208301356118be8161175a565b600181811c90821680611a6057607f821691505b602082108103611a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60008219821115611b3957634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611ba28184602088016116d6565b835190830190611bb68183602088016116d6565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf290830184611702565b9695505050505050565b600060208284031215611c0e57600080fd5b81516112cc816116a356fea26469706673582212208d47f1edfdaced66a3bde214a4d9a4f299526bd5fa060c7c58c18d45ae5a80d164736f6c634300080e0033a2646970667358221220a41efb5aa3441510f1c9575b1385e2b058377d00a20344fb17c613d634a58d6164736f6c634300080e0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2ADF CODESIZE SUB DUP1 PUSH2 0x2ADF DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x40 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH2 0x70 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2A46 PUSH2 0x99 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x18C ADD MSTORE DUP2 DUP2 PUSH2 0x1B9 ADD MSTORE PUSH2 0x20F ADD MSTORE PUSH2 0x2A46 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9201DE55 GT PUSH3 0x62 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH3 0x11A JUMPI DUP1 PUSH4 0x97EB0113 EQ PUSH3 0x140 JUMPI DUP1 PUSH4 0xC1C253A9 EQ PUSH3 0x16F JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH3 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B951AA3 EQ PUSH3 0x8C JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH3 0xD5 JUMPI DUP1 PUSH4 0x7D45933B EQ PUSH3 0xEE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xB8 PUSH3 0x9D CALLDATASIZE PUSH1 0x4 PUSH3 0x535 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xEC PUSH3 0xE6 CALLDATASIZE PUSH1 0x4 PUSH3 0x5A1 JUMP JUMPDEST PUSH3 0x1AE JUMP JUMPDEST STOP JUMPDEST PUSH3 0xB8 PUSH3 0xFF CALLDATASIZE PUSH1 0x4 PUSH3 0x535 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x131 PUSH3 0x12B CALLDATASIZE PUSH1 0x4 PUSH3 0x60B JUMP JUMPDEST PUSH3 0x2BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xCC SWAP2 SWAP1 PUSH3 0x675 JUMP JUMPDEST PUSH3 0xB8 PUSH3 0x151 CALLDATASIZE PUSH1 0x4 PUSH3 0x535 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH3 0xEC PUSH3 0x180 CALLDATASIZE PUSH1 0x4 PUSH3 0x68A JUMP JUMPDEST PUSH3 0x40C JUMP JUMPDEST PUSH3 0xB8 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH3 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH3 0x1F9 DUP8 DUP10 ADD DUP10 PUSH3 0x790 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP PUSH1 0x0 DUP2 DUP8 DUP8 DUP8 CALLER DUP8 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH3 0x23C SWAP1 PUSH3 0x50E JUMP JUMPDEST PUSH3 0x24D SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x849 JUMP JUMPDEST DUP2 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE2 SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x26E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 MSTORE SWAP1 SWAP2 POP PUSH32 0x1B71783B8DEDD09B09A23E4631ACFD5D04520F7E3C3C9FF1A7FA55AA32834ED2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xFF AND LT DUP1 ISZERO PUSH3 0x2F8 JUMPI POP DUP3 DUP2 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH3 0x2E7 JUMPI PUSH3 0x2E7 PUSH3 0x8B4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND ISZERO ISZERO JUMPDEST ISZERO PUSH3 0x313 JUMPI DUP1 PUSH3 0x30A DUP2 PUSH3 0x8CA JUMP JUMPDEST SWAP2 POP POP PUSH3 0x2C0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x334 JUMPI PUSH3 0x334 PUSH3 0x6E5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x35F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH3 0x39F JUMPI POP DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH3 0x38E JUMPI PUSH3 0x38E PUSH3 0x8B4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND ISZERO ISZERO JUMPDEST ISZERO PUSH3 0x405 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH3 0x3BD JUMPI PUSH3 0x3BD PUSH3 0x8B4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0x3D9 JUMPI PUSH3 0x3D9 PUSH3 0x8B4 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH3 0x3FC DUP2 PUSH3 0x8CA JUMP JUMPDEST SWAP3 POP POP PUSH3 0x367 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND CALLER EQ PUSH3 0x466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x139BDD081BDDDB9959 PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE0DF5B6F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xE0DF5B6F SWAP1 PUSH3 0x496 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH3 0x921 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x4C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x4C76BAC06CB8C6C3A184C7CA049A43E32E126ECCCC406B612F103653D9CB0717 DUP4 CALLER DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0x501 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x2098 DUP1 PUSH3 0x979 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x405 DUP2 PUSH3 0x51C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH3 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x5CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5FF DUP8 DUP3 DUP9 ADD PUSH3 0x555 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x61E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x64D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x62F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x660 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x405 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x625 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x6A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH3 0x6AD DUP2 PUSH3 0x51C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x6D8 DUP7 DUP3 DUP8 ADD PUSH3 0x555 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x72B JUMPI PUSH3 0x72B PUSH3 0x6E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x756 JUMPI PUSH3 0x756 PUSH3 0x6E5 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x770 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x7AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x7C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7D1 DUP11 DUP4 DUP12 ADD PUSH3 0x6FB JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7F6 DUP11 DUP4 DUP12 ADD PUSH3 0x6FB JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x80D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x81C DUP10 DUP3 DUP11 ADD PUSH3 0x6FB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH3 0x82F DUP2 PUSH3 0x51C JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x85E PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x625 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x872 DUP2 DUP10 PUSH3 0x625 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x888 DUP2 DUP9 PUSH3 0x625 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP SWAP3 AND PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH3 0x8EF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x937 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH3 0x8F8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x96E SWAP1 DUP4 ADD DUP5 DUP7 PUSH3 0x8F8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2098 CODESIZE SUB DUP1 PUSH3 0x2098 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x32B JUMP JUMPDEST DUP6 MLOAD DUP7 SWAP1 DUP7 SWAP1 PUSH3 0x4D SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x63 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP POP PUSH3 0x80 PUSH3 0x7A PUSH3 0xC1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xC5 JUMP JUMPDEST PUSH3 0x8B DUP5 PUSH3 0x117 JUMP JUMPDEST PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x426 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x121 PUSH3 0x13A JUMP JUMPDEST DUP1 MLOAD PUSH3 0x136 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x199 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1A9 SWAP1 PUSH3 0x3EA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1CD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1E8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x218 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x218 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1FB JUMP JUMPDEST POP PUSH3 0x226 SWAP3 SWAP2 POP PUSH3 0x22A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x226 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x22B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2B1 JUMPI PUSH3 0x2B1 PUSH3 0x241 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x2F2 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x304 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x36B DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x390 DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3B6 DUP10 DUP3 DUP11 ADD PUSH3 0x257 JUMP JUMPDEST SWAP5 POP POP PUSH3 0x3C7 PUSH1 0x60 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD SWAP2 POP PUSH3 0x3DE PUSH1 0xA0 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x3FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x420 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1C4F PUSH3 0x449 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B4 ADD MSTORE PUSH2 0x642 ADD MSTORE PUSH2 0x1C4F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xB212BA9F EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4F8AAAC6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6769A0C4 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST PUSH2 0x197 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x443 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x55D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x177 PUSH2 0x5A9 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DC JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x197 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x7F9 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x197 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH2 0x23E PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x82B JUMP JUMPDEST PUSH2 0x177 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x197 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D5 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x369 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x384 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3C5 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x412 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x412 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x427 DUP3 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E DUP3 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x4C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4DC JUMPI POP PUSH2 0x4DC DUP2 CALLER PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 PUSH2 0x961 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x567 CALLER DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x82B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x5B6 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5E2 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x62F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x604 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x62F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x612 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x67A DUP3 DUP5 ADD DUP5 PUSH2 0x186E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SUB PUSH2 0x6A9 JUMPI PUSH2 0x6A4 DUP2 PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x70C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x70C DUP2 PUSH2 0xD2B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x801 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x80B PUSH1 0x0 PUSH2 0xE07 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST PUSH2 0x827 CALLER DUP4 DUP4 PUSH2 0xE59 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x835 CALLER DUP4 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x85D DUP5 DUP5 DUP5 DUP5 PUSH2 0xF27 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x384 DUP3 PUSH2 0xF5A JUMP JUMPDEST PUSH2 0x876 PUSH2 0xDAD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x827 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH2 0x891 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x8FF DUP2 PUSH2 0xE07 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x996 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9DB DUP4 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xA22 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA46 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA3B DUP5 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA61 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0xAF6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB09 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xC18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x105B1C9958591E481BDDDB9CC8139195 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xC33 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC3D DUP3 DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH1 0x9 DUP1 SLOAD PUSH2 0xC4E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC7A SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCC7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC9C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCAA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xD54 SWAP1 DUP5 SWAP1 PUSH2 0x1B18 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF32 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0xF3E DUP5 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF65 DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF7E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFAA SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFF7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFCC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFF7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFDA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1015 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1027 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1059 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1041 SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA46 DUP5 PUSH2 0x125F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E73666572207468697320746F6B656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x827 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12D3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x113F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x558 SWAP3 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x11A2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11DD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11DA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x123A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1232 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA46 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x126A DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12CC JUMP JUMPDEST DUP1 PUSH2 0x12AB DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12BC SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x12DD DUP4 DUP4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x12EA PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1313 DUP4 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH2 0x1333 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1367 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1454 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x1462 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1571 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x159D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15BB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x15D3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x15E7 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x15F9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x384 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1616 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1638 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1651 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x167E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x167E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1663 JUMP JUMPDEST POP PUSH2 0x168A SWAP3 SWAP2 POP PUSH2 0x168E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x168A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x168F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16F1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x85D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x171A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x178D DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x17BB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x17CB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x185F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x18A9 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x18C9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1976 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1986 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C9 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A3C DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x18BE DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A60 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A80 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B39 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1BA2 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BB6 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SELFBALANCE CALL 0xED REVERT 0xAC 0xED PUSH7 0xA3BDE214A4D9A4 CALLCODE SWAP10 MSTORE PUSH12 0xD5FA060C7C58C18D45AE5A80 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0x1E 0xFB GAS LOG3 DIFFICULTY ISZERO LT CALL 0xC9 JUMPI JUMPDEST SGT DUP6 0xE2 0xB0 PC CALLDATACOPY PUSH30 0xA20344FB17C613D634A58D6164736F6C634300080E0033000000000000 ","sourceMap":"142:2230:17:-:0;;;355:81;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;403:25:17;;;142:2230;;14:290:23;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:23;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:23:o;:::-;142:2230:17;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@bytes32ToString_4417":{"entryPoint":699,"id":4417,"parameterSlots":1,"returnSlots":1},"@changeTokenURI_4341":{"entryPoint":1036,"id":4341,"parameterSlots":3,"returnSlots":0},"@deploymentCreator_4207":{"entryPoint":null,"id":4207,"parameterSlots":0,"returnSlots":0},"@getLatestPromotionDeployment_4353":{"entryPoint":null,"id":4353,"parameterSlots":1,"returnSlots":1},"@handle_4309":{"entryPoint":430,"id":4309,"parameterSlots":4,"returnSlots":0},"@latestPromotionDeployment_4203":{"entryPoint":null,"id":4203,"parameterSlots":0,"returnSlots":0},"@mailbox_4209":{"entryPoint":null,"id":4209,"parameterSlots":0,"returnSlots":0},"abi_decode_bytes_calldata":{"entryPoint":1365,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_string":{"entryPoint":1787,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":1333,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_string_calldata_ptr":{"entryPoint":1674,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32":{"entryPoint":1547,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_address_payablet_uint256t_bytes32":{"entryPoint":1936,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_uint32t_bytes32t_bytes_calldata_ptr":{"entryPoint":1441,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_string":{"entryPoint":1573,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":2296,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_string_calldata_ptr__to_t_address_t_address_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2367,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2337,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1653,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__fromStack_reversed":{"entryPoint":2121,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4e11588b0a1333cd48a2228bc3aa6c8ac69ad064528c33cc670f307bae0cb216__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint8":{"entryPoint":2250,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x32":{"entryPoint":2228,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":1765,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":1308,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7472:23","statements":[{"nodeType":"YulBlock","src":"6:3:23","statements":[]},{"body":{"nodeType":"YulBlock","src":"59:86:23","statements":[{"body":{"nodeType":"YulBlock","src":"123:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"132:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"125:6:23"},"nodeType":"YulFunctionCall","src":"125:12:23"},"nodeType":"YulExpressionStatement","src":"125:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"82:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"108:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"113:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"104:3:23"},"nodeType":"YulFunctionCall","src":"104:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"117:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:23"},"nodeType":"YulFunctionCall","src":"100:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"89:3:23"},"nodeType":"YulFunctionCall","src":"89:31:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"79:2:23"},"nodeType":"YulFunctionCall","src":"79:42:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"72:6:23"},"nodeType":"YulFunctionCall","src":"72:50:23"},"nodeType":"YulIf","src":"69:70:23"}]},"name":"validator_revert_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"48:5:23","type":""}],"src":"14:131:23"},{"body":{"nodeType":"YulBlock","src":"220:177:23","statements":[{"body":{"nodeType":"YulBlock","src":"266:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"275:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"278:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"268:6:23"},"nodeType":"YulFunctionCall","src":"268:12:23"},"nodeType":"YulExpressionStatement","src":"268:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"241:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"250:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"237:3:23"},"nodeType":"YulFunctionCall","src":"237:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"262:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"233:3:23"},"nodeType":"YulFunctionCall","src":"233:32:23"},"nodeType":"YulIf","src":"230:52:23"},{"nodeType":"YulVariableDeclaration","src":"291:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"317:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"304:12:23"},"nodeType":"YulFunctionCall","src":"304:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"295:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"361:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"336:24:23"},"nodeType":"YulFunctionCall","src":"336:31:23"},"nodeType":"YulExpressionStatement","src":"336:31:23"},{"nodeType":"YulAssignment","src":"376:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"386:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"376:6:23"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"186:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"197:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"209:6:23","type":""}],"src":"150:247:23"},{"body":{"nodeType":"YulBlock","src":"503:102:23","statements":[{"nodeType":"YulAssignment","src":"513:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"525:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"536:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"521:3:23"},"nodeType":"YulFunctionCall","src":"521:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"513:4:23"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"555:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"570:6:23"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"586:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"591:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"582:3:23"},"nodeType":"YulFunctionCall","src":"582:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"595:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"578:3:23"},"nodeType":"YulFunctionCall","src":"578:19:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"566:3:23"},"nodeType":"YulFunctionCall","src":"566:32:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"548:6:23"},"nodeType":"YulFunctionCall","src":"548:51:23"},"nodeType":"YulExpressionStatement","src":"548:51:23"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"472:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"483:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"494:4:23","type":""}],"src":"402:203:23"},{"body":{"nodeType":"YulBlock","src":"682:275:23","statements":[{"body":{"nodeType":"YulBlock","src":"731:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"740:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"743:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"733:6:23"},"nodeType":"YulFunctionCall","src":"733:12:23"},"nodeType":"YulExpressionStatement","src":"733:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"710:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"718:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"706:3:23"},"nodeType":"YulFunctionCall","src":"706:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"725:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"702:3:23"},"nodeType":"YulFunctionCall","src":"702:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"695:6:23"},"nodeType":"YulFunctionCall","src":"695:35:23"},"nodeType":"YulIf","src":"692:55:23"},{"nodeType":"YulAssignment","src":"756:30:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"779:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"766:12:23"},"nodeType":"YulFunctionCall","src":"766:20:23"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"756:6:23"}]},{"body":{"nodeType":"YulBlock","src":"829:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"838:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"841:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"831:6:23"},"nodeType":"YulFunctionCall","src":"831:12:23"},"nodeType":"YulExpressionStatement","src":"831:12:23"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"801:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"809:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"798:2:23"},"nodeType":"YulFunctionCall","src":"798:30:23"},"nodeType":"YulIf","src":"795:50:23"},{"nodeType":"YulAssignment","src":"854:29:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"870:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"878:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"866:3:23"},"nodeType":"YulFunctionCall","src":"866:17:23"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"854:8:23"}]},{"body":{"nodeType":"YulBlock","src":"935:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"944:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"947:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"937:6:23"},"nodeType":"YulFunctionCall","src":"937:12:23"},"nodeType":"YulExpressionStatement","src":"937:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"906:6:23"},{"name":"length","nodeType":"YulIdentifier","src":"914:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"902:3:23"},"nodeType":"YulFunctionCall","src":"902:19:23"},{"kind":"number","nodeType":"YulLiteral","src":"923:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"898:3:23"},"nodeType":"YulFunctionCall","src":"898:30:23"},{"name":"end","nodeType":"YulIdentifier","src":"930:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"895:2:23"},"nodeType":"YulFunctionCall","src":"895:39:23"},"nodeType":"YulIf","src":"892:59:23"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"645:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"653:3:23","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"661:8:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"671:6:23","type":""}],"src":"610:347:23"},{"body":{"nodeType":"YulBlock","src":"1084:519:23","statements":[{"body":{"nodeType":"YulBlock","src":"1130:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1139:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1142:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1132:6:23"},"nodeType":"YulFunctionCall","src":"1132:12:23"},"nodeType":"YulExpressionStatement","src":"1132:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1105:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1114:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1101:3:23"},"nodeType":"YulFunctionCall","src":"1101:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1126:2:23","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1097:3:23"},"nodeType":"YulFunctionCall","src":"1097:32:23"},"nodeType":"YulIf","src":"1094:52:23"},{"nodeType":"YulVariableDeclaration","src":"1155:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1181:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1168:12:23"},"nodeType":"YulFunctionCall","src":"1168:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1159:5:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1245:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1254:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1257:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1247:6:23"},"nodeType":"YulFunctionCall","src":"1247:12:23"},"nodeType":"YulExpressionStatement","src":"1247:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1213:5:23"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1224:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"1231:10:23","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1220:3:23"},"nodeType":"YulFunctionCall","src":"1220:22:23"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1210:2:23"},"nodeType":"YulFunctionCall","src":"1210:33:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1203:6:23"},"nodeType":"YulFunctionCall","src":"1203:41:23"},"nodeType":"YulIf","src":"1200:61:23"},{"nodeType":"YulAssignment","src":"1270:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"1280:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1270:6:23"}]},{"nodeType":"YulAssignment","src":"1294:42:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1321:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1332:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1317:3:23"},"nodeType":"YulFunctionCall","src":"1317:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1304:12:23"},"nodeType":"YulFunctionCall","src":"1304:32:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1294:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"1345:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1376:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"1387:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1372:3:23"},"nodeType":"YulFunctionCall","src":"1372:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1359:12:23"},"nodeType":"YulFunctionCall","src":"1359:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1349:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1434:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1443:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1446:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1436:6:23"},"nodeType":"YulFunctionCall","src":"1436:12:23"},"nodeType":"YulExpressionStatement","src":"1436:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1406:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"1414:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1403:2:23"},"nodeType":"YulFunctionCall","src":"1403:30:23"},"nodeType":"YulIf","src":"1400:50:23"},{"nodeType":"YulVariableDeclaration","src":"1459:84:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1515:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"1526:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1511:3:23"},"nodeType":"YulFunctionCall","src":"1511:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1535:7:23"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"1485:25:23"},"nodeType":"YulFunctionCall","src":"1485:58:23"},"variables":[{"name":"value2_1","nodeType":"YulTypedName","src":"1463:8:23","type":""},{"name":"value3_1","nodeType":"YulTypedName","src":"1473:8:23","type":""}]},{"nodeType":"YulAssignment","src":"1552:18:23","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"1562:8:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1552:6:23"}]},{"nodeType":"YulAssignment","src":"1579:18:23","value":{"name":"value3_1","nodeType":"YulIdentifier","src":"1589:8:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1579:6:23"}]}]},"name":"abi_decode_tuple_t_uint32t_bytes32t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1026:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1037:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1049:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1057:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1065:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1073:6:23","type":""}],"src":"962:641:23"},{"body":{"nodeType":"YulBlock","src":"1678:110:23","statements":[{"body":{"nodeType":"YulBlock","src":"1724:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1733:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1736:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1726:6:23"},"nodeType":"YulFunctionCall","src":"1726:12:23"},"nodeType":"YulExpressionStatement","src":"1726:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1699:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"1708:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1695:3:23"},"nodeType":"YulFunctionCall","src":"1695:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"1720:2:23","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1691:3:23"},"nodeType":"YulFunctionCall","src":"1691:32:23"},"nodeType":"YulIf","src":"1688:52:23"},{"nodeType":"YulAssignment","src":"1749:33:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1772:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1759:12:23"},"nodeType":"YulFunctionCall","src":"1759:23:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1749:6:23"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1644:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1655:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1667:6:23","type":""}],"src":"1608:180:23"},{"body":{"nodeType":"YulBlock","src":"1843:422:23","statements":[{"nodeType":"YulVariableDeclaration","src":"1853:26:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1873:5:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1867:5:23"},"nodeType":"YulFunctionCall","src":"1867:12:23"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1857:6:23","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1895:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"1900:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1888:6:23"},"nodeType":"YulFunctionCall","src":"1888:19:23"},"nodeType":"YulExpressionStatement","src":"1888:19:23"},{"nodeType":"YulVariableDeclaration","src":"1916:10:23","value":{"kind":"number","nodeType":"YulLiteral","src":"1925:1:23","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1920:1:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"1987:110:23","statements":[{"nodeType":"YulVariableDeclaration","src":"2001:14:23","value":{"kind":"number","nodeType":"YulLiteral","src":"2011:4:23","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2005:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2043:3:23"},{"name":"i","nodeType":"YulIdentifier","src":"2048:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2039:3:23"},"nodeType":"YulFunctionCall","src":"2039:11:23"},{"name":"_1","nodeType":"YulIdentifier","src":"2052:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2035:3:23"},"nodeType":"YulFunctionCall","src":"2035:20:23"},{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2071:5:23"},{"name":"i","nodeType":"YulIdentifier","src":"2078:1:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2067:3:23"},"nodeType":"YulFunctionCall","src":"2067:13:23"},{"name":"_1","nodeType":"YulIdentifier","src":"2082:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2063:3:23"},"nodeType":"YulFunctionCall","src":"2063:22:23"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2057:5:23"},"nodeType":"YulFunctionCall","src":"2057:29:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2028:6:23"},"nodeType":"YulFunctionCall","src":"2028:59:23"},"nodeType":"YulExpressionStatement","src":"2028:59:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1946:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"1949:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1943:2:23"},"nodeType":"YulFunctionCall","src":"1943:13:23"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1957:21:23","statements":[{"nodeType":"YulAssignment","src":"1959:17:23","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1968:1:23"},{"kind":"number","nodeType":"YulLiteral","src":"1971:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1964:3:23"},"nodeType":"YulFunctionCall","src":"1964:12:23"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1959:1:23"}]}]},"pre":{"nodeType":"YulBlock","src":"1939:3:23","statements":[]},"src":"1935:162:23"},{"body":{"nodeType":"YulBlock","src":"2131:62:23","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2160:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"2165:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2156:3:23"},"nodeType":"YulFunctionCall","src":"2156:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"2174:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2152:3:23"},"nodeType":"YulFunctionCall","src":"2152:27:23"},{"kind":"number","nodeType":"YulLiteral","src":"2181:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2145:6:23"},"nodeType":"YulFunctionCall","src":"2145:38:23"},"nodeType":"YulExpressionStatement","src":"2145:38:23"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2112:1:23"},{"name":"length","nodeType":"YulIdentifier","src":"2115:6:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2109:2:23"},"nodeType":"YulFunctionCall","src":"2109:13:23"},"nodeType":"YulIf","src":"2106:87:23"},{"nodeType":"YulAssignment","src":"2202:57:23","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2217:3:23"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2230:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2238:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2226:3:23"},"nodeType":"YulFunctionCall","src":"2226:15:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2247:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2243:3:23"},"nodeType":"YulFunctionCall","src":"2243:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2222:3:23"},"nodeType":"YulFunctionCall","src":"2222:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2213:3:23"},"nodeType":"YulFunctionCall","src":"2213:39:23"},{"kind":"number","nodeType":"YulLiteral","src":"2254:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2209:3:23"},"nodeType":"YulFunctionCall","src":"2209:50:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2202:3:23"}]}]},"name":"abi_encode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1820:5:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1827:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1835:3:23","type":""}],"src":"1793:472:23"},{"body":{"nodeType":"YulBlock","src":"2391:99:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2408:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2419:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2401:6:23"},"nodeType":"YulFunctionCall","src":"2401:21:23"},"nodeType":"YulExpressionStatement","src":"2401:21:23"},{"nodeType":"YulAssignment","src":"2431:53:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2457:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2469:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2480:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2465:3:23"},"nodeType":"YulFunctionCall","src":"2465:18:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"2439:17:23"},"nodeType":"YulFunctionCall","src":"2439:45:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2431:4:23"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2360:9:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2371:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2382:4:23","type":""}],"src":"2270:220:23"},{"body":{"nodeType":"YulBlock","src":"2602:438:23","statements":[{"body":{"nodeType":"YulBlock","src":"2648:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2657:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2660:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2650:6:23"},"nodeType":"YulFunctionCall","src":"2650:12:23"},"nodeType":"YulExpressionStatement","src":"2650:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2623:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"2632:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2619:3:23"},"nodeType":"YulFunctionCall","src":"2619:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"2644:2:23","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2615:3:23"},"nodeType":"YulFunctionCall","src":"2615:32:23"},"nodeType":"YulIf","src":"2612:52:23"},{"nodeType":"YulVariableDeclaration","src":"2673:36:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2699:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2686:12:23"},"nodeType":"YulFunctionCall","src":"2686:23:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"2677:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2743:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"2718:24:23"},"nodeType":"YulFunctionCall","src":"2718:31:23"},"nodeType":"YulExpressionStatement","src":"2718:31:23"},{"nodeType":"YulAssignment","src":"2758:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"2768:5:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2758:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"2782:46:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2813:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"2824:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2809:3:23"},"nodeType":"YulFunctionCall","src":"2809:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2796:12:23"},"nodeType":"YulFunctionCall","src":"2796:32:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2786:6:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"2871:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2880:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2883:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2873:6:23"},"nodeType":"YulFunctionCall","src":"2873:12:23"},"nodeType":"YulExpressionStatement","src":"2873:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2843:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"2851:18:23","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2840:2:23"},"nodeType":"YulFunctionCall","src":"2840:30:23"},"nodeType":"YulIf","src":"2837:50:23"},{"nodeType":"YulVariableDeclaration","src":"2896:84:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2952:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"2963:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2948:3:23"},"nodeType":"YulFunctionCall","src":"2948:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2972:7:23"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"2922:25:23"},"nodeType":"YulFunctionCall","src":"2922:58:23"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"2900:8:23","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"2910:8:23","type":""}]},{"nodeType":"YulAssignment","src":"2989:18:23","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"2999:8:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2989:6:23"}]},{"nodeType":"YulAssignment","src":"3016:18:23","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"3026:8:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3016:6:23"}]}]},"name":"abi_decode_tuple_t_addresst_string_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2552:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2563:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2575:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2583:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2591:6:23","type":""}],"src":"2495:545:23"},{"body":{"nodeType":"YulBlock","src":"3077:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3094:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3101:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3106:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3097:3:23"},"nodeType":"YulFunctionCall","src":"3097:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3087:6:23"},"nodeType":"YulFunctionCall","src":"3087:31:23"},"nodeType":"YulExpressionStatement","src":"3087:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3134:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3137:4:23","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3127:6:23"},"nodeType":"YulFunctionCall","src":"3127:15:23"},"nodeType":"YulExpressionStatement","src":"3127:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3158:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3161:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3151:6:23"},"nodeType":"YulFunctionCall","src":"3151:15:23"},"nodeType":"YulExpressionStatement","src":"3151:15:23"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3045:127:23"},{"body":{"nodeType":"YulBlock","src":"3230:666:23","statements":[{"body":{"nodeType":"YulBlock","src":"3279:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3288:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3291:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3281:6:23"},"nodeType":"YulFunctionCall","src":"3281:12:23"},"nodeType":"YulExpressionStatement","src":"3281:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3258:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3266:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3254:3:23"},"nodeType":"YulFunctionCall","src":"3254:17:23"},{"name":"end","nodeType":"YulIdentifier","src":"3273:3:23"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3250:3:23"},"nodeType":"YulFunctionCall","src":"3250:27:23"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3243:6:23"},"nodeType":"YulFunctionCall","src":"3243:35:23"},"nodeType":"YulIf","src":"3240:55:23"},{"nodeType":"YulVariableDeclaration","src":"3304:30:23","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3327:6:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3314:12:23"},"nodeType":"YulFunctionCall","src":"3314:20:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3308:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3343:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"3353:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"3347:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3394:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3396:16:23"},"nodeType":"YulFunctionCall","src":"3396:18:23"},"nodeType":"YulExpressionStatement","src":"3396:18:23"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3386:2:23"},{"name":"_2","nodeType":"YulIdentifier","src":"3390:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3383:2:23"},"nodeType":"YulFunctionCall","src":"3383:10:23"},"nodeType":"YulIf","src":"3380:36:23"},{"nodeType":"YulVariableDeclaration","src":"3425:17:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3439:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3435:3:23"},"nodeType":"YulFunctionCall","src":"3435:7:23"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"3429:2:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3451:23:23","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3471:2:23","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3465:5:23"},"nodeType":"YulFunctionCall","src":"3465:9:23"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"3455:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3483:71:23","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3505:6:23"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"3529:2:23"},{"kind":"number","nodeType":"YulLiteral","src":"3533:4:23","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3525:3:23"},"nodeType":"YulFunctionCall","src":"3525:13:23"},{"name":"_3","nodeType":"YulIdentifier","src":"3540:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3521:3:23"},"nodeType":"YulFunctionCall","src":"3521:22:23"},{"kind":"number","nodeType":"YulLiteral","src":"3545:2:23","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3517:3:23"},"nodeType":"YulFunctionCall","src":"3517:31:23"},{"name":"_3","nodeType":"YulIdentifier","src":"3550:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3513:3:23"},"nodeType":"YulFunctionCall","src":"3513:40:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3501:3:23"},"nodeType":"YulFunctionCall","src":"3501:53:23"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"3487:10:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"3613:22:23","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3615:16:23"},"nodeType":"YulFunctionCall","src":"3615:18:23"},"nodeType":"YulExpressionStatement","src":"3615:18:23"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3572:10:23"},{"name":"_2","nodeType":"YulIdentifier","src":"3584:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3569:2:23"},"nodeType":"YulFunctionCall","src":"3569:18:23"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3592:10:23"},{"name":"memPtr","nodeType":"YulIdentifier","src":"3604:6:23"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3589:2:23"},"nodeType":"YulFunctionCall","src":"3589:22:23"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3566:2:23"},"nodeType":"YulFunctionCall","src":"3566:46:23"},"nodeType":"YulIf","src":"3563:72:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3651:2:23","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"3655:10:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3644:6:23"},"nodeType":"YulFunctionCall","src":"3644:22:23"},"nodeType":"YulExpressionStatement","src":"3644:22:23"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3682:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3690:2:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3675:6:23"},"nodeType":"YulFunctionCall","src":"3675:18:23"},"nodeType":"YulExpressionStatement","src":"3675:18:23"},{"body":{"nodeType":"YulBlock","src":"3741:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3750:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3753:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3743:6:23"},"nodeType":"YulFunctionCall","src":"3743:12:23"},"nodeType":"YulExpressionStatement","src":"3743:12:23"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3716:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3724:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3712:3:23"},"nodeType":"YulFunctionCall","src":"3712:15:23"},{"kind":"number","nodeType":"YulLiteral","src":"3729:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3708:3:23"},"nodeType":"YulFunctionCall","src":"3708:26:23"},{"name":"end","nodeType":"YulIdentifier","src":"3736:3:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3705:2:23"},"nodeType":"YulFunctionCall","src":"3705:35:23"},"nodeType":"YulIf","src":"3702:55:23"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3783:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3791:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3779:3:23"},"nodeType":"YulFunctionCall","src":"3779:17:23"},{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3802:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"3810:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3798:3:23"},"nodeType":"YulFunctionCall","src":"3798:17:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3817:2:23"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3766:12:23"},"nodeType":"YulFunctionCall","src":"3766:54:23"},"nodeType":"YulExpressionStatement","src":"3766:54:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"3844:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"3852:2:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3840:3:23"},"nodeType":"YulFunctionCall","src":"3840:15:23"},{"kind":"number","nodeType":"YulLiteral","src":"3857:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3836:3:23"},"nodeType":"YulFunctionCall","src":"3836:26:23"},{"kind":"number","nodeType":"YulLiteral","src":"3864:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3829:6:23"},"nodeType":"YulFunctionCall","src":"3829:37:23"},"nodeType":"YulExpressionStatement","src":"3829:37:23"},{"nodeType":"YulAssignment","src":"3875:15:23","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"3884:6:23"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3875:5:23"}]}]},"name":"abi_decode_string","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3204:6:23","type":""},{"name":"end","nodeType":"YulTypedName","src":"3212:3:23","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"3220:5:23","type":""}],"src":"3177:719:23"},{"body":{"nodeType":"YulBlock","src":"4094:832:23","statements":[{"body":{"nodeType":"YulBlock","src":"4141:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4150:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4153:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4143:6:23"},"nodeType":"YulFunctionCall","src":"4143:12:23"},"nodeType":"YulExpressionStatement","src":"4143:12:23"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4115:7:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"4124:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4111:3:23"},"nodeType":"YulFunctionCall","src":"4111:23:23"},{"kind":"number","nodeType":"YulLiteral","src":"4136:3:23","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4107:3:23"},"nodeType":"YulFunctionCall","src":"4107:33:23"},"nodeType":"YulIf","src":"4104:53:23"},{"nodeType":"YulVariableDeclaration","src":"4166:37:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4193:9:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4180:12:23"},"nodeType":"YulFunctionCall","src":"4180:23:23"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4170:6:23","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4212:28:23","value":{"kind":"number","nodeType":"YulLiteral","src":"4222:18:23","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"4216:2:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4267:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4276:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4279:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4269:6:23"},"nodeType":"YulFunctionCall","src":"4269:12:23"},"nodeType":"YulExpressionStatement","src":"4269:12:23"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4255:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4263:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4252:2:23"},"nodeType":"YulFunctionCall","src":"4252:14:23"},"nodeType":"YulIf","src":"4249:34:23"},{"nodeType":"YulAssignment","src":"4292:60:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4324:9:23"},{"name":"offset","nodeType":"YulIdentifier","src":"4335:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4320:3:23"},"nodeType":"YulFunctionCall","src":"4320:22:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4344:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4302:17:23"},"nodeType":"YulFunctionCall","src":"4302:50:23"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4292:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"4361:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4394:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4405:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4390:3:23"},"nodeType":"YulFunctionCall","src":"4390:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4377:12:23"},"nodeType":"YulFunctionCall","src":"4377:32:23"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"4365:8:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4438:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4447:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4450:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4440:6:23"},"nodeType":"YulFunctionCall","src":"4440:12:23"},"nodeType":"YulExpressionStatement","src":"4440:12:23"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"4424:8:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4434:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4421:2:23"},"nodeType":"YulFunctionCall","src":"4421:16:23"},"nodeType":"YulIf","src":"4418:36:23"},{"nodeType":"YulAssignment","src":"4463:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4495:9:23"},{"name":"offset_1","nodeType":"YulIdentifier","src":"4506:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4491:3:23"},"nodeType":"YulFunctionCall","src":"4491:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4517:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4473:17:23"},"nodeType":"YulFunctionCall","src":"4473:52:23"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4463:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"4534:48:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4567:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4578:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4563:3:23"},"nodeType":"YulFunctionCall","src":"4563:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4550:12:23"},"nodeType":"YulFunctionCall","src":"4550:32:23"},"variables":[{"name":"offset_2","nodeType":"YulTypedName","src":"4538:8:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"4611:16:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4620:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4623:1:23","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4613:6:23"},"nodeType":"YulFunctionCall","src":"4613:12:23"},"nodeType":"YulExpressionStatement","src":"4613:12:23"}]},"condition":{"arguments":[{"name":"offset_2","nodeType":"YulIdentifier","src":"4597:8:23"},{"name":"_1","nodeType":"YulIdentifier","src":"4607:2:23"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4594:2:23"},"nodeType":"YulFunctionCall","src":"4594:16:23"},"nodeType":"YulIf","src":"4591:36:23"},{"nodeType":"YulAssignment","src":"4636:62:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4668:9:23"},{"name":"offset_2","nodeType":"YulIdentifier","src":"4679:8:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4664:3:23"},"nodeType":"YulFunctionCall","src":"4664:24:23"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4690:7:23"}],"functionName":{"name":"abi_decode_string","nodeType":"YulIdentifier","src":"4646:17:23"},"nodeType":"YulFunctionCall","src":"4646:52:23"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4636:6:23"}]},{"nodeType":"YulVariableDeclaration","src":"4707:45:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4737:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4748:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4733:3:23"},"nodeType":"YulFunctionCall","src":"4733:18:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4720:12:23"},"nodeType":"YulFunctionCall","src":"4720:32:23"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4711:5:23","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4786:5:23"}],"functionName":{"name":"validator_revert_address","nodeType":"YulIdentifier","src":"4761:24:23"},"nodeType":"YulFunctionCall","src":"4761:31:23"},"nodeType":"YulExpressionStatement","src":"4761:31:23"},{"nodeType":"YulAssignment","src":"4801:15:23","value":{"name":"value","nodeType":"YulIdentifier","src":"4811:5:23"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4801:6:23"}]},{"nodeType":"YulAssignment","src":"4825:43:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4852:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4863:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4848:3:23"},"nodeType":"YulFunctionCall","src":"4848:19:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4835:12:23"},"nodeType":"YulFunctionCall","src":"4835:33:23"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4825:6:23"}]},{"nodeType":"YulAssignment","src":"4877:43:23","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4904:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"4915:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4900:3:23"},"nodeType":"YulFunctionCall","src":"4900:19:23"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4887:12:23"},"nodeType":"YulFunctionCall","src":"4887:33:23"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4877:6:23"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_address_payablet_uint256t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4020:9:23","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4031:7:23","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4043:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4051:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4059:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4067:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4075:6:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4083:6:23","type":""}],"src":"3901:1025:23"},{"body":{"nodeType":"YulBlock","src":"5232:518:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5249:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5260:3:23","type":"","value":"192"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5242:6:23"},"nodeType":"YulFunctionCall","src":"5242:22:23"},"nodeType":"YulExpressionStatement","src":"5242:22:23"},{"nodeType":"YulVariableDeclaration","src":"5273:60:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5305:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5317:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5328:3:23","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5313:3:23"},"nodeType":"YulFunctionCall","src":"5313:19:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"5287:17:23"},"nodeType":"YulFunctionCall","src":"5287:46:23"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"5277:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5353:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5364:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5349:3:23"},"nodeType":"YulFunctionCall","src":"5349:18:23"},{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"5373:6:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5381:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5369:3:23"},"nodeType":"YulFunctionCall","src":"5369:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5342:6:23"},"nodeType":"YulFunctionCall","src":"5342:50:23"},"nodeType":"YulExpressionStatement","src":"5342:50:23"},{"nodeType":"YulVariableDeclaration","src":"5401:47:23","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5433:6:23"},{"name":"tail_1","nodeType":"YulIdentifier","src":"5441:6:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"5415:17:23"},"nodeType":"YulFunctionCall","src":"5415:33:23"},"variables":[{"name":"tail_2","nodeType":"YulTypedName","src":"5405:6:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5468:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5479:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5464:3:23"},"nodeType":"YulFunctionCall","src":"5464:18:23"},{"arguments":[{"name":"tail_2","nodeType":"YulIdentifier","src":"5488:6:23"},{"name":"headStart","nodeType":"YulIdentifier","src":"5496:9:23"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5484:3:23"},"nodeType":"YulFunctionCall","src":"5484:22:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5457:6:23"},"nodeType":"YulFunctionCall","src":"5457:50:23"},"nodeType":"YulExpressionStatement","src":"5457:50:23"},{"nodeType":"YulAssignment","src":"5516:41:23","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5542:6:23"},{"name":"tail_2","nodeType":"YulIdentifier","src":"5550:6:23"}],"functionName":{"name":"abi_encode_string","nodeType":"YulIdentifier","src":"5524:17:23"},"nodeType":"YulFunctionCall","src":"5524:33:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5516:4:23"}]},{"nodeType":"YulVariableDeclaration","src":"5566:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5584:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"5589:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5580:3:23"},"nodeType":"YulFunctionCall","src":"5580:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"5593:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5576:3:23"},"nodeType":"YulFunctionCall","src":"5576:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"5570:2:23","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5615:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5626:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5611:3:23"},"nodeType":"YulFunctionCall","src":"5611:18:23"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"5635:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"5643:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5631:3:23"},"nodeType":"YulFunctionCall","src":"5631:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5604:6:23"},"nodeType":"YulFunctionCall","src":"5604:43:23"},"nodeType":"YulExpressionStatement","src":"5604:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5667:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5678:3:23","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5663:3:23"},"nodeType":"YulFunctionCall","src":"5663:19:23"},{"name":"value4","nodeType":"YulIdentifier","src":"5684:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5656:6:23"},"nodeType":"YulFunctionCall","src":"5656:35:23"},"nodeType":"YulExpressionStatement","src":"5656:35:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5711:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"5722:3:23","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5707:3:23"},"nodeType":"YulFunctionCall","src":"5707:19:23"},{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"5732:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"5740:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5728:3:23"},"nodeType":"YulFunctionCall","src":"5728:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5700:6:23"},"nodeType":"YulFunctionCall","src":"5700:44:23"},"nodeType":"YulExpressionStatement","src":"5700:44:23"}]},"name":"abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5161:9:23","type":""},{"name":"value5","nodeType":"YulTypedName","src":"5172:6:23","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5180:6:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5188:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5196:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5204:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5212:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5223:4:23","type":""}],"src":"4931:819:23"},{"body":{"nodeType":"YulBlock","src":"5787:95:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5804:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5811:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5816:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5807:3:23"},"nodeType":"YulFunctionCall","src":"5807:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5797:6:23"},"nodeType":"YulFunctionCall","src":"5797:31:23"},"nodeType":"YulExpressionStatement","src":"5797:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5844:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5847:4:23","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5837:6:23"},"nodeType":"YulFunctionCall","src":"5837:15:23"},"nodeType":"YulExpressionStatement","src":"5837:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5868:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5871:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5861:6:23"},"nodeType":"YulFunctionCall","src":"5861:15:23"},"nodeType":"YulExpressionStatement","src":"5861:15:23"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"5755:127:23"},{"body":{"nodeType":"YulBlock","src":"5932:227:23","statements":[{"nodeType":"YulVariableDeclaration","src":"5942:31:23","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5961:5:23"},{"kind":"number","nodeType":"YulLiteral","src":"5968:4:23","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5957:3:23"},"nodeType":"YulFunctionCall","src":"5957:16:23"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"5946:7:23","type":""}]},{"body":{"nodeType":"YulBlock","src":"6011:111:23","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6032:1:23","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6039:3:23","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6044:10:23","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6035:3:23"},"nodeType":"YulFunctionCall","src":"6035:20:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6025:6:23"},"nodeType":"YulFunctionCall","src":"6025:31:23"},"nodeType":"YulExpressionStatement","src":"6025:31:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6076:1:23","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6079:4:23","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6069:6:23"},"nodeType":"YulFunctionCall","src":"6069:15:23"},"nodeType":"YulExpressionStatement","src":"6069:15:23"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6104:1:23","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6107:4:23","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6097:6:23"},"nodeType":"YulFunctionCall","src":"6097:15:23"},"nodeType":"YulExpressionStatement","src":"6097:15:23"}]},"condition":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"5988:7:23"},{"kind":"number","nodeType":"YulLiteral","src":"5997:4:23","type":"","value":"0xff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5985:2:23"},"nodeType":"YulFunctionCall","src":"5985:17:23"},"nodeType":"YulIf","src":"5982:140:23"},{"nodeType":"YulAssignment","src":"6131:22:23","value":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"6142:7:23"},{"kind":"number","nodeType":"YulLiteral","src":"6151:1:23","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6138:3:23"},"nodeType":"YulFunctionCall","src":"6138:15:23"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"6131:3:23"}]}]},"name":"increment_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5914:5:23","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5924:3:23","type":""}],"src":"5887:272:23"},{"body":{"nodeType":"YulBlock","src":"6338:158:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6355:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6366:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6348:6:23"},"nodeType":"YulFunctionCall","src":"6348:21:23"},"nodeType":"YulExpressionStatement","src":"6348:21:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6389:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6400:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6385:3:23"},"nodeType":"YulFunctionCall","src":"6385:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"6405:1:23","type":"","value":"9"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6378:6:23"},"nodeType":"YulFunctionCall","src":"6378:29:23"},"nodeType":"YulExpressionStatement","src":"6378:29:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6427:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6438:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6423:3:23"},"nodeType":"YulFunctionCall","src":"6423:18:23"},{"hexValue":"4e6f74206f776e6564","kind":"string","nodeType":"YulLiteral","src":"6443:11:23","type":"","value":"Not owned"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6416:6:23"},"nodeType":"YulFunctionCall","src":"6416:39:23"},"nodeType":"YulExpressionStatement","src":"6416:39:23"},{"nodeType":"YulAssignment","src":"6464:26:23","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6476:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6487:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6472:3:23"},"nodeType":"YulFunctionCall","src":"6472:18:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6464:4:23"}]}]},"name":"abi_encode_tuple_t_stringliteral_4e11588b0a1333cd48a2228bc3aa6c8ac69ad064528c33cc670f307bae0cb216__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6315:9:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6329:4:23","type":""}],"src":"6164:332:23"},{"body":{"nodeType":"YulBlock","src":"6568:200:23","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6585:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"6590:6:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6578:6:23"},"nodeType":"YulFunctionCall","src":"6578:19:23"},"nodeType":"YulExpressionStatement","src":"6578:19:23"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6623:3:23"},{"kind":"number","nodeType":"YulLiteral","src":"6628:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6619:3:23"},"nodeType":"YulFunctionCall","src":"6619:14:23"},{"name":"start","nodeType":"YulIdentifier","src":"6635:5:23"},{"name":"length","nodeType":"YulIdentifier","src":"6642:6:23"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"6606:12:23"},"nodeType":"YulFunctionCall","src":"6606:43:23"},"nodeType":"YulExpressionStatement","src":"6606:43:23"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6673:3:23"},{"name":"length","nodeType":"YulIdentifier","src":"6678:6:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6669:3:23"},"nodeType":"YulFunctionCall","src":"6669:16:23"},{"kind":"number","nodeType":"YulLiteral","src":"6687:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6665:3:23"},"nodeType":"YulFunctionCall","src":"6665:27:23"},{"kind":"number","nodeType":"YulLiteral","src":"6694:1:23","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6658:6:23"},"nodeType":"YulFunctionCall","src":"6658:38:23"},"nodeType":"YulExpressionStatement","src":"6658:38:23"},{"nodeType":"YulAssignment","src":"6705:57:23","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6720:3:23"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6733:6:23"},{"kind":"number","nodeType":"YulLiteral","src":"6741:2:23","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6729:3:23"},"nodeType":"YulFunctionCall","src":"6729:15:23"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6750:2:23","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6746:3:23"},"nodeType":"YulFunctionCall","src":"6746:7:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6725:3:23"},"nodeType":"YulFunctionCall","src":"6725:29:23"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6716:3:23"},"nodeType":"YulFunctionCall","src":"6716:39:23"},{"kind":"number","nodeType":"YulLiteral","src":"6757:4:23","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6712:3:23"},"nodeType":"YulFunctionCall","src":"6712:50:23"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6705:3:23"}]}]},"name":"abi_encode_string_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"6537:5:23","type":""},{"name":"length","nodeType":"YulTypedName","src":"6544:6:23","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6552:3:23","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6560:3:23","type":""}],"src":"6501:267:23"},{"body":{"nodeType":"YulBlock","src":"6904:116:23","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6921:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"6932:2:23","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6914:6:23"},"nodeType":"YulFunctionCall","src":"6914:21:23"},"nodeType":"YulExpressionStatement","src":"6914:21:23"},{"nodeType":"YulAssignment","src":"6944:70:23","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6979:6:23"},{"name":"value1","nodeType":"YulIdentifier","src":"6987:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6999:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7010:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6995:3:23"},"nodeType":"YulFunctionCall","src":"6995:18:23"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"6952:26:23"},"nodeType":"YulFunctionCall","src":"6952:62:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6944:4:23"}]}]},"name":"abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6865:9:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6876:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6884:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6895:4:23","type":""}],"src":"6773:247:23"},{"body":{"nodeType":"YulBlock","src":"7212:258:23","statements":[{"nodeType":"YulVariableDeclaration","src":"7222:29:23","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7240:3:23","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"7245:1:23","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"7236:3:23"},"nodeType":"YulFunctionCall","src":"7236:11:23"},{"kind":"number","nodeType":"YulLiteral","src":"7249:1:23","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7232:3:23"},"nodeType":"YulFunctionCall","src":"7232:19:23"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7226:2:23","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7267:9:23"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7282:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"7290:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7278:3:23"},"nodeType":"YulFunctionCall","src":"7278:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7260:6:23"},"nodeType":"YulFunctionCall","src":"7260:34:23"},"nodeType":"YulExpressionStatement","src":"7260:34:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7314:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7325:2:23","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7310:3:23"},"nodeType":"YulFunctionCall","src":"7310:18:23"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7334:6:23"},{"name":"_1","nodeType":"YulIdentifier","src":"7342:2:23"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7330:3:23"},"nodeType":"YulFunctionCall","src":"7330:15:23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7303:6:23"},"nodeType":"YulFunctionCall","src":"7303:43:23"},"nodeType":"YulExpressionStatement","src":"7303:43:23"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7366:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7377:2:23","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7362:3:23"},"nodeType":"YulFunctionCall","src":"7362:18:23"},{"kind":"number","nodeType":"YulLiteral","src":"7382:2:23","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7355:6:23"},"nodeType":"YulFunctionCall","src":"7355:30:23"},"nodeType":"YulExpressionStatement","src":"7355:30:23"},{"nodeType":"YulAssignment","src":"7394:70:23","value":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7429:6:23"},{"name":"value3","nodeType":"YulIdentifier","src":"7437:6:23"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7449:9:23"},{"kind":"number","nodeType":"YulLiteral","src":"7460:2:23","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7445:3:23"},"nodeType":"YulFunctionCall","src":"7445:18:23"}],"functionName":{"name":"abi_encode_string_calldata","nodeType":"YulIdentifier","src":"7402:26:23"},"nodeType":"YulFunctionCall","src":"7402:62:23"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7394:4:23"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_string_calldata_ptr__to_t_address_t_address_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7157:9:23","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7168:6:23","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7176:6:23","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7184:6:23","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7192:6:23","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7203:4:23","type":""}],"src":"7025:445:23"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint32t_bytes32t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            let _1 := 0x20\n            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(pos, length), 0x20), 0)\n        }\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_string_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0xffffffffffffffff\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_address_payablet_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string(add(headStart, offset_1), dataEnd)\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        value2 := abi_decode_string(add(headStart, offset_2), dataEnd)\n        let value := calldataload(add(headStart, 96))\n        validator_revert_address(value)\n        value3 := value\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_address_t_uint256_t_address__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 192)\n        let tail_1 := abi_encode_string(value0, add(headStart, 192))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value1, tail_1)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        tail := abi_encode_string(value2, tail_2)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), and(value5, _1))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint8(value) -> ret\n    {\n        let value_1 := and(value, 0xff)\n        if eq(value_1, 0xff)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        ret := add(value_1, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_4e11588b0a1333cd48a2228bc3aa6c8ac69ad064528c33cc670f307bae0cb216__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Not owned\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_calldata_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string_calldata(value0, value1, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address_t_address_t_string_calldata_ptr__to_t_address_t_address_t_string_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), 96)\n        tail := abi_encode_string_calldata(value2, value3, add(headStart, 96))\n    }\n}","id":23,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4209":[{"length":32,"start":396},{"length":32,"start":441},{"length":32,"start":527}]},"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060043610620000875760003560e01c80639201de5511620000625780639201de55146200011a57806397eb01131462000140578063c1c253a9146200016f578063d5438eae146200018657600080fd5b80632b951aa3146200008c57806356d5d47514620000d55780637d45933b14620000ee575b600080fd5b620000b86200009d36600462000535565b6000602081905290815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ec620000e6366004620005a1565b620001ae565b005b620000b8620000ff36600462000535565b6001602052600090815260409020546001600160a01b031681565b620001316200012b3660046200060b565b620002bb565b604051620000cc919062000675565b620000b86200015136600462000535565b6001600160a01b039081166000908152602081905260409020541690565b620000ec620001803660046200068a565b6200040c565b620000b87f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620001e457600080fd5b60008080808080620001f98789018962000790565b95509550955095509550955060008187878733877f00000000000000000000000000000000000000000000000000000000000000006040516200023c906200050e565b6200024d9695949392919062000849565b8190604051809103906000f59050801580156200026e573d6000803e3d6000fd5b506040516001600160a01b03821681529091507f1b71783b8dedd09b09a23e4631acfd5d04520f7e3c3c9ff1a7fa55aa32834ed29060200160405180910390a15050505050505050505050565b606060005b60208160ff16108015620002f85750828160ff1660208110620002e757620002e7620008b4565b1a60f81b6001600160f81b03191615155b156200031357806200030a81620008ca565b915050620002c0565b60008160ff1667ffffffffffffffff811115620003345762000334620006e5565b6040519080825280601f01601f1916602001820160405280156200035f576020820181803683370190505b509050600091505b60208260ff161080156200039f5750838260ff16602081106200038e576200038e620008b4565b1a60f81b6001600160f81b03191615155b156200040557838260ff1660208110620003bd57620003bd620008b4565b1a60f81b818360ff1681518110620003d957620003d9620008b4565b60200101906001600160f81b031916908160001a90535081620003fc81620008ca565b92505062000367565b9392505050565b6001600160a01b03838116600090815260016020526040902054163314620004665760405162461bcd60e51b8152602060048201526009602482015268139bdd081bdddb995960ba1b604482015260640160405180910390fd5b60405163e0df5b6f60e01b81526001600160a01b0384169063e0df5b6f9062000496908590859060040162000921565b600060405180830381600087803b158015620004b157600080fd5b505af1158015620004c6573d6000803e3d6000fd5b505050507f4c76bac06cb8c6c3a184c7ca049a43e32e126ecccc406b612f103653d9cb0717833384846040516200050194939291906200093f565b60405180910390a1505050565b612098806200097983390190565b6001600160a01b03811681146200053257600080fd5b50565b6000602082840312156200054857600080fd5b813562000405816200051c565b60008083601f8401126200056857600080fd5b50813567ffffffffffffffff8111156200058157600080fd5b6020830191508360208285010111156200059a57600080fd5b9250929050565b60008060008060608587031215620005b857600080fd5b843563ffffffff81168114620005cd57600080fd5b935060208501359250604085013567ffffffffffffffff811115620005f157600080fd5b620005ff8782880162000555565b95989497509550505050565b6000602082840312156200061e57600080fd5b5035919050565b6000815180845260005b818110156200064d576020818501810151868301820152016200062f565b8181111562000660576000602083870101525b50601f01601f19169290920160200192915050565b60208152600062000405602083018462000625565b600080600060408486031215620006a057600080fd5b8335620006ad816200051c565b9250602084013567ffffffffffffffff811115620006ca57600080fd5b620006d88682870162000555565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200070d57600080fd5b813567ffffffffffffffff808211156200072b576200072b620006e5565b604051601f8301601f19908116603f01168101908282118183101715620007565762000756620006e5565b816040528381528660208588010111156200077057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215620007aa57600080fd5b863567ffffffffffffffff80821115620007c357600080fd5b620007d18a838b01620006fb565b97506020890135915080821115620007e857600080fd5b620007f68a838b01620006fb565b965060408901359150808211156200080d57600080fd5b506200081c89828a01620006fb565b94505060608701356200082f816200051c565b9598949750929560808101359460a0909101359350915050565b60c0815260006200085e60c083018962000625565b828103602084015262000872818962000625565b9050828103604084015262000888818862000625565b6001600160a01b03968716606085015260808401959095525050921660a0909201919091529392505050565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff8103620008ef57634e487b7160e01b600052601160045260246000fd5b60010192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152600062000937602083018486620008f8565b949350505050565b6001600160a01b038581168252841660208201526060604082018190526000906200096e9083018486620008f8565b969550505050505056fe60a06040523480156200001157600080fd5b50604051620020983803806200209883398101604081905262000034916200032b565b8551869086906200004d9060009060208501906200019b565b508051620000639060019060208401906200019b565b505050620000806200007a620000c160201b60201c565b620000c5565b6200008b8462000117565b600a919091556001600160a01b03908116608052600c80546001600160a01b031916929091169190911790555062000426915050565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001216200013a565b8051620001369060099060208401906200019b565b5050565b6007546001600160a01b03163314620001995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b828054620001a990620003ea565b90600052602060002090601f016020900481019282620001cd576000855562000218565b82601f10620001e857805160ff191683800117855562000218565b8280016001018555821562000218579182015b8281111562000218578251825591602001919060010190620001fb565b50620002269291506200022a565b5090565b5b808211156200022657600081556001016200022b565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200026957600080fd5b81516001600160401b038082111562000286576200028662000241565b604051601f8301601f19908116603f01168101908282118183101715620002b157620002b162000241565b81604052838152602092508683858801011115620002ce57600080fd5b600091505b83821015620002f25785820183015181830184015290820190620002d3565b83821115620003045760008385830101525b9695505050505050565b80516001600160a01b03811681146200032657600080fd5b919050565b60008060008060008060c087890312156200034557600080fd5b86516001600160401b03808211156200035d57600080fd5b6200036b8a838b0162000257565b975060208901519150808211156200038257600080fd5b620003908a838b0162000257565b96506040890151915080821115620003a757600080fd5b50620003b689828a0162000257565b945050620003c7606088016200030e565b925060808701519150620003de60a088016200030e565b90509295509295509295565b600181811c90821680620003ff57607f821691505b6020821081036200042057634e487b7160e01b600052602260045260246000fd5b50919050565b608051611c4f62000449600039600081816102b401526106420152611c4f6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063b88d4fde1161007c578063b88d4fde14610289578063c87b56dd1461029c578063d5438eae146102af578063e0df5b6f146102d6578063e985e9c5146102e9578063f2fde38b1461032557600080fd5b8063715018a61461024c5780638da5cb5b1461025457806395d89b4114610265578063a22cb4651461026d578063b212ba9f1461028057600080fd5b806342842e0e1161010a57806342842e0e146101d75780634f8aaac6146101ea57806356d5d475146101f25780636352211e146102055780636769a0c41461021857806370a082311461022b57600080fd5b806301ffc9a71461014757806306fdde031461016f578063081812fc14610184578063095ea7b3146101af57806323b872dd146101c4575b600080fd5b61015a6101553660046116b9565b610338565b60405190151581526020015b60405180910390f35b61017761038a565b604051610166919061172e565b610197610192366004611741565b61041c565b6040516001600160a01b039091168152602001610166565b6101c26101bd36600461176f565b610443565b005b6101c26101d236600461179b565b61055d565b6101c26101e536600461179b565b61058e565b6101776105a9565b6101c26102003660046117dc565b610637565b610197610213366004611741565b610713565b600c54610197906001600160a01b031681565b61023e61023936600461186e565b610773565b604051908152602001610166565b6101c26107f9565b6007546001600160a01b0316610197565b61017761080d565b6101c261027b36600461188b565b61081c565b61023e600a5481565b6101c2610297366004611955565b61082b565b6101776102aa366004611741565b610863565b6101977f000000000000000000000000000000000000000000000000000000000000000081565b6101c26102e43660046119d5565b61086e565b61015a6102f7366004611a1e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101c261033336600461186e565b610889565b60006001600160e01b031982166380ac58cd60e01b148061036957506001600160e01b03198216635b5e139f60e01b145b8061038457506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461039990611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611a4c565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b5050505050905090565b600061042782610902565b506000908152600460205260409020546001600160a01b031690565b600061044e82610713565b9050806001600160a01b0316836001600160a01b0316036104c05760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104dc57506104dc81336102f7565b61054e5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104b7565b6105588383610961565b505050565b61056733826109cf565b6105835760405162461bcd60e51b81526004016104b790611a86565b610558838383610a4e565b6105588383836040518060200160405280600081525061082b565b600980546105b690611a4c565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611a4c565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066c57600080fd5b600061067a8284018461186e565b6001600160a01b0381166000908152600b6020526040812054919250036106a9576106a481610bbf565b61070c565b600a546001600160a01b0382166000908152600b6020526040902054106107035760405162461bcd60e51b815260206004820152600e60248201526d4e6f206d6f726520636c61696d7360901b60448201526064016104b7565b61070c81610d2b565b5050505050565b6000818152600260205260408120546001600160a01b0316806103845760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b60006001600160a01b0382166107dd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104b7565b506001600160a01b031660009081526003602052604090205490565b610801610dad565b61080b6000610e07565b565b60606001805461039990611a4c565b610827338383610e59565b5050565b61083533836109cf565b6108515760405162461bcd60e51b81526004016104b790611a86565b61085d84848484610f27565b50505050565b606061038482610f5a565b610876610dad565b805161082790600990602084019061160a565b610891610dad565b6001600160a01b0381166108f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b7565b6108ff81610e07565b50565b6000818152600260205260409020546001600160a01b03166108ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104b7565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061099682610713565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109db83610713565b9050806001600160a01b0316846001600160a01b03161480610a2257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a465750836001600160a01b0316610a3b8461041c565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a6182610713565b6001600160a01b031614610a875760405162461bcd60e51b81526004016104b790611ad3565b6001600160a01b038216610ae95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104b7565b610af68383836001611062565b826001600160a01b0316610b0982610713565b6001600160a01b031614610b2f5760405162461bcd60e51b81526004016104b790611ad3565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600b602052604090205415610c185760405162461bcd60e51b815260206004820152601060248201526f105b1c9958591e481bdddb9cc813919560821b60448201526064016104b7565b6000610c2360085490565b9050610c33600880546001019055565b610c3d82826110aa565b610cd18160098054610c4e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7a90611a4c565b8015610cc75780601f10610c9c57610100808354040283529160200191610cc7565b820191906000526020600020905b815481529060010190602001808311610caa57829003601f168201915b50505050506110c4565b6001600160a01b0382166000818152600b60209081526040918290206001908190558251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a15050565b6001600160a01b0381166000908152600b60205260408120805460019290610d54908490611b18565b90915550506001600160a01b0381166000818152600b6020908152604091829020548251938452908301527f2ace47925ca5e5683eb2c2eab99a115e60455cbfbe81a22bceb46f3399846c64910160405180910390a150565b6007546001600160a01b0316331461080b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104b7565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603610eba5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104b7565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610f32848484610a4e565b610f3e8484848461115e565b61085d5760405162461bcd60e51b81526004016104b790611b3e565b6060610f6582610902565b60008281526006602052604081208054610f7e90611a4c565b80601f0160208091040260200160405190810160405280929190818152602001828054610faa90611a4c565b8015610ff75780601f10610fcc57610100808354040283529160200191610ff7565b820191906000526020600020905b815481529060010190602001808311610fda57829003601f168201915b50505050509050600061101560408051602081019091526000815290565b90508051600003611027575092915050565b815115611059578082604051602001611041929190611b90565b60405160208183030381529060405292505050919050565b610a468461125f565b60405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74207472616e73666572207468697320746f6b656e00000000000060448201526064016104b7565b6108278282604051806020016040528060008152506112d3565b6000828152600260205260409020546001600160a01b031661113f5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b60648201526084016104b7565b600082815260066020908152604090912082516105589284019061160a565b60006001600160a01b0384163b1561125457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a2903390899088908890600401611bbf565b6020604051808303816000875af19250505080156111dd575060408051601f3d908101601f191682019092526111da91810190611bfc565b60015b61123a573d80801561120b576040519150601f19603f3d011682016040523d82523d6000602084013e611210565b606091505b5080516000036112325760405162461bcd60e51b81526004016104b790611b3e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a46565b506001949350505050565b606061126a82610902565b600061128160408051602081019091526000815290565b905060008151116112a157604051806020016040528060008152506112cc565b806112ab84611306565b6040516020016112bc929190611b90565b6040516020818303038152906040525b9392505050565b6112dd8383611399565b6112ea600084848461115e565b6105585760405162461bcd60e51b81526004016104b790611b3e565b6060600061131383611532565b600101905060008167ffffffffffffffff811115611333576113336118c9565b6040519080825280601f01601f19166020018201604052801561135d576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461136757509392505050565b6001600160a01b0382166113ef5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104b7565b6000818152600260205260409020546001600160a01b0316156114545760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b611462600083836001611062565b6000818152600260205260409020546001600160a01b0316156114c75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104b7565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106115715772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061159d576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106115bb57662386f26fc10000830492506010015b6305f5e10083106115d3576305f5e100830492506008015b61271083106115e757612710830492506004015b606483106115f9576064830492506002015b600a83106103845760010192915050565b82805461161690611a4c565b90600052602060002090601f016020900481019282611638576000855561167e565b82601f1061165157805160ff191683800117855561167e565b8280016001018555821561167e579182015b8281111561167e578251825591602001919060010190611663565b5061168a92915061168e565b5090565b5b8082111561168a576000815560010161168f565b6001600160e01b0319811681146108ff57600080fd5b6000602082840312156116cb57600080fd5b81356112cc816116a3565b60005b838110156116f15781810151838201526020016116d9565b8381111561085d5750506000910152565b6000815180845261171a8160208601602086016116d6565b601f01601f19169290920160200192915050565b6020815260006112cc6020830184611702565b60006020828403121561175357600080fd5b5035919050565b6001600160a01b03811681146108ff57600080fd5b6000806040838503121561178257600080fd5b823561178d8161175a565b946020939093013593505050565b6000806000606084860312156117b057600080fd5b83356117bb8161175a565b925060208401356117cb8161175a565b929592945050506040919091013590565b600080600080606085870312156117f257600080fd5b843563ffffffff8116811461180657600080fd5b935060208501359250604085013567ffffffffffffffff8082111561182a57600080fd5b818701915087601f83011261183e57600080fd5b81358181111561184d57600080fd5b88602082850101111561185f57600080fd5b95989497505060200194505050565b60006020828403121561188057600080fd5b81356112cc8161175a565b6000806040838503121561189e57600080fd5b82356118a98161175a565b9150602083013580151581146118be57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156118fa576118fa6118c9565b604051601f8501601f19908116603f01168101908282118183101715611922576119226118c9565b8160405280935085815286868601111561193b57600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561196b57600080fd5b84356119768161175a565b935060208501356119868161175a565b925060408501359150606085013567ffffffffffffffff8111156119a957600080fd5b8501601f810187136119ba57600080fd5b6119c9878235602084016118df565b91505092959194509250565b6000602082840312156119e757600080fd5b813567ffffffffffffffff8111156119fe57600080fd5b8201601f81018413611a0f57600080fd5b610a46848235602084016118df565b60008060408385031215611a3157600080fd5b8235611a3c8161175a565b915060208301356118be8161175a565b600181811c90821680611a6057607f821691505b602082108103611a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60008219821115611b3957634e487b7160e01b600052601160045260246000fd5b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351611ba28184602088016116d6565b835190830190611bb68183602088016116d6565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611bf290830184611702565b9695505050505050565b600060208284031215611c0e57600080fd5b81516112cc816116a356fea26469706673582212208d47f1edfdaced66a3bde214a4d9a4f299526bd5fa060c7c58c18d45ae5a80d164736f6c634300080e0033a2646970667358221220a41efb5aa3441510f1c9575b1385e2b058377d00a20344fb17c613d634a58d6164736f6c634300080e0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x87 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9201DE55 GT PUSH3 0x62 JUMPI DUP1 PUSH4 0x9201DE55 EQ PUSH3 0x11A JUMPI DUP1 PUSH4 0x97EB0113 EQ PUSH3 0x140 JUMPI DUP1 PUSH4 0xC1C253A9 EQ PUSH3 0x16F JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH3 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B951AA3 EQ PUSH3 0x8C JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH3 0xD5 JUMPI DUP1 PUSH4 0x7D45933B EQ PUSH3 0xEE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xB8 PUSH3 0x9D CALLDATASIZE PUSH1 0x4 PUSH3 0x535 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xEC PUSH3 0xE6 CALLDATASIZE PUSH1 0x4 PUSH3 0x5A1 JUMP JUMPDEST PUSH3 0x1AE JUMP JUMPDEST STOP JUMPDEST PUSH3 0xB8 PUSH3 0xFF CALLDATASIZE PUSH1 0x4 PUSH3 0x535 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH3 0x131 PUSH3 0x12B CALLDATASIZE PUSH1 0x4 PUSH3 0x60B JUMP JUMPDEST PUSH3 0x2BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xCC SWAP2 SWAP1 PUSH3 0x675 JUMP JUMPDEST PUSH3 0xB8 PUSH3 0x151 CALLDATASIZE PUSH1 0x4 PUSH3 0x535 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST PUSH3 0xEC PUSH3 0x180 CALLDATASIZE PUSH1 0x4 PUSH3 0x68A JUMP JUMPDEST PUSH3 0x40C JUMP JUMPDEST PUSH3 0xB8 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH3 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH3 0x1F9 DUP8 DUP10 ADD DUP10 PUSH3 0x790 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP PUSH1 0x0 DUP2 DUP8 DUP8 DUP8 CALLER DUP8 PUSH32 0x0 PUSH1 0x40 MLOAD PUSH3 0x23C SWAP1 PUSH3 0x50E JUMP JUMPDEST PUSH3 0x24D SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x849 JUMP JUMPDEST DUP2 SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE2 SWAP1 POP DUP1 ISZERO DUP1 ISZERO PUSH3 0x26E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP2 MSTORE SWAP1 SWAP2 POP PUSH32 0x1B71783B8DEDD09B09A23E4631ACFD5D04520F7E3C3C9FF1A7FA55AA32834ED2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x20 DUP2 PUSH1 0xFF AND LT DUP1 ISZERO PUSH3 0x2F8 JUMPI POP DUP3 DUP2 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH3 0x2E7 JUMPI PUSH3 0x2E7 PUSH3 0x8B4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND ISZERO ISZERO JUMPDEST ISZERO PUSH3 0x313 JUMPI DUP1 PUSH3 0x30A DUP2 PUSH3 0x8CA JUMP JUMPDEST SWAP2 POP POP PUSH3 0x2C0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xFF AND PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x334 JUMPI PUSH3 0x334 PUSH3 0x6E5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x35F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 PUSH1 0xFF AND LT DUP1 ISZERO PUSH3 0x39F JUMPI POP DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH3 0x38E JUMPI PUSH3 0x38E PUSH3 0x8B4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND ISZERO ISZERO JUMPDEST ISZERO PUSH3 0x405 JUMPI DUP4 DUP3 PUSH1 0xFF AND PUSH1 0x20 DUP2 LT PUSH3 0x3BD JUMPI PUSH3 0x3BD PUSH3 0x8B4 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP2 DUP4 PUSH1 0xFF AND DUP2 MLOAD DUP2 LT PUSH3 0x3D9 JUMPI PUSH3 0x3D9 PUSH3 0x8B4 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP2 PUSH3 0x3FC DUP2 PUSH3 0x8CA JUMP JUMPDEST SWAP3 POP POP PUSH3 0x367 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND CALLER EQ PUSH3 0x466 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x139BDD081BDDDB9959 PUSH1 0xBA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE0DF5B6F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xE0DF5B6F SWAP1 PUSH3 0x496 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH3 0x921 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x4B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 0x4C6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH32 0x4C76BAC06CB8C6C3A184C7CA049A43E32E126ECCCC406B612F103653D9CB0717 DUP4 CALLER DUP5 DUP5 PUSH1 0x40 MLOAD PUSH3 0x501 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x93F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH2 0x2098 DUP1 PUSH3 0x979 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x532 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH3 0x405 DUP2 PUSH3 0x51C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH3 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x581 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH3 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH3 0x5CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5FF DUP8 DUP3 DUP9 ADD PUSH3 0x555 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x61E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x64D JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH3 0x62F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x660 JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x405 PUSH1 0x20 DUP4 ADD DUP5 PUSH3 0x625 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x6A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH3 0x6AD DUP2 PUSH3 0x51C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x6CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x6D8 DUP7 DUP3 DUP8 ADD PUSH3 0x555 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x72B JUMPI PUSH3 0x72B PUSH3 0x6E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x756 JUMPI PUSH3 0x756 PUSH3 0x6E5 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x770 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x20 DUP8 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x7AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH3 0x7C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7D1 DUP11 DUP4 DUP12 ADD PUSH3 0x6FB JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x7E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7F6 DUP11 DUP4 DUP12 ADD PUSH3 0x6FB JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x80D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x81C DUP10 DUP3 DUP11 ADD PUSH3 0x6FB JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD CALLDATALOAD PUSH3 0x82F DUP2 PUSH3 0x51C JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 0xA0 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0xC0 DUP2 MSTORE PUSH1 0x0 PUSH3 0x85E PUSH1 0xC0 DUP4 ADD DUP10 PUSH3 0x625 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH3 0x872 DUP2 DUP10 PUSH3 0x625 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x888 DUP2 DUP9 PUSH3 0x625 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP SWAP3 AND PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0xFF DUP2 SUB PUSH3 0x8EF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 DUP3 DUP3 ADD PUSH1 0x20 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP2 ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH3 0x937 PUSH1 0x20 DUP4 ADD DUP5 DUP7 PUSH3 0x8F8 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x96E SWAP1 DUP4 ADD DUP5 DUP7 PUSH3 0x8F8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2098 CODESIZE SUB DUP1 PUSH3 0x2098 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x32B JUMP JUMPDEST DUP6 MLOAD DUP7 SWAP1 DUP7 SWAP1 PUSH3 0x4D SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x63 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP POP PUSH3 0x80 PUSH3 0x7A PUSH3 0xC1 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0xC5 JUMP JUMPDEST PUSH3 0x8B DUP5 PUSH3 0x117 JUMP JUMPDEST PUSH1 0xA SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0xC DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x426 SWAP2 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 0x121 PUSH3 0x13A JUMP JUMPDEST DUP1 MLOAD PUSH3 0x136 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x19B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH3 0x199 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x1A9 SWAP1 PUSH3 0x3EA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1CD JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1E8 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x218 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x218 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x218 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1FB JUMP JUMPDEST POP PUSH3 0x226 SWAP3 SWAP2 POP PUSH3 0x22A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x226 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x22B JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x269 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x286 JUMPI PUSH3 0x286 PUSH3 0x241 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2B1 JUMPI PUSH3 0x2B1 PUSH3 0x241 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x2F2 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x2D3 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x304 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x345 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x36B DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x390 DUP11 DUP4 DUP12 ADD PUSH3 0x257 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3B6 DUP10 DUP3 DUP11 ADD PUSH3 0x257 JUMP JUMPDEST SWAP5 POP POP PUSH3 0x3C7 PUSH1 0x60 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD MLOAD SWAP2 POP PUSH3 0x3DE PUSH1 0xA0 DUP9 ADD PUSH3 0x30E JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x3FF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x420 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1C4F PUSH3 0x449 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B4 ADD MSTORE PUSH2 0x642 ADD MSTORE PUSH2 0x1C4F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0xB88D4FDE GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xD5438EAE EQ PUSH2 0x2AF JUMPI DUP1 PUSH4 0xE0DF5B6F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x26D JUMPI DUP1 PUSH4 0xB212BA9F EQ PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x4F8AAAC6 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x56D5D475 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x205 JUMPI DUP1 PUSH4 0x6769A0C4 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x16F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1AF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C4 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15A PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0x16B9 JUMP JUMPDEST PUSH2 0x338 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x177 PUSH2 0x38A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x166 SWAP2 SWAP1 PUSH2 0x172E JUMP JUMPDEST PUSH2 0x197 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x176F JUMP JUMPDEST PUSH2 0x443 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C2 PUSH2 0x1D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x55D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x179B JUMP JUMPDEST PUSH2 0x58E JUMP JUMPDEST PUSH2 0x177 PUSH2 0x5A9 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x200 CALLDATASIZE PUSH1 0x4 PUSH2 0x17DC JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH2 0x197 PUSH2 0x213 CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x713 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0x197 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x23E PUSH2 0x239 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x773 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x166 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x7F9 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x197 JUMP JUMPDEST PUSH2 0x177 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x27B CALLDATASIZE PUSH1 0x4 PUSH2 0x188B JUMP JUMPDEST PUSH2 0x81C JUMP JUMPDEST PUSH2 0x23E PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x297 CALLDATASIZE PUSH1 0x4 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x82B JUMP JUMPDEST PUSH2 0x177 PUSH2 0x2AA CALLDATASIZE PUSH1 0x4 PUSH2 0x1741 JUMP JUMPDEST PUSH2 0x863 JUMP JUMPDEST PUSH2 0x197 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x2E4 CALLDATASIZE PUSH1 0x4 PUSH2 0x19D5 JUMP JUMPDEST PUSH2 0x86E JUMP JUMPDEST PUSH2 0x15A PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A1E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x1C2 PUSH2 0x333 CALLDATASIZE PUSH1 0x4 PUSH2 0x186E JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x369 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x384 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3C5 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x412 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3E7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x412 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3F5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x427 DUP3 PUSH2 0x902 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44E DUP3 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0x4C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0xF9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND EQ DUP1 PUSH2 0x4DC JUMPI POP PUSH2 0x4DC DUP2 CALLER PUSH2 0x2F7 JUMP JUMPDEST PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 PUSH2 0x961 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x567 CALLER DUP3 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x583 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0x558 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x82B JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH2 0x5B6 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x5E2 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x62F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x604 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x62F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x612 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x66C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x67A DUP3 DUP5 ADD DUP5 PUSH2 0x186E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SUB PUSH2 0x6A9 JUMPI PUSH2 0x6A4 DUP2 PUSH2 0xBBF JUMP JUMPDEST PUSH2 0x70C JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD LT PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E6F206D6F726520636C61696D73 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x70C DUP2 PUSH2 0xD2B JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x384 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3634B21037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x801 PUSH2 0xDAD JUMP JUMPDEST PUSH2 0x80B PUSH1 0x0 PUSH2 0xE07 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x399 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST PUSH2 0x827 CALLER DUP4 DUP4 PUSH2 0xE59 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x835 CALLER DUP4 PUSH2 0x9CF JUMP JUMPDEST PUSH2 0x851 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1A86 JUMP JUMPDEST PUSH2 0x85D DUP5 DUP5 DUP5 DUP5 PUSH2 0xF27 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x384 DUP3 PUSH2 0xF5A JUMP JUMPDEST PUSH2 0x876 PUSH2 0xDAD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x827 SWAP1 PUSH1 0x9 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH2 0x891 PUSH2 0xDAD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x8F6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x8FF DUP2 PUSH2 0xE07 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8FF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH24 0x115490CDCC8C4E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x42 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH2 0x996 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x9DB DUP4 PUSH2 0x713 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xA22 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 PUSH2 0xA46 JUMPI POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA3B DUP5 PUSH2 0x41C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA61 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAE9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0xAF6 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xB09 DUP3 PUSH2 0x713 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xB2F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1AD3 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 DUP2 AND DUP1 DUP7 MSTORE PUSH1 0x3 DUP6 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x0 NOT ADD SWAP1 SSTORE SWAP1 DUP8 AND DUP1 DUP7 MSTORE DUP4 DUP7 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP7 DUP7 MSTORE PUSH1 0x2 SWAP1 SWAP5 MSTORE DUP3 DUP6 KECCAK256 DUP1 SLOAD SWAP1 SWAP3 AND DUP5 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP5 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xC18 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x105B1C9958591E481BDDDB9CC8139195 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC23 PUSH1 0x8 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0xC33 PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC3D DUP3 DUP3 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0xCD1 DUP2 PUSH1 0x9 DUP1 SLOAD PUSH2 0xC4E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC7A SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCC7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xC9C JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCC7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCAA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP PUSH2 0x10C4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0xD54 SWAP1 DUP5 SWAP1 PUSH2 0x1B18 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE PUSH32 0x2ACE47925CA5E5683EB2C2EAB99A115E60455CBFBE81A22BCEB46F3399846C64 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SUB PUSH2 0xEBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0xF32 DUP5 DUP5 DUP5 PUSH2 0xA4E JUMP JUMPDEST PUSH2 0xF3E DUP5 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF65 DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0xF7E SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xFAA SWAP1 PUSH2 0x1A4C JUMP JUMPDEST DUP1 ISZERO PUSH2 0xFF7 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xFCC JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xFF7 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xFDA JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x1015 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1027 JUMPI POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 MLOAD ISZERO PUSH2 0x1059 JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1041 SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA46 DUP5 PUSH2 0x125F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207472616E73666572207468697320746F6B656E000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x827 DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12D3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x113F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524337323155524953746F726167653A2055524920736574206F66206E6F6E PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x32BC34B9BA32B73A103A37B5B2B7 PUSH1 0x91 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD PUSH2 0x558 SWAP3 DUP5 ADD SWAP1 PUSH2 0x160A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO PUSH2 0x1254 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x11A2 SWAP1 CALLER SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x1BBF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x11DD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x11DA SWAP2 DUP2 ADD SWAP1 PUSH2 0x1BFC JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x123A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x120B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1210 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH1 0x0 SUB PUSH2 0x1232 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ SWAP1 POP PUSH2 0xA46 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x126A DUP3 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1281 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x12A1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x12CC JUMP JUMPDEST DUP1 PUSH2 0x12AB DUP5 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12BC SWAP3 SWAP2 SWAP1 PUSH2 0x1B90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x12DD DUP4 DUP4 PUSH2 0x1399 JUMP JUMPDEST PUSH2 0x12EA PUSH1 0x0 DUP5 DUP5 DUP5 PUSH2 0x115E JUMP JUMPDEST PUSH2 0x558 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B7 SWAP1 PUSH2 0x1B3E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1313 DUP4 PUSH2 0x1532 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH2 0x1333 PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x135D JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1367 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x13EF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x1454 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x1462 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x14C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE MLOAD DUP4 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x1571 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x159D JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x15BB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x15D3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x15E7 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x15F9 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x384 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x1616 SWAP1 PUSH2 0x1A4C JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1638 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1651 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x167E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x167E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x167E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1663 JUMP JUMPDEST POP PUSH2 0x168A SWAP3 SWAP2 POP PUSH2 0x168E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x168A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x168F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x16F1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x16D9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x85D JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x171A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x16D6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x12CC PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x178D DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x17B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x17BB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x17CB DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x182A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x184D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x185F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP POP PUSH1 0x20 ADD SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1880 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x12CC DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x189E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x18A9 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP5 GT ISZERO PUSH2 0x18FA JUMPI PUSH2 0x18FA PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP6 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x1922 JUMPI PUSH2 0x1922 PUSH2 0x18C9 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP1 SWAP4 POP DUP6 DUP2 MSTORE DUP7 DUP7 DUP7 ADD GT ISZERO PUSH2 0x193B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 DUP6 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP8 DUP4 ADD ADD MSTORE POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x196B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x1976 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x1986 DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ADD PUSH1 0x1F DUP2 ADD DUP8 SGT PUSH2 0x19BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19C9 DUP8 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD PUSH1 0x1F DUP2 ADD DUP5 SGT PUSH2 0x1A0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA46 DUP5 DUP3 CALLDATALOAD PUSH1 0x20 DUP5 ADD PUSH2 0x18DF JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1A3C DUP2 PUSH2 0x175A JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x18BE DUP2 PUSH2 0x175A JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1A60 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A80 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2D SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x40 DUP3 ADD MSTORE PUSH13 0x1C881BDC88185C1C1C9BDD9959 PUSH1 0x9A SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x37BBB732B9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1B39 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x32 SWAP1 DUP3 ADD MSTORE PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x31B2B4BB32B91034B6B83632B6B2B73A32B9 PUSH1 0x71 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x1BA2 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BB6 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0x16D6 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1BF2 SWAP1 DUP4 ADD DUP5 PUSH2 0x1702 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12CC DUP2 PUSH2 0x16A3 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 SELFBALANCE CALL 0xED REVERT 0xAC 0xED PUSH7 0xA3BDE214A4D9A4 CALLCODE SWAP10 MSTORE PUSH12 0xD5FA060C7C58C18D45AE5A80 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD 0xE STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0x1E 0xFB GAS LOG3 DIFFICULTY ISZERO LT CALL 0xC9 JUMPI JUMPDEST SGT DUP6 0xE2 0xB0 PC CALLDATACOPY PUSH30 0xA20344FB17C613D634A58D6164736F6C634300080E0033000000000000 ","sourceMap":"142:2230:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;188:60;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;188:60:17;;;;;;-1:-1:-1;;;;;566:32:23;;;548:51;;536:2;521:18;188:60:17;;;;;;;;719:721;;;;;;:::i;:::-;;:::i;:::-;;255:52;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;255:52:17;;;1959:410;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1772:179::-;;;;;;:::i;:::-;-1:-1:-1;;;;;1908:35:17;;;1876:7;1908:35;;;;;;;;;;;;;1772:179;1448:316;;;;;;:::i;:::-;;:::i;314:32::-;;;;;719:721;669:10;-1:-1:-1;;;;;683:7:17;669:21;;661:30;;;;;;871:19:::1;::::0;;;;;1081:67:::1;::::0;;::::1;1092:5:::0;1081:67:::1;:::i;:::-;856:292;;;;;;;;;;;;1159:25;1215:5;1236;1256:7;1278:9;1302:10;1327:16;1358:7;1187:189;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;1392:40:17::1;::::0;-1:-1:-1;;;;;566:32:23;;548:51;;1159:217:17;;-1:-1:-1;1392:40:17::1;::::0;536:2:23;521:18;1392:40:17::1;;;;;;;845:595;;;;;;;719:721:::0;;;;:::o;1959:410::-;2050:13;2081:7;2103:65;2114:2;2110:1;:6;;;:26;;;;;2120:8;2129:1;2120:11;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;2120:16:17;;;2110:26;2103:65;;;2153:3;;;;:::i;:::-;;;;2103:65;;;2178:23;2214:1;2204:12;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2204:12:17;;2178:38;;2236:1;2232:5;;2227:99;2243:2;2239:1;:6;;;:26;;;;;2249:8;2258:1;2249:11;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;2249:16:17;;;2239:26;2227:99;;;2303:8;2312:1;2303:11;;;;;;;;;:::i;:::-;;;;2287:10;2298:1;2287:13;;;;;;;;;;:::i;:::-;;;;:27;-1:-1:-1;;;;;2287:27:17;;;;;;;;-1:-1:-1;2267:3:17;;;;:::i;:::-;;;;2227:99;;;2350:10;1959:410;-1:-1:-1;;;1959:410:17:o;1448:316::-;-1:-1:-1;;;;;1575:34:17;;;;;;;:17;:34;;;;;;;1561:10;:48;1553:70;;;;-1:-1:-1;;;1553:70:17;;6366:2:23;1553:70:17;;;6348:21:23;6405:1;6385:18;;;6378:29;-1:-1:-1;;;6423:18:23;;;6416:39;6472:18;;1553:70:17;;;;;;;;1634:52;;-1:-1:-1;;;1634:52:17;;-1:-1:-1;;;;;1634:44:17;;;;;:52;;1679:6;;;;1634:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1704;1720:15;1737:10;1749:6;;1704:52;;;;;;;;;:::i;:::-;;;;;;;;1448:316;;;:::o;-1:-1:-1:-;;;;;;;;:::o;14:131:23:-;-1:-1:-1;;;;;89:31:23;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:247::-;209:6;262:2;250:9;241:7;237:23;233:32;230:52;;;278:1;275;268:12;230:52;317:9;304:23;336:31;361:5;336:31;:::i;610:347::-;661:8;671:6;725:3;718:4;710:6;706:17;702:27;692:55;;743:1;740;733:12;692:55;-1:-1:-1;766:20:23;;809:18;798:30;;795:50;;;841:1;838;831:12;795:50;878:4;870:6;866:17;854:29;;930:3;923:4;914:6;906;902:19;898:30;895:39;892:59;;;947:1;944;937:12;892:59;610:347;;;;;:::o;962:641::-;1049:6;1057;1065;1073;1126:2;1114:9;1105:7;1101:23;1097:32;1094:52;;;1142:1;1139;1132:12;1094:52;1181:9;1168:23;1231:10;1224:5;1220:22;1213:5;1210:33;1200:61;;1257:1;1254;1247:12;1200:61;1280:5;-1:-1:-1;1332:2:23;1317:18;;1304:32;;-1:-1:-1;1387:2:23;1372:18;;1359:32;1414:18;1403:30;;1400:50;;;1446:1;1443;1436:12;1400:50;1485:58;1535:7;1526:6;1515:9;1511:22;1485:58;:::i;:::-;962:641;;;;-1:-1:-1;1562:8:23;-1:-1:-1;;;;962:641:23:o;1608:180::-;1667:6;1720:2;1708:9;1699:7;1695:23;1691:32;1688:52;;;1736:1;1733;1726:12;1688:52;-1:-1:-1;1759:23:23;;1608:180;-1:-1:-1;1608:180:23:o;1793:472::-;1835:3;1873:5;1867:12;1900:6;1895:3;1888:19;1925:1;1935:162;1949:6;1946:1;1943:13;1935:162;;;2011:4;2067:13;;;2063:22;;2057:29;2039:11;;;2035:20;;2028:59;1964:12;1935:162;;;2115:6;2112:1;2109:13;2106:87;;;2181:1;2174:4;2165:6;2160:3;2156:16;2152:27;2145:38;2106:87;-1:-1:-1;2247:2:23;2226:15;-1:-1:-1;;2222:29:23;2213:39;;;;2254:4;2209:50;;1793:472;-1:-1:-1;;1793:472:23:o;2270:220::-;2419:2;2408:9;2401:21;2382:4;2439:45;2480:2;2469:9;2465:18;2457:6;2439:45;:::i;2495:545::-;2575:6;2583;2591;2644:2;2632:9;2623:7;2619:23;2615:32;2612:52;;;2660:1;2657;2650:12;2612:52;2699:9;2686:23;2718:31;2743:5;2718:31;:::i;:::-;2768:5;-1:-1:-1;2824:2:23;2809:18;;2796:32;2851:18;2840:30;;2837:50;;;2883:1;2880;2873:12;2837:50;2922:58;2972:7;2963:6;2952:9;2948:22;2922:58;:::i;:::-;2495:545;;2999:8;;-1:-1:-1;2896:84:23;;-1:-1:-1;;;;2495:545:23:o;3045:127::-;3106:10;3101:3;3097:20;3094:1;3087:31;3137:4;3134:1;3127:15;3161:4;3158:1;3151:15;3177:719;3220:5;3273:3;3266:4;3258:6;3254:17;3250:27;3240:55;;3291:1;3288;3281:12;3240:55;3327:6;3314:20;3353:18;3390:2;3386;3383:10;3380:36;;;3396:18;;:::i;:::-;3471:2;3465:9;3439:2;3525:13;;-1:-1:-1;;3521:22:23;;;3545:2;3517:31;3513:40;3501:53;;;3569:18;;;3589:22;;;3566:46;3563:72;;;3615:18;;:::i;:::-;3655:10;3651:2;3644:22;3690:2;3682:6;3675:18;3736:3;3729:4;3724:2;3716:6;3712:15;3708:26;3705:35;3702:55;;;3753:1;3750;3743:12;3702:55;3817:2;3810:4;3802:6;3798:17;3791:4;3783:6;3779:17;3766:54;3864:1;3857:4;3852:2;3844:6;3840:15;3836:26;3829:37;3884:6;3875:15;;;;;;3177:719;;;;:::o;3901:1025::-;4043:6;4051;4059;4067;4075;4083;4136:3;4124:9;4115:7;4111:23;4107:33;4104:53;;;4153:1;4150;4143:12;4104:53;4193:9;4180:23;4222:18;4263:2;4255:6;4252:14;4249:34;;;4279:1;4276;4269:12;4249:34;4302:50;4344:7;4335:6;4324:9;4320:22;4302:50;:::i;:::-;4292:60;;4405:2;4394:9;4390:18;4377:32;4361:48;;4434:2;4424:8;4421:16;4418:36;;;4450:1;4447;4440:12;4418:36;4473:52;4517:7;4506:8;4495:9;4491:24;4473:52;:::i;:::-;4463:62;;4578:2;4567:9;4563:18;4550:32;4534:48;;4607:2;4597:8;4594:16;4591:36;;;4623:1;4620;4613:12;4591:36;;4646:52;4690:7;4679:8;4668:9;4664:24;4646:52;:::i;:::-;4636:62;;;4748:2;4737:9;4733:18;4720:32;4761:31;4786:5;4761:31;:::i;:::-;3901:1025;;;;-1:-1:-1;3901:1025:23;;4863:3;4848:19;;4835:33;;4915:3;4900:19;;;4887:33;;-1:-1:-1;3901:1025:23;-1:-1:-1;;3901:1025:23:o;4931:819::-;5260:3;5249:9;5242:22;5223:4;5287:46;5328:3;5317:9;5313:19;5305:6;5287:46;:::i;:::-;5381:9;5373:6;5369:22;5364:2;5353:9;5349:18;5342:50;5415:33;5441:6;5433;5415:33;:::i;:::-;5401:47;;5496:9;5488:6;5484:22;5479:2;5468:9;5464:18;5457:50;5524:33;5550:6;5542;5524:33;:::i;:::-;-1:-1:-1;;;;;5631:15:23;;;5626:2;5611:18;;5604:43;5678:3;5663:19;;5656:35;;;;-1:-1:-1;;5728:15:23;;5584:3;5707:19;;;5700:44;;;;5656:35;5516:41;-1:-1:-1;;;4931:819:23:o;5755:127::-;5816:10;5811:3;5807:20;5804:1;5797:31;5847:4;5844:1;5837:15;5871:4;5868:1;5861:15;5887:272;5924:3;5968:4;5961:5;5957:16;5997:4;5988:7;5985:17;5982:140;;6044:10;6039:3;6035:20;6032:1;6025:31;6079:4;6076:1;6069:15;6107:4;6104:1;6097:15;5982:140;6151:1;6138:15;;5887:272;-1:-1:-1;;5887:272:23:o;6501:267::-;6590:6;6585:3;6578:19;6642:6;6635:5;6628:4;6623:3;6619:14;6606:43;-1:-1:-1;6694:1:23;6669:16;;;6687:4;6665:27;;;6658:38;;;;6750:2;6729:15;;;-1:-1:-1;;6725:29:23;6716:39;;;6712:50;;6501:267::o;6773:247::-;6932:2;6921:9;6914:21;6895:4;6952:62;7010:2;6999:9;6995:18;6987:6;6979;6952:62;:::i;:::-;6944:70;6773:247;-1:-1:-1;;;;6773:247:23:o;7025:445::-;-1:-1:-1;;;;;7278:15:23;;;7260:34;;7330:15;;7325:2;7310:18;;7303:43;7382:2;7377;7362:18;;7355:30;;;7203:4;;7402:62;;7445:18;;7437:6;7429;7402:62;:::i;:::-;7394:70;7025:445;-1:-1:-1;;;;;;7025:445:23:o"},"gasEstimates":{"creation":{"codeDepositCost":"2164400","executionCost":"infinite","totalCost":"infinite"},"external":{"bytes32ToString(bytes32)":"infinite","changeTokenURI(address,string)":"infinite","deploymentCreator(address)":"2586","getLatestPromotionDeployment(address)":"2575","handle(uint32,bytes32,bytes)":"infinite","latestPromotionDeployment(address)":"2545","mailbox()":"infinite"}},"methodIdentifiers":{"bytes32ToString(bytes32)":"9201de55","changeTokenURI(address,string)":"c1c253a9","deploymentCreator(address)":"7d45933b","getLatestPromotionDeployment(address)":"97eb0113","handle(uint32,bytes32,bytes)":"56d5d475","latestPromotionDeployment(address)":"2b951aa3","mailbox()":"d5438eae"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mailboxAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotionNFTAddress\",\"type\":\"address\"}],\"name\":\"PromotionNFTDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"TokenURIChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"changeTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deploymentCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"promoter\",\"type\":\"address\"}],\"name\":\"getLatestPromotionDeployment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_body\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestPromotionDeployment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_body\":\"Raw bytes content of message body\",\"_origin\":\"Domain ID of the chain from which the message came\",\"_sender\":\"Address of the message sender on the origin chain as bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handle an interchain message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Receiver.sol\":\"Receiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/ERC721Promotion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interfaces/IMessageRecipient.sol\\\";\\r\\n\\r\\ncontract ERC721Promotion is\\r\\n    ERC721,\\r\\n    ERC721URIStorage,\\r\\n    Ownable,\\r\\n    IMessageRecipient\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    Counters.Counter private _tokenIdCounter;\\r\\n\\r\\n    string public badgeTokenURI;\\r\\n    uint256 public amountOfClaimsPerPerson;\\r\\n    mapping(address => uint) claimerToClaimsCount;\\r\\n    address public immutable mailbox;\\r\\n    address public promoter;\\r\\n\\r\\n    event ClaimedPromotion(address claimer, uint claimCount);\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory _tokenURI,\\r\\n        address _promoterAddress,\\r\\n        uint _amountOfClaimsPerPerson,\\r\\n        address _mailboxAddress\\r\\n    ) ERC721(name, symbol) {\\r\\n        setTokenURI(_tokenURI);\\r\\n        amountOfClaimsPerPerson = _amountOfClaimsPerPerson;\\r\\n        mailbox = _mailboxAddress;\\r\\n        promoter = _promoterAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyMailbox() {\\r\\n        require(msg.sender == mailbox);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external onlyMailbox {\\r\\n        address claimer = abi.decode(_body, (address));\\r\\n        if (claimerToClaimsCount[claimer] == 0) {\\r\\n            safeMint(claimer);\\r\\n        } else {\\r\\n            require(\\r\\n                claimerToClaimsCount[claimer] < amountOfClaimsPerPerson,\\r\\n                \\\"No more claims\\\"\\r\\n            );\\r\\n            addClaim(claimer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safeMint(address to) internal {\\r\\n        require(claimerToClaimsCount[to] == 0, \\\"Already owns NFT\\\");\\r\\n        uint256 tokenId = _tokenIdCounter.current();\\r\\n        _tokenIdCounter.increment();\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, badgeTokenURI);\\r\\n        claimerToClaimsCount[to] = 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, 1);\\r\\n    }\\r\\n\\r\\n    function addClaim(address to) internal {\\r\\n        claimerToClaimsCount[to] += 1;\\r\\n\\r\\n        emit ClaimedPromotion(to, claimerToClaimsCount[to]);\\r\\n    }\\r\\n\\r\\n    function setTokenURI(string memory _tokenURI) public onlyOwner {\\r\\n        badgeTokenURI = _tokenURI;\\r\\n    }\\r\\n\\r\\n    // Soulbound Token\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 firstTokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal override {\\r\\n        revert(\\\"Cannot transfer this token\\\");\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _burn(uint256 tokenId)\\r\\n        internal\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        revert(\\\"Disabled\\\");\\r\\n        // super._burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe26b0678d208cb0be04dc35cbce68539fd711b890fce8b1deadfc2cb58cef297\",\"license\":\"MIT\"},\"contracts/Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"./interfaces/IMessageRecipient.sol\\\";\\r\\nimport \\\"./ERC721Promotion.sol\\\";\\r\\n\\r\\ncontract Receiver is IMessageRecipient {\\r\\n    mapping(address => address) public latestPromotionDeployment;\\r\\n    mapping(address => address) public deploymentCreator;\\r\\n    address public immutable mailbox;\\r\\n\\r\\n    constructor(address _mailboxAddress) {\\r\\n        mailbox = _mailboxAddress;\\r\\n    }\\r\\n\\r\\n    event PromotionNFTDeployed(address promotionNFTAddress);\\r\\n    event TokenURIChanged(\\r\\n        address contractAddress,\\r\\n        address creator,\\r\\n        string newURI\\r\\n    );\\r\\n\\r\\n    modifier onlyMailbox() {\\r\\n        require(msg.sender == mailbox);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external onlyMailbox {\\r\\n        (\\r\\n            string memory _name,\\r\\n            string memory _symbol,\\r\\n            string memory _badgeURI,\\r\\n            address _promoterAddress,\\r\\n            uint _claimsPerPerson,\\r\\n            bytes32 _salt\\r\\n        ) = abi.decode(_body, (string, string, string, address, uint, bytes32));\\r\\n        ERC721Promotion promotion = (new ERC721Promotion){salt: _salt}(\\r\\n            _name,\\r\\n            _symbol,\\r\\n            _badgeURI,\\r\\n            msg.sender,\\r\\n            _claimsPerPerson,\\r\\n            mailbox\\r\\n        );\\r\\n        emit PromotionNFTDeployed(address(promotion));\\r\\n    }\\r\\n\\r\\n    function changeTokenURI(address contractAddress, string calldata newURI)\\r\\n        public\\r\\n    {\\r\\n        require(msg.sender == deploymentCreator[contractAddress], \\\"Not owned\\\");\\r\\n        ERC721Promotion(contractAddress).setTokenURI(newURI);\\r\\n\\r\\n        emit TokenURIChanged(contractAddress, msg.sender, newURI);\\r\\n    }\\r\\n\\r\\n    function getLatestPromotionDeployment(address promoter)\\r\\n        public\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return latestPromotionDeployment[promoter];\\r\\n    }\\r\\n\\r\\n    function bytes32ToString(bytes32 _bytes32)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        uint8 i = 0;\\r\\n        while (i < 32 && _bytes32[i] != 0) {\\r\\n            i++;\\r\\n        }\\r\\n        bytes memory bytesArray = new bytes(i);\\r\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\r\\n            bytesArray[i] = _bytes32[i];\\r\\n        }\\r\\n        return string(bytesArray);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x34ee49629c1f10dd6b0b36eb0432066b08ff91437d7d9bb695a5f64a0eeb70b4\",\"license\":\"MIT\"},\"contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IMessageRecipient {\\r\\n    /**\\r\\n     * @notice Handle an interchain message\\r\\n     * @param _origin Domain ID of the chain from which the message came\\r\\n     * @param _sender Address of the message sender on the origin chain as bytes32\\r\\n     * @param _body Raw bytes content of message body\\r\\n     */\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb973c9a025339a6ee49248143ae8ab0801340675ac19f635df5130e56d8d1250\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4203,"contract":"contracts/Receiver.sol:Receiver","label":"latestPromotionDeployment","offset":0,"slot":"0","type":"t_mapping(t_address,t_address)"},{"astId":4207,"contract":"contracts/Receiver.sol:Receiver","label":"deploymentCreator","offset":0,"slot":"1","type":"t_mapping(t_address,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_address)":{"encoding":"mapping","key":"t_address","label":"mapping(address => address)","numberOfBytes":"32","value":"t_address"}}},"userdoc":{"kind":"user","methods":{"handle(uint32,bytes32,bytes)":{"notice":"Handle an interchain message"}},"version":1}}},"contracts/interfaces/IInterchainGasPaymaster.sol":{"IInterchainGasPaymaster":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"messageId","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"gasAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"payment","type":"uint256"}],"name":"GasPayment","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_messageId","type":"bytes32"},{"internalType":"uint32","name":"_destinationDomain","type":"uint32"},{"internalType":"uint256","name":"_gasAmount","type":"uint256"},{"internalType":"address","name":"_refundAddress","type":"address"}],"name":"payForGas","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_destinationDomain","type":"uint32"},{"internalType":"uint256","name":"_gasAmount","type":"uint256"}],"name":"quoteGasPayment","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"GasPayment(bytes32,uint256,uint256)":{"params":{"gasAmount":"The amount of destination gas paid for.","messageId":"The ID of the message to pay for.","payment":"The amount of native tokens paid."}}},"kind":"dev","methods":{},"title":"IInterchainGasPaymaster","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"payForGas(bytes32,uint32,uint256,address)":"11bf2c18","quoteGasPayment(uint32,uint256)":"a6929793"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"GasPayment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"payForGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_gasAmount\",\"type\":\"uint256\"}],\"name\":\"quoteGasPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"GasPayment(bytes32,uint256,uint256)\":{\"params\":{\"gasAmount\":\"The amount of destination gas paid for.\",\"messageId\":\"The ID of the message to pay for.\",\"payment\":\"The amount of native tokens paid.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"IInterchainGasPaymaster\",\"version\":1},\"userdoc\":{\"events\":{\"GasPayment(bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a payment is made for a message's gas costs.\"}},\"kind\":\"user\",\"methods\":{},\"notice\":\"Manages payments on a source chain to cover gas costs of relaying messages to destination chains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IInterchainGasPaymaster.sol\":\"IInterchainGasPaymaster\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IInterchainGasPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\n/**\\r\\n * @title IInterchainGasPaymaster\\r\\n * @notice Manages payments on a source chain to cover gas costs of relaying\\r\\n * messages to destination chains.\\r\\n */\\r\\ninterface IInterchainGasPaymaster {\\r\\n    /**\\r\\n     * @notice Emitted when a payment is made for a message's gas costs.\\r\\n     * @param messageId The ID of the message to pay for.\\r\\n     * @param gasAmount The amount of destination gas paid for.\\r\\n     * @param payment The amount of native tokens paid.\\r\\n     */\\r\\n    event GasPayment(\\r\\n        bytes32 indexed messageId,\\r\\n        uint256 gasAmount,\\r\\n        uint256 payment\\r\\n    );\\r\\n\\r\\n    function payForGas(\\r\\n        bytes32 _messageId,\\r\\n        uint32 _destinationDomain,\\r\\n        uint256 _gasAmount,\\r\\n        address _refundAddress\\r\\n    ) external payable;\\r\\n\\r\\n    function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x69780ca2e1ee4defcb8bf53175b6832a01b7232726c103082b31eb1ac7c33227\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"GasPayment(bytes32,uint256,uint256)":{"notice":"Emitted when a payment is made for a message's gas costs."}},"kind":"user","methods":{},"notice":"Manages payments on a source chain to cover gas costs of relaying messages to destination chains.","version":1}}},"contracts/interfaces/IInterchainQueryRouter.sol":{"IInterchainQueryRouter":{"abi":[{"inputs":[{"internalType":"uint32","name":"_destinationDomain","type":"uint32"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"queryData","type":"bytes"},{"internalType":"bytes","name":"callback","type":"bytes"}],"name":"query","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"query(uint32,address,bytes,bytes)":{"params":{"_destinationDomain":"Domain of destination chain","callback":"Callback function selector on `msg.sender` and optionally abi-encoded prefix arguments.","queryData":"The calldata of the view call to make on the destination chain.","target":"The address of the contract to query on destination chain."},"returns":{"_0":"messageId The ID of the Hyperlane message encoding the query."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"query(uint32,address,bytes,bytes)":"2222b452"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"queryData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callback\",\"type\":\"bytes\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"query(uint32,address,bytes,bytes)\":{\"params\":{\"_destinationDomain\":\"Domain of destination chain\",\"callback\":\"Callback function selector on `msg.sender` and optionally abi-encoded prefix arguments.\",\"queryData\":\"The calldata of the view call to make on the destination chain.\",\"target\":\"The address of the contract to query on destination chain.\"},\"returns\":{\"_0\":\"messageId The ID of the Hyperlane message encoding the query.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IInterchainQueryRouter.sol\":\"IInterchainQueryRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IInterchainQueryRouter.sol\":{\"content\":\"interface IInterchainQueryRouter {\\r\\n    /**\\r\\n     * @param _destinationDomain Domain of destination chain\\r\\n     * @param target The address of the contract to query on destination chain.\\r\\n     * @param queryData The calldata of the view call to make on the destination\\r\\n     * chain.\\r\\n     * @param callback Callback function selector on `msg.sender` and optionally\\r\\n     * abi-encoded prefix arguments.\\r\\n     * @return messageId The ID of the Hyperlane message encoding the query.\\r\\n     */\\r\\n    function query(\\r\\n        uint32 _destinationDomain,\\r\\n        address target,\\r\\n        bytes calldata queryData,\\r\\n        bytes calldata callback\\r\\n    ) external returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xd38022d2da4b2e4c77fd731126edec27e4cc4176c616cce631bdd26e27d39299\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMailbox.sol":{"IMailbox":{"abi":[{"inputs":[{"internalType":"uint32","name":"_destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"_recipientAddress","type":"bytes32"},{"internalType":"bytes","name":"_messageBody","type":"bytes"}],"name":"dispatch","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_metadata","type":"bytes"},{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"process","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"dispatch(uint32,bytes32,bytes)":"fa31de01","process(bytes,bytes)":"7c39d130"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipientAddress\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_messageBody\",\"type\":\"bytes\"}],\"name\":\"dispatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"process\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMailbox.sol\":\"IMailbox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\ninterface IMailbox {\\r\\n    function dispatch(\\r\\n        uint32 _destinationDomain,\\r\\n        bytes32 _recipientAddress,\\r\\n        bytes calldata _messageBody\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function process(bytes calldata _metadata, bytes calldata _message)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd6cb0a2e1d9a69f4f7b8ac3dc51bfebf547620d2f08ee1f9f2e627d759d6ccc2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMessageRecipient.sol":{"IMessageRecipient":{"abi":[{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"bytes32","name":"_sender","type":"bytes32"},{"internalType":"bytes","name":"_body","type":"bytes"}],"name":"handle","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"handle(uint32,bytes32,bytes)":{"params":{"_body":"Raw bytes content of message body","_origin":"Domain ID of the chain from which the message came","_sender":"Address of the message sender on the origin chain as bytes32"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"handle(uint32,bytes32,bytes)":"56d5d475"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_body\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"handle(uint32,bytes32,bytes)\":{\"params\":{\"_body\":\"Raw bytes content of message body\",\"_origin\":\"Domain ID of the chain from which the message came\",\"_sender\":\"Address of the message sender on the origin chain as bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"handle(uint32,bytes32,bytes)\":{\"notice\":\"Handle an interchain message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMessageRecipient.sol\":\"IMessageRecipient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.6.11;\\r\\n\\r\\ninterface IMessageRecipient {\\r\\n    /**\\r\\n     * @notice Handle an interchain message\\r\\n     * @param _origin Domain ID of the chain from which the message came\\r\\n     * @param _sender Address of the message sender on the origin chain as bytes32\\r\\n     * @param _body Raw bytes content of message body\\r\\n     */\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _body\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb973c9a025339a6ee49248143ae8ab0801340675ac19f635df5130e56d8d1250\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"handle(uint32,bytes32,bytes)":{"notice":"Handle an interchain message"}},"version":1}}},"contracts/interfaces/IReceiver.sol":{"IReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"claimer","type":"address"}],"name":"getLatestPromotionDeployment","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getLatestPromotionDeployment(address)":"97eb0113"}},"metadata":"{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getLatestPromotionDeployment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IReceiver.sol\":\"IReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IReceiver.sol\":{\"content\":\"interface IReceiver {\\r\\n    function getLatestPromotionDeployment(address claimer)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ac0a7a0339a0ec44b7a46a2aa0564773b7fcbe184a9da8787abffc8614aa04a\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}